Text.ConvertDateTimeToText.FromCustomDateTime DateTime: CurrentDateTime CustomFormat: $'''yyyy-MM-ddTHH:mm:ss.fff''' Result=> Log_Timestamp
IF Log_MessageList.Count < 2 THEN
    SET Log_Level TO $'''WARN'''
    SET Log_Message TO $'''Found the list of expected message count to be less than 2. Cannot parse the message object correctly. Original message: %Log_Message%'''
ELSE
    SET Log_Level TO Log_MessageList[0]
    SET Log_Message TO Log_MessageList[1]
END
Text.Replace Text: Log_Message TextToFind: $'''[\\r\\n]''' IsRegex: True IgnoreCase: False ReplaceWith: $'''%' '%''' ActivateEscapeSequences: False Result=> Log_Message
Text.Replace Text: Log_Message TextToFind: $'''\\''' IsRegex: False IgnoreCase: False ReplaceWith: $'''/''' ActivateEscapeSequences: False Result=> Log_Message
Text.Replace Text: Log_Message TextToFind: $'''\"''' IsRegex: False IgnoreCase: False ReplaceWith: $'''\'''' ActivateEscapeSequences: False Result=> Log_Message
SET Log_Message TO $'''\"Level\": \"%Log_Level%\", \"Timestamp\": \"%Log_Timestamp%\", \"Project\": \"%Input_ProjectName%\", \"Flow\": \"%Input_FlowName%\", \"Subflow\": \"%Log_SubflowName%\", \"Message\": \"%Log_Message%\"'''
IF Contains(Input_LoggerObject['LogLevels'], Log_Level, True) THEN
    File.WriteText File: Input_LogPath TextToWrite: $'''{%Log_Message%}''' AppendNewLine: True IfFileExists: File.IfFileExists.Append Encoding: File.FileEncoding.UTF8
END
# Overwriting the Log_Message to have less parameters for the error log list (excluding project name and module name)
SET Log_Message TO $'''\"Level\": \"%Log_Level%\", \"Timestamp\": \"%Log_Timestamp%\", \"Subflow\": \"%Log_SubflowName%\", \"Message\": \"%Log_Message%\"'''
