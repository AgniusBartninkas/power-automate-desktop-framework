<ImportExportXml xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <Entities></Entities>
  <Roles></Roles>
  <Workflows>
    <Workflow WorkflowId="{78ac15ae-980a-ef11-9f89-000d3a24f839}" Name="PADFramework: FlowTemplate (WorkQueues)">
      <JsonFileName>/Workflows/PADFrameworkFlowTemplateWorkQueues-78AC15AE-980A-EF11-9F89-000D3A24F839.json</JsonFileName>
      <Type>1</Type>
      <Subprocess>0</Subprocess>
      <Category>6</Category>
      <Mode>0</Mode>
      <Scope>4</Scope>
      <OnDemand>0</OnDemand>
      <TriggerOnCreate>0</TriggerOnCreate>
      <TriggerOnDelete>0</TriggerOnDelete>
      <AsyncAutodelete>0</AsyncAutodelete>
      <SyncWorkflowLogOnFailure>0</SyncWorkflowLogOnFailure>
      <StateCode>1</StateCode>
      <StatusCode>2</StatusCode>
      <RunAs>1</RunAs>
      <IsTransacted>1</IsTransacted>
      <IntroducedVersion>1.0</IntroducedVersion>
      <IsCustomizable>1</IsCustomizable>
      <BusinessProcessType>0</BusinessProcessType>
      <UIFlowType>2</UIFlowType>
      <IsCustomProcessingStepAllowedForOtherPublishers>1</IsCustomProcessingStepAllowedForOtherPublishers>
      <Metadata>{"clientversion":"2.46.163.24194","isvalid":true,"$schema":"https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#","schemaVersion":"ROBIN_20211012","containsActiveConnections":false,"containsGptPredictActions":false,"containsActiveCopilotActions":false,"containsActiveWorkQueuesActions":true,"containsActiveLogMessageActions":false,"multipleRequestsState":0,"scriptType":0,"disableScreenshotCaptureOnError":false,"missingUiElementRepairType":null,"flowTimeout":null}</Metadata>
      <Inputs>{"schema":null}</Inputs>
      <Outputs>{"schema":{"properties":{"ErrorMessage":{"default":"","description":"","format":"password","title":"ErrorMessage","type":"string","value":null},"Output_IsSuccess":{"default":"","description":"","format":null,"title":"Output_IsSuccess","type":"boolean","value":null}},"type":"object"}}</Outputs>
      <Dependencies>{"childFlows":["2a80c691-72fd-4222-99f2-2a4ee54b2b71","c74ad727-5617-4d54-89a9-9d7b35187d34","a08238ca-5ec4-422d-8eaf-1766d05ec8fe","a261fa2e-fce6-49c8-909a-a94012906030","c515285c-5a5d-4379-b50b-96837d0796d2","8bba4a93-fbb7-478c-b098-a5ca91273227","aa0a967a-5f8c-4891-b6c1-87536e7f3d0b"],"workQueues":["4b22c5ab-fce5-ee11-904c-0022487f2c0b"],"environmentVariables":[],"requiredBinaries":["711d42a7-cd1a-4247-aa86-64356c383722","c70d4c95-4c4a-4418-802f-16c5ef2ca631","1fb6ed6c-cc6a-442e-b1c8-6ba8348e5c2b"]}</Dependencies>
      <ConnectionReferences>[]</ConnectionReferences>
      <Definition>"@@ConnectionString: ''\r\n@@Type: 'Local'\r\n@@DesktopType: 'local'\r\n@@DisplayName: 'Local computer'\r\nIMPORT 'controlRepo.appmask' AS appmask\r\nIMPORT 'imageRepo.imgrepo' AS imgrepo\r\n@SENSITIVE: [ErrorMessage]\r\n@OUTPUT ErrorMessage : { 'Description': '', 'FriendlyName': 'ErrorMessage', 'Type': 'String' } \r\n@OUTPUT Output_IsSuccess : { 'Description': '', 'FriendlyName': 'Output_IsSuccess', 'Type': 'Bool' } \r\nCALL Init\r\nText.ToNumber Text: $'''\\'\\''''\r\nON ERROR\r\n    CALL GetSubflowName\r\nEND\r\nDateTime.GetCurrentDateTime.Local DateTimeFormat: DateTime.DateTimeFormat.DateAndTime CurrentDateTime=&gt; CurrentDateTime\r\nON ERROR\r\n    GOTO Fatal\r\nEND\r\nText.ConvertDateTimeToText.FromCustomDateTime DateTime: CurrentDateTime CustomFormat: $'''yyyy-MM-dd''' Result=&gt; DateStamp\r\nCALL Config\r\nIF IsNotEmpty(ErrorMessage) THEN\r\n    SET Log_Message TO $'''FATAL;;;%ErrorMessage%'''\r\n    CALL Logger\r\n    GOTO Fatal\r\nEND\r\nCALL GetFlowSettings\r\nIF IsNotEmpty(ErrorMessage) THEN\r\n    SET Log_Message TO $'''FATAL;;;%ErrorMessage%'''\r\n    CALL Logger\r\n    GOTO Fatal\r\nEND\r\nSET Log_Message TO $'''INFO;;;Start'''\r\nCALL Logger\r\nBLOCK \r\nON BLOCK ERROR all\r\n    SET Log_Message TO $'''TRACE'''\r\n    CALL Logger\r\nEND\r\n    SET Log_Message TO $'''INFO;;;Starting flow \\\"%FlowName%\\\"'''\r\n    CALL Logger\r\n    CALL ExecuteMainFlow\r\n    IF IsNotEmpty(ErrorMessage) THEN\r\n        SET Log_Message TO $'''ERROR;;;Failed to successfully run flow \\\"%FlowName%\\\". Last error: %ErrorMessage%. Flow stopped'''\r\n        CALL Logger\r\n        GOTO 'Exit'\r\n    END\r\n    SET Output_IsSuccess TO True\r\n    SET Log_Message TO $'''INFO;;;Finishing flow \\\"%FlowName%\\\"'''\r\n    CALL Logger\r\nEND\r\nLABEL 'Exit'\r\nIF (List_ErrorMessages.Count) &gt; (0) THEN\r\n    CALL SendErrorMessages\r\n    IF IsNotEmpty(ErrorMessage) THEN\r\n        CALL StopFlow\r\n    END\r\nEND\r\nSET Log_Message TO $'''INFO;;;End'''\r\nCALL Logger\r\nVariables.RemoveItemFromList.RemoveItemFromListByIndex ItemIndex: List_SubflowNames.Count - 1 List: List_SubflowNames\r\nEXIT Code: 0\r\nLABEL Fatal\r\nCALL StopFlow\r\nFUNCTION Init GLOBAL\r\n    **REGION Initializing variables\r\n    /# Initializing variables. Setting blank values and 0 on numeric variables is not absolutely necessary - it can be skipped. \r\nCreating empty lists is also not mandatory, as \"Add item to list\" works without the list being initialized.\r\nIt's added for some extra clarity and readability.#/\r\n    SET ErrorMessage TO ''\r\n    SET ErrorCount TO 0\r\n    SET ExcelRestartCount TO 0\r\n    SET BrowserRestartCount TO 0\r\n    SET Output_IsSuccess TO False\r\n    Variables.CreateNewList List=&gt; List_SubflowNames\r\n    Variables.CreateNewList List=&gt; List_ErrorMessages\r\n    Variables.CreateNewList List=&gt; List_Attachments\r\n    **ENDREGION\r\n    **REGION Flow variables - adjust as necessary\r\n    /# Flow and directory variables.\r\nProjectName should match the directory name for the project.\r\nFlowName and UserFriendlyProjectName are used for logging and notifications.#/\r\n    SET ProjectName TO $'''{ReplaceMe}'''\r\n    SET FlowName TO $'''{ReplaceMe}'''\r\n    SET UserFriendlyProjectName TO $'''{ReplaceMe}'''\r\n    # Directory can be adjusted if necessary as well. C:\\RPA is just a suggestion.\r\n    SET ProjectDirectory TO $'''C:\\\\RPA\\\\%ProjectName%'''\r\n    **ENDREGION\r\n    **REGION ConfigReader variables - adjust as necessary\r\n    /# Config_Type is used by ConfigReader. Should be set to one of the following:\r\n- JSON\r\n- Excel\r\n- Database\r\n- SharePoint List\r\n- Dataverse#/\r\n    SET Config_Type TO $'''JSON'''\r\n    /# Config_Address is used by ConfigReader. Should be blank for JSON files. Otherwise, should contain:\r\n- A connection string for getting Config values from a Database\r\n- A site address for for getting Config values from a SharePoint List\r\n- An environment URL for getting Config values from a Dataverse table\r\n- A file path for getting Config values from an Excel file#/\r\n    SET Config_Address TO $'''%''%'''\r\n    /# Config_Path is used by ConfigReader. Should contain:\r\n- File path for JSON files (set in the Config subflow)\r\n- Sheet name for Excel files\r\n- SQL stored procedure name for Databases\r\n- SharePoint list name for SharePoint\r\n- Table logical name for Dataverse#/\r\n    SET Config_Path TO $'''%''%'''\r\n    **ENDREGION\r\n    **REGION Logger variables - adjust as necessary\r\n    /# Log_Type is used by Logger. Should be set to one of the following:\r\n- Log File (plain text .log files)\r\n- CSV file\r\n- Database\r\n- SharePoint List#/\r\n    SET Log_Type TO $'''Log File'''\r\n    /# Log_Address is used by Logger. Should be blank for plain text or CSV files. Otherwise, should contain:\r\n- A Connection string for logging to Database\r\n- A Site address for logging to SharePoint List#/\r\n    SET Log_Address TO $'''%''%'''\r\n    /# Log_Path is used by Logger. Should contain:\r\n- File path for Plain text and CSV files (set in Config)\r\n- Database table name or stored procedure for Databases\r\n- SharePoint list name for SharePoint#/\r\n    SET Log_Path TO $'''%''%'''\r\n    **ENDREGION\r\n    **REGION Directories\r\n    /# These directories should be created as needed:\r\n- Logs for logging to files. Not needed for logging to SharePoint lists or databases\r\n- Flow for any files that may be temporarily stored by the flow, as well as screenshots, etc.\r\n- Config for external config files. Not needed when Configs are stored in databases.#/\r\n    SET LogsDirectory TO $'''%ProjectDirectory%\\\\Logs'''\r\n    SET FlowDirectory TO $'''%ProjectDirectory%\\\\Flow'''\r\n    SET ConfigDirectory TO $'''%ProjectDirectory%\\\\Config'''\r\n    **ENDREGION\r\nEND FUNCTION\r\nFUNCTION Config GLOBAL\r\n    SET ErrorMessage TO ''\r\n    BLOCK \r\nON BLOCK ERROR all\r\n    SET Log_Message TO $'''TRACE'''\r\n    CALL Logger\r\nEND\r\n        SET ConfigFile TO $'''%ConfigDirectory%\\\\Config.json'''\r\n        **REGION Base Logger\r\n        # Creating base logger with all log levels enabled so we can actually log errors/information from Config if it fails.\r\n        SET Config_LoggerObject TO {{ }}\r\n        SET Config_LoggerObject[$'''LogLevels'''] TO $'''TRACE,DEBUG,INFO,WARN,ERROR,FATAL'''\r\n        SET Config_LoggerObject['ErrorLogLevels'] TO $'''ERROR,TRACE,FATAL'''\r\n        **ENDREGION\r\n        **REGION Log file path\r\n        System.GetEnvironmentVariable.GetEnvironmentVariable Name: $'''COMPUTERNAME''' Value=&gt; ComputerName\r\n        SWITCH Log_Type\r\n            CASE = $'''Log File'''\r\n                SET Log_Path TO $'''%LogsDirectory%\\\\%DateStamp%_%FlowName%_%ComputerName%.log'''\r\n            CASE = $'''CSV File'''\r\n                SET Log_Path TO $'''%LogsDirectory%\\\\%DateStamp%_%FlowName%_%ComputerName%.csv'''\r\n        END\r\n        **ENDREGION\r\n        @@flowname: 'PADFramework: ConfigReader'\r\nExternal.RunFlow FlowId: 'c74ad727-5617-4d54-89a9-9d7b35187d34' @Input_ConfigType: Config_Type @Input_ConfigPath: Config_Path @Input_ConfigAddress: Config_Address @Input_ProjectName: ProjectName @Output_ConfigObject=&gt; Config_Object @Output_Message=&gt; Output_Message @Output_Status=&gt; Output_Status\r\n        IF Output_Status &lt;&gt; 200 THEN\r\n            SET ErrorMessage TO Output_Message\r\n            GOTO 'Exit'\r\n        END\r\n        # Conversion needed in case the objects are stored as JSON strings in configs (e.g. Dataverse, Database, SharePoint, Excel)\r\n        Variables.ConvertJsonToCustomObject Json: Config_Object['Recipient'] CustomObject=&gt; Config_RecipientObject\r\n        Variables.ConvertJsonToCustomObject Json: Config_Object['Logger'] CustomObject=&gt; Config_LoggerObject\r\n        Variables.ConvertJsonToCustomObject Json: Config_Object['MaxErrorCount'] CustomObject=&gt; Config_MaxErrorCountObject\r\n        IF Contains(Config_Object, $'''ScreenshotsPath''', False) THEN\r\n            SET Config_ScreenshotsPath TO Config_Object['ScreenshotsPath']\r\n        END\r\n        IF Contains(Config_Object, $'''URL''', False) THEN\r\n            Variables.ConvertJsonToCustomObject Json: Config_Object['URL'] CustomObject=&gt; Config_URLObject\r\n        END\r\n        IF Contains(Config_Object, $'''HTMLTemplatePath''', False) THEN\r\n            SET Config_HTMLTemplatePath TO Config_Object['HTMLTemplatePath']\r\n        END\r\n        /# Environment values:\r\n- PROD\r\n- TEST\r\n- DEV\r\n#/\r\n        SET Config_Environment TO Config_Object['Environment']\r\n    END\r\n    LABEL 'Exit'\r\nEND FUNCTION\r\nFUNCTION Logger GLOBAL\r\n    BLOCK \r\nON BLOCK ERROR all\r\n\r\nEND\r\n        # TRACE level used in \"On block error\" blocks only, indicating a system exception.\r\n        IF Log_Message = $'''TRACE''' THEN\r\n            ERROR =&gt; ErrorMessage\r\n            SET Log_Message TO $'''%Log_Message%;;;%ErrorMessage%'''\r\n        END\r\n        /# Adjust the parameters according to your logging needs.\r\nThe current settings will log to a plain text .log file.#/\r\n        @@flowname: 'PADFramework: Logger'\r\nExternal.RunFlow FlowId: '2a80c691-72fd-4222-99f2-2a4ee54b2b71' @Input_SubflowNamesList: List_SubflowNames @Input_LoggerObject: Config_LoggerObject @Input_LogPath: Log_Path @Input_LogMessage: Log_Message @Input_LogType: Log_Type @Input_ErrorMessageList: List_ErrorMessages @Input_FlowName: FlowName @Input_ProjectName: ProjectName @Input_LogAddress: Log_Address @Output_ErrorMessageList=&gt; List_ErrorMessages @Output_ErrorMessage=&gt; Output_Message\r\n        IF IsNotEmpty(Output_Message) THEN\r\n            # Not calling ThrowFatalError here to prevent logical recursion.\r\n            SET ErrorMessage TO Output_Message\r\n            SET Output_IsSuccess TO False\r\n            EXIT Code: 0\r\n        END\r\n        SET Log_Message TO ''\r\n        EXIT FUNCTION\r\n    END\r\n    # Retrieving the error captured by the block\r\n    ERROR =&gt; ErrorMessage\r\n    IF IsNotEmpty(ErrorMessage) THEN\r\n        SET Output_IsSuccess TO False\r\n        EXIT Code: 0\r\n    END\r\nEND FUNCTION\r\nFUNCTION StopFlow GLOBAL\r\n    /# Description:\r\nThis subflow gets the last occurred exception and stops the flow with the exception message. If the error handling is configured to do so, it would also send an email about the fatal error.\r\n\r\nParams:\r\n- None\r\n\r\nReturns:\r\n- Nothing\r\n#/\r\n    SET Output_IsSuccess TO False\r\n    ERROR =&gt; ErrorMessage\r\n    EXIT Code: 0\r\nEND FUNCTION\r\nFUNCTION SendErrorMessages GLOBAL\r\n    SET ErrorMessage TO ''\r\n    Text.ToNumber Text: $'''\\'\\''''\r\n    ON ERROR\r\n        CALL GetSubflowName\r\n    END\r\n    SET Log_Message TO $'''INFO;;;Start'''\r\n    CALL Logger\r\n    BLOCK \r\nON BLOCK ERROR all\r\n    SET Log_Message TO $'''TRACE'''\r\n    CALL Logger\r\nEND\r\n        SET HTML_EmailMessage TO $'''&lt;i&gt;\r\n &lt;p&gt;You are receiving this message because you are set as the recipient for error/warning messages on project %ProjectName%. If you do not want to receive these messages in the future, please contact support.&lt;/p&gt;\r\n &lt;p&gt;Please see the messages below and take appropriate action. If the above explanations do not cover the messages you receive and you are not sure whether or not you need to take any action, please contact support for guidance.&lt;/p&gt;\r\n&lt;/i&gt; \r\n&lt;p&gt;Hello,&lt;/p&gt;\r\n&lt;p&gt;The project %UserFriendlyProjectName% (%ProjectName%) flow \\\"%FlowName%\\\" has completed {{TextToReplace}} and produced the following error log messages:&lt;/p&gt;\r\n&lt;p&gt;%List_ErrorMessages%&lt;/p&gt;\r\n&lt;p&gt;\r\n Please act accordingly.&lt;br&gt;\r\n Best regards,&lt;br&gt;\r\n Robot\r\n&lt;/p&gt;'''\r\n        IF Output_IsSuccess = True THEN\r\n            Text.Replace Text: HTML_EmailMessage TextToFind: $'''{{TextToReplace}}''' IsRegEx: False IgnoreCase: False ReplaceWith: $'''successfully''' ActivateEscapeSequences: False Result=&gt; HTML_EmailMessage\r\n        ELSE\r\n            Text.Replace Text: HTML_EmailMessage TextToFind: $'''{{TextToReplace}}''' IsRegEx: False IgnoreCase: False ReplaceWith: $'''unsuccessfully''' ActivateEscapeSequences: False Result=&gt; HTML_EmailMessage\r\n        END\r\n        IF Config_Environment &lt;&gt; $'''PROD''' THEN\r\n            SET ErrorLogRecipient TO Config_RecipientObject['Default']\r\n        ELSE\r\n            SET ErrorLogRecipient TO Config_RecipientObject['Error']\r\n        END\r\n        SET Log_Message TO $'''INFO;;;Sending error messages to \\\"%ErrorLogRecipient%\\\"'''\r\n        CALL Logger\r\n        # Use either 'EmailSender' or 'EmailSenderO365Outlook' depending on the mailbox type you want to send the message from.\r\n        @@flowname: 'PADFramework: EmailSenderO365Outlook'\r\nExternal.RunFlow FlowId: 'c515285c-5a5d-4379-b50b-96837d0796d2' @Input_Attachments: List_Attachments @Input_EmailMessage: HTML_EmailMessage @Input_EmailRecipient: ErrorLogRecipient @Input_EmailRecipientCC: $'''%''%''' @Input_EmailSubject: $'''%ProjectName% error log''' @Input_HTMLTemplatePath: Config_HTMLTemplatePath @Output_Message=&gt; Output_Message @Output_Status=&gt; Output_Status\r\n    END\r\n    LABEL 'Exit'\r\n    SET Log_Message TO $'''INFO;;;End'''\r\n    CALL Logger\r\n    Variables.RemoveItemFromList.RemoveItemFromListByIndex ItemIndex: List_SubflowNames.Count - 1 List: List_SubflowNames\r\nEND FUNCTION\r\nFUNCTION ExecuteMainFlow GLOBAL\r\n    SET ErrorMessage TO ''\r\n    Text.ToNumber Text: $'''\\'\\''''\r\n    ON ERROR\r\n        CALL GetSubflowName\r\n    END\r\n    SET Log_Message TO $'''INFO;;;Start'''\r\n    CALL Logger\r\n    BLOCK \r\nON BLOCK ERROR all\r\n    SET Log_Message TO $'''TRACE'''\r\n    CALL Logger\r\nEND\r\n        CALL PrepareSystem\r\n        IF IsNotEmpty(ErrorMessage) THEN\r\n            GOTO 'Exit'\r\n        END\r\n        /# Add custom subflow calls here.\r\nCall GenerateWorkItems instead of ProcessWorkItems if this flow is supposed to be the work item generator and not the processor.#/\r\n        CALL ProcessWorkItems\r\n        IF IsNotEmpty(ErrorMessage) THEN\r\n            GOTO 'Exit'\r\n        END\r\n        CALL PrepareSystem\r\n        IF IsNotEmpty(ErrorMessage) THEN\r\n            GOTO 'Exit'\r\n        END\r\n    END\r\n    LABEL 'Exit'\r\n    SET Log_Message TO $'''INFO;;;End'''\r\n    CALL Logger\r\n    Variables.RemoveItemFromList.RemoveItemFromListByIndex ItemIndex: List_SubflowNames.Count - 1 List: List_SubflowNames\r\nEND FUNCTION\r\nFUNCTION PrepareSystem GLOBAL\r\n    /# Description:\r\n1. Closing any applications used by this flow.\r\n2. Clearing any temporary files that may interfere with the flow.\r\n3. Must be run in the beginning of the main flow (after Config). Also recommended to run at the end for cleanup purposes.#/\r\n    SET ErrorMessage TO ''\r\n    Text.ToNumber Text: $'''\\'\\''''\r\n    ON ERROR\r\n        CALL GetSubflowName\r\n    END\r\n    SET Log_Message TO $'''INFO;;;Start'''\r\n    CALL Logger\r\n    BLOCK \r\nON BLOCK ERROR all\r\n    SET Log_Message TO $'''TRACE'''\r\n    CALL Logger\r\nEND\r\n        CALL CloseBrowser\r\n        IF IsNotEmpty(ErrorMessage) THEN\r\n            GOTO 'Exit'\r\n        END\r\n        CALL CloseExcel\r\n        IF IsNotEmpty(ErrorMessage) THEN\r\n            GOTO 'Exit'\r\n        END\r\n        /# Add additional subflow calls as necessary. \r\nRemove CloseBrowser and/or CloseExcel if irrelevant.\r\n#/\r\n    END\r\n    LABEL 'Exit'\r\n    SET Log_Message TO $'''INFO;;;End'''\r\n    CALL Logger\r\n    Variables.RemoveItemFromList.RemoveItemFromListByIndex ItemIndex: List_SubflowNames.Count - 1 List: List_SubflowNames\r\nEND FUNCTION\r\nFUNCTION CloseBrowser GLOBAL\r\n    SET ErrorMessage TO ''\r\n    Text.ToNumber Text: $'''\\'\\''''\r\n    ON ERROR\r\n        CALL GetSubflowName\r\n    END\r\n    SET Log_Message TO $'''INFO;;;Start'''\r\n    CALL Logger\r\n    BLOCK \r\nON BLOCK ERROR all\r\n    SET Log_Message TO $'''TRACE'''\r\n    CALL Logger\r\nEND\r\n        /# The browser instance is a text value if is not instantiated and it does not have a .Handle property.\r\nAttempting to close with the happy path first.#/\r\n        IF IsNotEmpty(BrowserToClose) THEN\r\n            IF (BrowserToClose.Handle) &lt;&gt; (-1) THEN\r\n                WebAutomation.CloseWebBrowser BrowserInstance: BrowserToClose\r\n                ON ERROR REPEAT 3 TIMES WAIT 3\r\n                ON ERROR\r\n\r\n                END\r\n                IF BrowserToClose.IsAlive = False THEN\r\n                    GOTO 'Exit'\r\n                END\r\n            END\r\n        END\r\n        /# Will close all browsers and all instances.\r\nProvide a browser name and URL (as variables) to close a specific browser and/or tab.#/\r\n        @@flowname: 'PADFramework: BrowserCloser'\r\nExternal.RunFlow FlowId: 'a08238ca-5ec4-422d-8eaf-1766d05ec8fe' @Input_Browser: $'''''' @Input_URL: $'''''' @Output_Message=&gt; Output_Message @Output_Status=&gt; Output_Status\r\n        IF Output_Status &lt;&gt; 200 THEN\r\n            SET ErrorMessage TO Output_Message\r\n            GOTO 'Exit'\r\n        END\r\n        Variables.IncreaseVariable Value: BrowserRestartCount IncrementValue: 1\r\n        IF BrowserRestartCount &gt;= Config_MaxErrorCountObject['Web'] THEN\r\n            SET Log_Message TO $'''FATAL;;;The browser has been restarted %BrowserRestartCount% time(s). Assuming it has fallen into an infinite loop and stopping the flow.'''\r\n            CALL Logger\r\n            CALL ThrowFatalError\r\n        END\r\n    END\r\n    LABEL 'Exit'\r\n    SET Log_Message TO $'''INFO;;;End'''\r\n    CALL Logger\r\n    Variables.RemoveItemFromList.RemoveItemFromListByIndex ItemIndex: List_SubflowNames.Count - 1 List: List_SubflowNames\r\nEND FUNCTION\r\nFUNCTION ThrowFatalError GLOBAL\r\n    Text.ToNumber Text: $'''\\'\\''''\r\n    ON ERROR\r\n        CALL GetSubflowName\r\n    END\r\n    SET Log_Message TO $'''FATAL;;;A fatal error has occurred. Stopping the flow \\\"%FlowName%\\\"'''\r\n    CALL Logger\r\n    Variables.RemoveItemFromList.RemoveItemFromListByIndex ItemIndex: List_SubflowNames.Count - 1 List: List_SubflowNames\r\n    # These variables need to be reset, as there is a circular call between ThrowFatalError and any of the Close* subflows.\r\n    SET ErrorCount TO 0\r\n    SET ExcelRestartCount TO 0\r\n    SET BrowserRestartCount TO 0\r\n    CALL PrepareSystem\r\n    CALL SendErrorMessages\r\n    CALL StopFlow\r\nEND FUNCTION\r\nFUNCTION CloseExcel GLOBAL\r\n    SET ErrorMessage TO ''\r\n    Text.ToNumber Text: $'''\\'\\''''\r\n    ON ERROR\r\n        CALL GetSubflowName\r\n    END\r\n    SET Log_Message TO $'''INFO;;;Start'''\r\n    CALL Logger\r\n    BLOCK \r\nON BLOCK ERROR all\r\n    SET Log_Message TO $'''TRACE'''\r\n    CALL Logger\r\nEND\r\n        # Attempting to close with the happy path first before calling ExcelCloser.\r\n        IF IsNotEmpty(ExcelToClose) THEN\r\n            IF ExcelToClose.Handle &lt;&gt; 0 THEN\r\n                BLOCK \r\nON BLOCK ERROR all\r\n\r\nEND\r\n                    Excel.CloseExcel.Close Instance: ExcelToClose\r\n                    WAIT (System.WaitForProcess.ProcessToStop ProcessName: $'''EXCEL''') FOR 10 \r\n                    ON ERROR TimeoutError\r\n\r\n                    END\r\n                    IF (System.IfProcess.ProcessIsNotRunning ProcessName: $'''EXCEL''') THEN\r\n                    ON ERROR\r\n\r\n                    END\r\n                        GOTO 'Exit'\r\n                    END\r\n                END\r\n            END\r\n        END\r\n        /# Will close all Excel instances by default.\r\nProvide a file path as an input parameter to close a specific file.#/\r\n        @@flowname: 'PADFramework: ExcelCloser'\r\nExternal.RunFlow FlowId: 'a261fa2e-fce6-49c8-909a-a94012906030' @Input_FilePath: $'''''' @Output_Message=&gt; Output_Message @Output_Status=&gt; Output_Status\r\n        IF Output_Status &lt;&gt; 200 THEN\r\n            SET ErrorMessage TO Output_Message\r\n            GOTO 'Exit'\r\n        END\r\n        Variables.IncreaseVariable Value: ExcelRestartCount IncrementValue: 1\r\n        IF ExcelRestartCount &gt;= Config_MaxErrorCountObject['Excel'] THEN\r\n            SET Log_Message TO $'''FATAL;;;Excel has been restarted %ExcelRestartCount% time(s). Assuming it has fallen into an infinite loop and stopping the flow.'''\r\n            CALL Logger\r\n            CALL ThrowFatalError\r\n        END\r\n    END\r\n    LABEL 'Exit'\r\n    SET Log_Message TO $'''INFO;;;End'''\r\n    CALL Logger\r\n    Variables.RemoveItemFromList.RemoveItemFromListByIndex ItemIndex: List_SubflowNames.Count - 1 List: List_SubflowNames\r\nEND FUNCTION\r\nFUNCTION ExecuteExcelFlow GLOBAL\r\n    SET ErrorMessage TO ''\r\n    Text.ToNumber Text: $'''\\'\\''''\r\n    ON ERROR\r\n        CALL GetSubflowName\r\n    END\r\n    SET Log_Message TO $'''INFO;;;Start'''\r\n    CALL Logger\r\n    BLOCK \r\nON BLOCK ERROR all\r\n    SET Log_Message TO $'''TRACE'''\r\n    CALL Logger\r\nEND\r\n        SET ExcelDocument TO Config_FlowObject['ExcelDocument']\r\n        /# These retries will apply to each work item retry (3 Excel retries times 3 work item retries by default).\r\nIf you want to do less attempts, reduce the max error count values in config or remove this loop.#/\r\n        LOOP ErrorCount FROM 0 TO Config_MaxErrorCountObject['Excel'] STEP 1\r\n            CALL CloseExcel\r\n            IF IsNotEmpty(ErrorMessage) THEN\r\n                GOTO 'Exit'\r\n            END\r\n            IF (File.IfFile.DoesNotExist File: ExcelDocument) THEN\r\n                SET ErrorMessage TO $'''File \\\"%ExcelDocument%\\\" does not exist. '''\r\n                GOTO 'Exit'\r\n            END\r\n            Excel.LaunchExcel.LaunchAndOpen Path: ExcelDocument Visible: False ReadOnly: False LoadAddInsAndMacros: False Instance=&gt; ExcelMain\r\n            # Replace this comment custom subflow calls.\r\n            IF IsNotEmpty(ErrorMessage) THEN\r\n                SET Log_Message TO $'''ERROR;;;Failed to process Excel due to %ErrorMessage%. Retrying'''\r\n                CALL Logger\r\n                NEXT LOOP\r\n            END\r\n            EXIT LOOP\r\n        END\r\n        SET ExcelToClose TO ExcelMain\r\n        CALL CloseExcel\r\n        IF IsNotEmpty(ErrorMessage) THEN\r\n            SET Log_Message TO $'''WARN;;;%ErrorMessage%. Ignoring error and continuing'''\r\n            CALL Logger\r\n            SET ErrorMessage TO ''\r\n        END\r\n        IF (ErrorCount) &gt;= (Config_MaxErrorCountObject['Excel']) THEN\r\n            SET ErrorMessage TO $'''Excel automation failed after retrying for %Config_MaxErrorCountObject['Excel']% times.'''\r\n        END\r\n    END\r\n    LABEL 'Exit'\r\n    SET Log_Message TO $'''INFO;;;End'''\r\n    CALL Logger\r\n    Variables.RemoveItemFromList.RemoveItemFromListByIndex ItemIndex: List_SubflowNames.Count - 1 List: List_SubflowNames\r\nEND FUNCTION\r\nFUNCTION ProcessWorkItems GLOBAL\r\n    SET ErrorMessage TO ''\r\n    Text.ToNumber Text: $'''\\'\\''''\r\n    ON ERROR\r\n        CALL GetSubflowName\r\n    END\r\n    SET Log_Message TO $'''INFO;;;Start'''\r\n    CALL Logger\r\n    BLOCK \r\nON BLOCK ERROR all\r\n    SET Log_Message TO $'''TRACE'''\r\n    CALL Logger\r\nEND\r\n        @@'InputSummaryValue:WORKQUEUE': 'WorkItem'\r\nLOOP WHILE (WorkQueues.ProcessWorkQueueItem WorkQueue: $'''4b22c5ab-fce5-ee11-904c-0022487f2c0b''' WorkQueueItem=&gt; WorkQueueItem)\r\n            CALL ResetVariables\r\n            CALL GetWorkItem\r\n            IF IsNotEmpty(ErrorMessage) THEN\r\n                SET WorkItem_Status TO $'''Fail'''\r\n                SET WorkItem_Message TO $'''Failed to get the contents of work item with number %WorkItem_Number% and Id %WorkItem_Id% due to: %ErrorMessage%.'''\r\n                SET Log_Message TO $'''ERROR;;;%WorkItem_Message%'''\r\n                CALL Logger\r\n                CALL CompleteWorkItem\r\n                IF IsNotEmpty(ErrorMessage) THEN\r\n                    GOTO 'Exit'\r\n                END\r\n                NEXT LOOP\r\n            END\r\n            LOOP WorkItem_ErrorCount FROM 1 TO Config_MaxErrorCountObject['WorkItem'] STEP 1\r\n                CALL ProcessWorkItem\r\n                IF IsNotEmpty(ErrorMessage) THEN\r\n                    SET WorkItem_Status TO $'''Fail'''\r\n                    SET WorkItem_Message TO $'''Failed to process work item with number %WorkItem_Number% and Id %WorkItem_Id% due to: %ErrorMessage%. Retrying.'''\r\n                    SET Log_Message TO $'''ERROR;;;%WorkItem_Message%'''\r\n                    CALL Logger\r\n                    CALL CleanupOnError\r\n                    IF IsNotEmpty(ErrorMessage) THEN\r\n                        SET Log_Message TO $'''ERROR;;;Failed to clean up for work item %WorkItem_Number% and Id %WorkItem_Id% due to: %ErrorMessage%. Ignoring error'''\r\n                        CALL Logger\r\n                        SET ErrorMessage TO $'''%''%'''\r\n                    END\r\n                    NEXT LOOP\r\n                END\r\n                EXIT LOOP\r\n            END\r\n            IF (WorkItem_Status = 'Fail' AND WorkItem_ErrorCount &gt;= Config_MaxErrorCountObject['WorkItem']) = True THEN\r\n                SET WorkItem_Message TO $'''Failed to process work item with number %WorkItem_Number% and Id %WorkItem_Id% after %WorkItem_ErrorCount% attempt(s). '''\r\n                SET Log_Message TO $'''ERROR;;;%WorkItem_Message%'''\r\n                CALL Logger\r\n            END\r\n            SET Log_Message TO $'''DEBUG;;;Work item %WorkItem_Number%/%WorkItem_Id% status=(WorkItem_Status=%WorkItem_Status%;WorkItem_Message=%WorkItem_Message%)'''\r\n            CALL Logger\r\n            CALL CompleteWorkItem\r\n            IF IsNotEmpty(ErrorMessage) THEN\r\n                GOTO 'Exit'\r\n            END\r\n        END\r\n    END\r\n    LABEL 'Exit'\r\n    SET Log_Message TO $'''INFO;;;End'''\r\n    CALL Logger\r\n    Variables.RemoveItemFromList.RemoveItemFromListByIndex ItemIndex: List_SubflowNames.Count - 1 List: List_SubflowNames\r\nEND FUNCTION\r\nFUNCTION ResetVariables GLOBAL\r\n    # Reset WorkItem variables\r\n    SET WorkItem_Status TO $'''%''%'''\r\n    SET WorkItem_Message TO $'''%''%'''\r\n    SET WorkItem_DataContent TO $'''%''%'''\r\n    SET WorkItem_Id TO ''\r\n    SET WorkItem_Number TO ''\r\n    SET WorkItem_DataSource TO ''\r\nEND FUNCTION\r\nFUNCTION ProcessWorkItem GLOBAL\r\n    SET ErrorMessage TO ''\r\n    Text.ToNumber Text: $'''\\'\\''''\r\n    ON ERROR\r\n        CALL GetSubflowName\r\n    END\r\n    SET Log_Message TO $'''INFO;;;Start'''\r\n    CALL Logger\r\n    BLOCK \r\nON BLOCK ERROR all\r\n    SET Log_Message TO $'''TRACE'''\r\n    CALL Logger\r\nEND\r\n        # Replace this comment with custom subflows\r\n        IF IsNotEmpty(ErrorMessage) THEN\r\n            GOTO 'Exit'\r\n        END\r\n        SET WorkItem_Status TO $'''Success'''\r\n        SET WorkItem_Message TO $'''Successfully processed work item with number %WorkItem_Number% and Id %WorkItem_Id%.'''\r\n    END\r\n    LABEL 'Exit'\r\n    SET Log_Message TO $'''INFO;;;End'''\r\n    CALL Logger\r\n    Variables.RemoveItemFromList.RemoveItemFromListByIndex ItemIndex: List_SubflowNames.Count - 1 List: List_SubflowNames\r\nEND FUNCTION\r\nFUNCTION CleanupOnError GLOBAL\r\n    SET ErrorMessage TO ''\r\n    Text.ToNumber Text: $'''\\'\\''''\r\n    ON ERROR\r\n        CALL GetSubflowName\r\n    END\r\n    SET Log_Message TO $'''INFO;;;Start'''\r\n    CALL Logger\r\n    BLOCK \r\nON BLOCK ERROR all\r\n    SET Log_Message TO $'''TRACE'''\r\n    CALL Logger\r\nEND\r\n        # If needed, call `TakeScreenshot` subflow to take a screenshot before calling any `Close*` subflows (except CloseExcel).\r\n        WorkQueues.UpdateProcessingNotes.WithProcessingNotes WorkQueueItem: WorkQueueItem ProcessingNotes: $'''Status: %WorkItem_Status%; Message: %WorkItem_Message%'''\r\n        CALL PrepareSystem\r\n        IF IsNotEmpty(ErrorMessage) THEN\r\n            GOTO 'Exit'\r\n        END\r\n    END\r\n    LABEL 'Exit'\r\n    SET Log_Message TO $'''INFO;;;End'''\r\n    CALL Logger\r\n    Variables.RemoveItemFromList.RemoveItemFromListByIndex ItemIndex: List_SubflowNames.Count - 1 List: List_SubflowNames\r\nEND FUNCTION\r\nFUNCTION GetWorkItem GLOBAL\r\n    SET ErrorMessage TO ''\r\n    Text.ToNumber Text: $'''\\'\\''''\r\n    ON ERROR\r\n        CALL GetSubflowName\r\n    END\r\n    SET Log_Message TO $'''INFO;;;Start'''\r\n    CALL Logger\r\n    BLOCK \r\nON BLOCK ERROR all\r\n    SET Log_Message TO $'''TRACE'''\r\n    CALL Logger\r\nEND\r\n        SET WorkItem_Id TO WorkQueueItem['Id']\r\n        SET WorkItem_Number TO WorkQueueItem['Name']\r\n        Variables.ConvertJsonToCustomObject Json: WorkQueueItem['Value'] CustomObject=&gt; WorkItem_DataContent\r\n        SET WorkItem_DataSource TO WorkItem_DataContent['DataSource']\r\n    END\r\n    LABEL 'Exit'\r\n    SET Log_Message TO $'''INFO;;;End'''\r\n    CALL Logger\r\n    Variables.RemoveItemFromList.RemoveItemFromListByIndex ItemIndex: List_SubflowNames.Count - 1 List: List_SubflowNames\r\nEND FUNCTION\r\nFUNCTION CompleteWorkItem GLOBAL\r\n    SET ErrorMessage TO ''\r\n    Text.ToNumber Text: $'''\\'\\''''\r\n    ON ERROR\r\n        CALL GetSubflowName\r\n    END\r\n    SET Log_Message TO $'''INFO;;;Start'''\r\n    CALL Logger\r\n    BLOCK \r\nON BLOCK ERROR all\r\n    SET Log_Message TO $'''TRACE'''\r\n    CALL Logger\r\nEND\r\n        SWITCH WorkItem_Status\r\n            CASE = $'''Success'''\r\n                WorkQueues.UpdateWorkQueueItem.UpdateWithProcessingNotes WorkQueueItem: WorkQueueItem Status: WorkQueues.WorkQueueItemStatus.Processed ProcessingResult: WorkItem_Message\r\n            CASE = $'''Skip'''\r\n                WorkQueues.UpdateWorkQueueItem.UpdateWithProcessingNotes WorkQueueItem: WorkQueueItem Status: WorkQueues.WorkQueueItemStatus.BusinessException ProcessingResult: WorkItem_Message\r\n            CASE = $'''Fail'''\r\n                WorkQueues.UpdateWorkQueueItem.UpdateWithProcessingNotes WorkQueueItem: WorkQueueItem Status: WorkQueues.WorkQueueItemStatus.ITException ProcessingResult: WorkItem_Message\r\n            DEFAULT\r\n                WorkQueues.UpdateWorkQueueItem.UpdateWithProcessingNotes WorkQueueItem: WorkQueueItem Status: WorkQueues.WorkQueueItemStatus.GenericException ProcessingResult: WorkItem_Message\r\n        END\r\n    END\r\n    LABEL 'Exit'\r\n    SET Log_Message TO $'''INFO;;;End'''\r\n    CALL Logger\r\n    Variables.RemoveItemFromList.RemoveItemFromListByIndex ItemIndex: List_SubflowNames.Count - 1 List: List_SubflowNames\r\nEND FUNCTION\r\nFUNCTION ExecuteWebFlow GLOBAL\r\n    SET ErrorMessage TO ''\r\n    Text.ToNumber Text: $'''\\'\\''''\r\n    ON ERROR\r\n        CALL GetSubflowName\r\n    END\r\n    SET Log_Message TO $'''INFO;;;Start'''\r\n    CALL Logger\r\n    BLOCK \r\nON BLOCK ERROR all\r\n    SET Log_Message TO $'''TRACE'''\r\n    CALL Logger\r\nEND\r\n        /# These retries will apply to each work item retry (3 web retries times 3 work item retries by default).\r\nIf you want to do less attempts, reduce the max error count values in config or remove this loop.#/\r\n        LOOP ErrorCount FROM 1 TO Config_MaxErrorCountObject['Web'] STEP 1\r\n            IF IsNotEmpty(ErrorMessage) THEN\r\n                SET Log_Message TO $'''ERROR;;;%ErrorMessage%'''\r\n                CALL Logger\r\n                SET ErrorMessage TO ''\r\n                CALL TakeScreenshot\r\n                IF IsNotEmpty(ErrorMessage) THEN\r\n                    SET Log_Message TO $'''ERROR;;;%ErrorMessage%'''\r\n                    CALL Logger\r\n                    SET ErrorMessage TO ''\r\n                END\r\n            END\r\n            CALL PrepareWebPage\r\n            IF IsNotEmpty(ErrorMessage) THEN\r\n                NEXT LOOP\r\n            END\r\n            # Replace this comment with custom subflows\r\n            EXIT LOOP\r\n        END\r\n        IF (ErrorCount) &gt;= (Config_MaxErrorCountObject['Web']) THEN\r\n            SET WorkItem_Status TO $'''Fail'''\r\n            SET WorkItem_Message TO $'''Web Automation failed after %ErrorCount% attempts.'''\r\n        END\r\n    END\r\n    LABEL 'Exit'\r\n    SET Log_Message TO $'''INFO;;;End'''\r\n    CALL Logger\r\n    Variables.RemoveItemFromList.RemoveItemFromListByIndex ItemIndex: List_SubflowNames.Count - 1 List: List_SubflowNames\r\nEND FUNCTION\r\nFUNCTION PrepareWebPage GLOBAL\r\n    SET ErrorMessage TO ''\r\n    Text.ToNumber Text: $'''\\'\\''''\r\n    ON ERROR\r\n        CALL GetSubflowName\r\n    END\r\n    SET Log_Message TO $'''INFO;;;Start'''\r\n    CALL Logger\r\n    BLOCK \r\nON BLOCK ERROR all\r\n    SET Log_Message TO $'''TRACE'''\r\n    CALL Logger\r\nEND\r\n        /# Checking for whether a browser instance is alive to not clean up on each retry and work item.\r\nAdditional checks for specific page title or URL or even a window can be added to check if the flow can recover without restarting the browser.#/\r\n        IF IsNotEmpty(BrowserMain) THEN\r\n            IF (BrowserMain.Handle &lt;&gt; -1 AND BrowserMain.IsAlive = True) = True THEN\r\n                SET Log_Message TO $'''INFO;;;Browser is open and ready.'''\r\n                CALL Logger\r\n                GOTO 'Exit'\r\n            END\r\n        END\r\n        CALL CloseBrowser\r\n        IF IsNotEmpty(ErrorMessage) THEN\r\n            GOTO 'Exit'\r\n        END\r\n        CALL LaunchBrowser\r\n        IF IsNotEmpty(ErrorMessage) THEN\r\n            GOTO 'Exit'\r\n        END\r\n        # Login subflow to be used only when relevant to login to the web page.\r\n        CALL LoginToWebPage\r\n        IF IsNotEmpty(ErrorMessage) THEN\r\n            GOTO 'Exit'\r\n        END\r\n    END\r\n    LABEL 'Exit'\r\n    SET Log_Message TO $'''INFO;;;End'''\r\n    CALL Logger\r\n    Variables.RemoveItemFromList.RemoveItemFromListByIndex ItemIndex: List_SubflowNames.Count - 1 List: List_SubflowNames\r\nEND FUNCTION\r\nFUNCTION LaunchBrowser GLOBAL\r\n    SET ErrorMessage TO ''\r\n    Text.ToNumber Text: $'''\\'\\''''\r\n    ON ERROR\r\n        CALL GetSubflowName\r\n    END\r\n    SET Log_Message TO $'''INFO;;;Start'''\r\n    CALL Logger\r\n    BLOCK \r\nON BLOCK ERROR all\r\n    SET Log_Message TO $'''TRACE'''\r\n    CALL Logger\r\nEND\r\n        SET URL TO Config_URLObject['Main']\r\n        /# Will launch Edge in normal mode by default.\r\nAdjust input parameters as necessary.#/\r\n        SET Browser TO $'''Edge'''\r\n        @@flowname: 'PADFramework: BrowserLauncher'\r\nExternal.RunFlow FlowId: 'aa0a967a-5f8c-4891-b6c1-87536e7f3d0b' @Input_Browser: Browser @Input_URL: URL @Input_IncognitoMode: False @Output_Status=&gt; Output_Status @Output_Message=&gt; Output_Message\r\n        IF Output_Status &lt;&gt; 200 THEN\r\n            SET ErrorMessage TO Output_Message\r\n        END\r\n        SWITCH Browser\r\n            CASE = $'''Chrome'''\r\n                WebAutomation.LaunchChrome.AttachToChromeByUrl TabUrl: URL AttachTimeout: 5 BrowserInstance=&gt; BrowserMain\r\n            CASE = $'''Edge'''\r\n                WebAutomation.LaunchEdge.AttachToEdgeByUrl TabUrl: URL AttachTimeout: 5 BrowserInstance=&gt; BrowserMain\r\n            CASE = $'''Firefox'''\r\n                WebAutomation.LaunchFirefox.AttachToFirefoxByUrl TabUrl: URL AttachTimeout: 5 BrowserInstance=&gt; BrowserMain\r\n        END\r\n        SET BrowserToClose TO BrowserMain\r\n    END\r\n    LABEL 'Exit'\r\n    SET Log_Message TO $'''INFO;;;End'''\r\n    CALL Logger\r\n    Variables.RemoveItemFromList.RemoveItemFromListByIndex ItemIndex: List_SubflowNames.Count - 1 List: List_SubflowNames\r\nEND FUNCTION\r\nFUNCTION LoginToWebPage GLOBAL\r\n    SET ErrorMessage TO ''\r\n    Text.ToNumber Text: $'''\\'\\''''\r\n    ON ERROR\r\n        CALL GetSubflowName\r\n    END\r\n    SET Log_Message TO $'''INFO;;;Start'''\r\n    CALL Logger\r\n    BLOCK \r\nON BLOCK ERROR all\r\n    SET Log_Message TO $'''TRACE'''\r\n    CALL Logger\r\nEND\r\n        /# Populate credentials.\r\nPress button to login.\r\nWait for page to load.#/\r\n        # Check if Credentials are correct. If they are not =&gt; call ThrowFatalError\r\n    END\r\n    LABEL 'Exit'\r\n    SET Log_Message TO $'''INFO;;;End'''\r\n    CALL Logger\r\n    Variables.RemoveItemFromList.RemoveItemFromListByIndex ItemIndex: List_SubflowNames.Count - 1 List: List_SubflowNames\r\nEND FUNCTION\r\nFUNCTION TakeScreenshot GLOBAL\r\n    SET ErrorMessage TO ''\r\n    Text.ToNumber Text: $'''\\'\\''''\r\n    ON ERROR\r\n        CALL GetSubflowName\r\n    END\r\n    SET Log_Message TO $'''INFO;;;Start'''\r\n    CALL Logger\r\n    BLOCK \r\nON BLOCK ERROR all\r\n    SET Log_Message TO $'''TRACE'''\r\n    CALL Logger\r\nEND\r\n        DateTime.GetCurrentDateTime.Local DateTimeFormat: DateTime.DateTimeFormat.DateAndTime CurrentDateTime=&gt; CurrentDateTime\r\n        Text.ConvertDateTimeToText.FromCustomDateTime DateTime: CurrentDateTime CustomFormat: $'''yyyy-MM-dd HHmmss''' Result=&gt; Timestamp\r\n        SET ScreenshotFileName TO $'''%WorkItem_Id% %WorkItem_Number% %Timestamp%.png'''\r\n        @@flowname: 'PADFramework: ScreenshotMaker'\r\nExternal.RunFlow FlowId: '8bba4a93-fbb7-478c-b098-a5ca91273227' @Input_ScreenshotsDirectory: Config_ScreenshotsPath @Input_ScreenshotFileName: ScreenshotFileName @Output_Message=&gt; Output_Message @Output_Status=&gt; Output_Status\r\n        IF Output_Status &lt;&gt; 200 THEN\r\n            SET ErrorMessage TO Output_Message\r\n            GOTO 'Exit'\r\n        END\r\n        SET Log_Message TO $'''DEBUG;;;Successfully took screenshot `%ScreenshotFileName%`'''\r\n        CALL Logger\r\n    END\r\n    LABEL 'Exit'\r\n    SET Log_Message TO $'''INFO;;;End'''\r\n    CALL Logger\r\n    Variables.RemoveItemFromList.RemoveItemFromListByIndex ItemIndex: List_SubflowNames.Count - 1 List: List_SubflowNames\r\nEND FUNCTION\r\nFUNCTION Template GLOBAL\r\n    SET ErrorMessage TO ''\r\n    Text.ToNumber Text: $'''\\'\\''''\r\n    ON ERROR\r\n        CALL GetSubflowName\r\n    END\r\n    SET Log_Message TO $'''INFO;;;Start'''\r\n    CALL Logger\r\n    BLOCK \r\nON BLOCK ERROR all\r\n    SET Log_Message TO $'''TRACE'''\r\n    CALL Logger\r\nEND\r\n    END\r\n    LABEL 'Exit'\r\n    SET Log_Message TO $'''INFO;;;End'''\r\n    CALL Logger\r\n    Variables.RemoveItemFromList.RemoveItemFromListByIndex ItemIndex: List_SubflowNames.Count - 1 List: List_SubflowNames\r\nEND FUNCTION\r\nFUNCTION GetFlowSettings GLOBAL\r\n    /# Gets settings from Config for a specific Flow.\r\nParameters that are available globally in the config (MaxErrorCount, Logger, Environment, Recipient, etc.) are not mandatory, but can be set per flow, too.\r\nCustom parameters specific to a certain flow should be set in the flow object and not the global Config.#/\r\n    SET ErrorMessage TO ''\r\n    Text.ToNumber Text: $'''\\'\\''''\r\n    ON ERROR\r\n        CALL GetSubflowName\r\n    END\r\n    SET Log_Message TO $'''INFO;;;Start'''\r\n    CALL Logger\r\n    BLOCK \r\nON BLOCK ERROR all\r\n    SET Log_Message TO $'''TRACE'''\r\n    CALL Logger\r\nEND\r\n        SET Config_FlowObject TO Config_Object['Flows'][FlowName]\r\n        IF Contains(Config_FlowObject, $'''MaxErrorCount''', False) THEN\r\n            Variables.ConvertJsonToCustomObject Json: Config_FlowObject['MaxErrorCount'] CustomObject=&gt; Config_MaxErrorCountObject\r\n        END\r\n        IF Contains(Config_FlowObject, $'''Logger''', False) THEN\r\n            Variables.ConvertJsonToCustomObject Json: Config_FlowObject['Logger'] CustomObject=&gt; Config_LoggerObject\r\n            IF NotContains(Config_LoggerObject, $'''LogLevels''', False) THEN\r\n                SET ErrorMessage TO $'''Modules =&gt; %FlowName% =&gt; Logger =&gt; LogLevels'''\r\n                GOTO 'Exit'\r\n            ELSE IF NotContains(Config_LoggerObject, $'''ErrorLogLevels''', False) THEN\r\n                SET ErrorMessage TO $'''Modules =&gt; %FlowName% =&gt; Logger =&gt; ErrorLogLevels'''\r\n                GOTO 'Exit'\r\n            END\r\n            SET Log_Message TO $'''INFO;;;Using logger settings from the flow environment'''\r\n            CALL Logger\r\n        END\r\n        IF Contains(Config_FlowObject, $'''Environment''', False) THEN\r\n            SET Config_Environment TO Config_FlowObject['Environment']\r\n        END\r\n        IF Contains(Config_FlowObject, $'''Recipient''', False) THEN\r\n            Variables.ConvertJsonToCustomObject Json: Config_FlowObject['Recipient'] CustomObject=&gt; Config_RecipientObject\r\n        END\r\n        IF Contains(Config_FlowObject, $'''ScreenshotsPath''', False) THEN\r\n            SET Config_ScreenshotsPath TO Config_FlowObject['ScreenshotsPath']\r\n        END\r\n        IF Contains(Config_FlowObject, $'''URL''', False) THEN\r\n            Variables.ConvertJsonToCustomObject Json: Config_FlowObject['URL'] CustomObject=&gt; Config_URLObject\r\n        END\r\n        IF Contains(Config_FlowObject, $'''HTMLTemplatePath''', False) THEN\r\n            SET Config_HTMLTemplatePath TO Config_FlowObject['HTMLTemplatePath']\r\n        END\r\n        SET Log_Message TO $'''INFO;;;Environment is %Config_Environment%'''\r\n        CALL Logger\r\n    END\r\n    LABEL 'Exit'\r\n    SET Log_Message TO $'''INFO;;;End'''\r\n    CALL Logger\r\n    Variables.RemoveItemFromList.RemoveItemFromListByIndex ItemIndex: List_SubflowNames.Count - 1 List: List_SubflowNames\r\nEND FUNCTION\r\nFUNCTION GenerateWorkItems GLOBAL\r\n    SET ErrorMessage TO ''\r\n    Text.ToNumber Text: $'''\\'\\''''\r\n    ON ERROR\r\n        CALL GetSubflowName\r\n    END\r\n    SET Log_Message TO $'''INFO;;;Start'''\r\n    CALL Logger\r\n    BLOCK \r\nON BLOCK ERROR all\r\n    SET Log_Message TO $'''TRACE'''\r\n    CALL Logger\r\nEND\r\n        /# Replace this comment with custom subflows for retrieving the work item data from some data source.\r\nDelete the \"Create new data table\" action afterwards - it is only used to create a variable so that the loop has something to iterate through.#/\r\n        Variables.CreateNewDatatable InputTable: { } DataTable=&gt; DataTable_WorkItems\r\n        LOOP FOREACH DataRow_CurrentWorkItem IN DataTable_WorkItems\r\n            CALL SerializeWorkItem\r\n            IF IsNotEmpty(ErrorMessage) THEN\r\n                GOTO 'Exit'\r\n            END\r\n            CALL InsertWorkItem\r\n            IF IsNotEmpty(ErrorMessage) THEN\r\n                GOTO 'Exit'\r\n            END\r\n        END\r\n    END\r\n    LABEL 'Exit'\r\n    SET Log_Message TO $'''INFO;;;End'''\r\n    CALL Logger\r\n    Variables.RemoveItemFromList.RemoveItemFromListByIndex ItemIndex: List_SubflowNames.Count - 1 List: List_SubflowNames\r\nEND FUNCTION\r\nFUNCTION SerializeWorkItem GLOBAL\r\n    SET ErrorMessage TO ''\r\n    Text.ToNumber Text: $'''\\'\\''''\r\n    ON ERROR\r\n        CALL GetSubflowName\r\n    END\r\n    SET Log_Message TO $'''INFO;;;Start'''\r\n    CALL Logger\r\n    BLOCK \r\nON BLOCK ERROR all\r\n    SET Log_Message TO $'''TRACE'''\r\n    CALL Logger\r\nEND\r\n        SET WorkItem_DataContent TO {{ }}\r\n        /# Replace this comment with \"Set variable\" actions adding values from the %DataRow_CurrentWorkItem% variable to the custom object.\r\nAdd as many as needed.\r\nAlso set:\r\n- WorkItem_Number\r\n- WorkItem_DataSource#/\r\n        SET WorkItem_DataContent['DataSource'] TO WorkItem_DataSource\r\n        Variables.ConvertCustomObjectToJson CustomObject: WorkItem_DataContent Json=&gt; WorkItem_DataContent\r\n    END\r\n    LABEL 'Exit'\r\n    SET Log_Message TO $'''INFO;;;End'''\r\n    CALL Logger\r\n    Variables.RemoveItemFromList.RemoveItemFromListByIndex ItemIndex: List_SubflowNames.Count - 1 List: List_SubflowNames\r\nEND FUNCTION\r\nFUNCTION InsertWorkItem GLOBAL\r\n    SET ErrorMessage TO ''\r\n    Text.ToNumber Text: $'''\\'\\''''\r\n    ON ERROR\r\n        CALL GetSubflowName\r\n    END\r\n    SET Log_Message TO $'''INFO;;;Start'''\r\n    CALL Logger\r\n    BLOCK \r\nON BLOCK ERROR all\r\n    SET Log_Message TO $'''TRACE'''\r\n    CALL Logger\r\nEND\r\n        # Adjust priority, expiration and other parameters as necessary.\r\n        @@'InputSummaryValue:WORKQUEUE': 'WorkItem'\r\nWorkQueues.EnqueueWorkQueueItem.WithoutUniqueId WorkQueue: $'''4b22c5ab-fce5-ee11-904c-0022487f2c0b''' Status: WorkQueues.WorkQueueItemEnqueueStatus.Queued Priority: WorkQueues.WorkQueueItemPriority.Normal Name: WorkItem_Number Value: WorkItem_DataContent\r\n    END\r\n    LABEL 'Exit'\r\n    SET Log_Message TO $'''INFO;;;End'''\r\n    CALL Logger\r\n    Variables.RemoveItemFromList.RemoveItemFromListByIndex ItemIndex: List_SubflowNames.Count - 1 List: List_SubflowNames\r\nEND FUNCTION\r\nFUNCTION GetSubflowName GLOBAL\r\n    ERROR =&gt; MockError Reset: True\r\n    Text.ParseText.RegexParseForFirstOccurrence Text: MockError.Location TextToFind: $'''(?&lt;=Subflow:\\\\s).+(?=,\\\\sAction:)''' StartingPosition: 0 IgnoreCase: False Match=&gt; SubflowName\r\n    Variables.AddItemToList Item: SubflowName List: List_SubflowNames\r\nEND FUNCTION\r\n"</Definition>
      <SchemaVersion>2022.07</SchemaVersion>
      <DesktopFlowModules>[]</DesktopFlowModules>
      <PrimaryEntity>none</PrimaryEntity>
      <LocalizedNames>
        <LocalizedName languagecode="1033" description="PADFramework: FlowTemplate (WorkQueues)" />
      </LocalizedNames>
    </Workflow>
    <Workflow WorkflowId="{582a1baf-a30a-ef11-9f89-000d3a24f839}" Name="PADFramework: FlowTemplate">
      <JsonFileName>/Workflows/PADFrameworkFlowTemplate-582A1BAF-A30A-EF11-9F89-000D3A24F839.json</JsonFileName>
      <Type>1</Type>
      <Subprocess>0</Subprocess>
      <Category>6</Category>
      <Mode>0</Mode>
      <Scope>4</Scope>
      <OnDemand>0</OnDemand>
      <TriggerOnCreate>0</TriggerOnCreate>
      <TriggerOnDelete>0</TriggerOnDelete>
      <AsyncAutodelete>0</AsyncAutodelete>
      <SyncWorkflowLogOnFailure>0</SyncWorkflowLogOnFailure>
      <StateCode>1</StateCode>
      <StatusCode>2</StatusCode>
      <RunAs>1</RunAs>
      <IsTransacted>1</IsTransacted>
      <IntroducedVersion>1.0</IntroducedVersion>
      <IsCustomizable>1</IsCustomizable>
      <BusinessProcessType>0</BusinessProcessType>
      <UIFlowType>2</UIFlowType>
      <IsCustomProcessingStepAllowedForOtherPublishers>1</IsCustomProcessingStepAllowedForOtherPublishers>
      <Metadata>{"clientversion":"2.46.163.24194","isvalid":true,"$schema":"https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#","schemaVersion":"ROBIN_20211012","containsActiveConnections":false,"containsGptPredictActions":false,"containsActiveCopilotActions":false,"containsActiveWorkQueuesActions":false,"containsActiveLogMessageActions":false,"multipleRequestsState":0,"scriptType":0,"disableScreenshotCaptureOnError":false,"missingUiElementRepairType":null,"flowTimeout":null}</Metadata>
      <Inputs>{"schema":null}</Inputs>
      <Outputs>{"schema":{"properties":{"ErrorMessage":{"default":"","description":"","format":"password","title":"ErrorMessage","type":"string","value":null},"Output_IsSuccess":{"default":"","description":"","format":null,"title":"Output_IsSuccess","type":"boolean","value":null}},"type":"object"}}</Outputs>
      <Dependencies>{"childFlows":["2a80c691-72fd-4222-99f2-2a4ee54b2b71","c74ad727-5617-4d54-89a9-9d7b35187d34","a08238ca-5ec4-422d-8eaf-1766d05ec8fe","a261fa2e-fce6-49c8-909a-a94012906030","c515285c-5a5d-4379-b50b-96837d0796d2","ba8eaa10-fb57-4fef-9240-e2690d67b906","8bba4a93-fbb7-478c-b098-a5ca91273227","aa0a967a-5f8c-4891-b6c1-87536e7f3d0b"],"workQueues":[],"environmentVariables":[],"requiredBinaries":["34135fa6-5714-4794-9d4b-2554ebf0af0e","600ee223-5b16-4fee-92c2-35529f7de78c","d243ac57-504c-47ce-9282-9f827cf10e99"]}</Dependencies>
      <ConnectionReferences>[]</ConnectionReferences>
      <Definition>"@@ConnectionString: ''\r\n@@Type: 'Local'\r\n@@DesktopType: 'local'\r\n@@DisplayName: 'Local computer'\r\nIMPORT 'controlRepo.appmask' AS appmask\r\nIMPORT 'imageRepo.imgrepo' AS imgrepo\r\n@SENSITIVE: [ErrorMessage]\r\n@OUTPUT ErrorMessage : { 'Description': '', 'FriendlyName': 'ErrorMessage', 'Type': 'String' } \r\n@OUTPUT Output_IsSuccess : { 'Description': '', 'FriendlyName': 'Output_IsSuccess', 'Type': 'Bool' } \r\nCALL Init\r\nText.ToNumber Text: $'''\\'\\''''\r\nON ERROR\r\n    CALL GetSubflowName\r\nEND\r\nDateTime.GetCurrentDateTime.Local DateTimeFormat: DateTime.DateTimeFormat.DateAndTime CurrentDateTime=&gt; CurrentDateTime\r\nON ERROR\r\n    GOTO Fatal\r\nEND\r\nText.ConvertDateTimeToText.FromCustomDateTime DateTime: CurrentDateTime CustomFormat: $'''yyyy-MM-dd''' Result=&gt; DateStamp\r\nCALL Config\r\nIF IsNotEmpty(ErrorMessage) THEN\r\n    SET Log_Message TO $'''FATAL;;;%ErrorMessage%'''\r\n    CALL Logger\r\n    GOTO Fatal\r\nEND\r\nCALL GetFlowSettings\r\nIF IsNotEmpty(ErrorMessage) THEN\r\n    SET Log_Message TO $'''FATAL;;;%ErrorMessage%'''\r\n    CALL Logger\r\n    GOTO Fatal\r\nEND\r\nSET Log_Message TO $'''INFO;;;Start'''\r\nCALL Logger\r\nBLOCK \r\nON BLOCK ERROR all\r\n    SET Log_Message TO $'''TRACE'''\r\n    CALL Logger\r\nEND\r\n    SET Log_Message TO $'''INFO;;;Starting flow \\\"%FlowName%\\\"'''\r\n    CALL Logger\r\n    CALL ExecuteMainFlow\r\n    IF IsNotEmpty(ErrorMessage) THEN\r\n        SET Log_Message TO $'''ERROR;;;Failed to successfully run flow \\\"%FlowName%\\\". Last error: %ErrorMessage%. Flow stopped'''\r\n        CALL Logger\r\n        GOTO 'Exit'\r\n    END\r\n    SET Output_IsSuccess TO True\r\n    SET Log_Message TO $'''INFO;;;Finishing flow \\\"%FlowName%\\\"'''\r\n    CALL Logger\r\nEND\r\nLABEL 'Exit'\r\nIF (List_ErrorMessages.Count) &gt; (0) THEN\r\n    CALL SendErrorMessages\r\n    IF IsNotEmpty(ErrorMessage) THEN\r\n        CALL StopFlow\r\n    END\r\nEND\r\nSET Log_Message TO $'''INFO;;;End'''\r\nCALL Logger\r\nVariables.RemoveItemFromList.RemoveItemFromListByIndex ItemIndex: List_SubflowNames.Count - 1 List: List_SubflowNames\r\nEXIT Code: 0\r\nLABEL Fatal\r\nCALL StopFlow\r\nFUNCTION Init GLOBAL\r\n    **REGION Initializing variables\r\n    /# Initializing variables. Setting blank values and 0 on numeric variables is not absolutely necessary - it can be skipped. \r\nCreating empty lists is also not mandatory, as \"Add item to list\" works without the list being initialized.\r\nIt's added for some extra clarity and readability.#/\r\n    SET ErrorMessage TO ''\r\n    SET ErrorCount TO 0\r\n    SET ExcelRestartCount TO 0\r\n    SET BrowserRestartCount TO 0\r\n    SET Output_IsSuccess TO False\r\n    Variables.CreateNewList List=&gt; List_SubflowNames\r\n    Variables.CreateNewList List=&gt; List_ErrorMessages\r\n    Variables.CreateNewList List=&gt; List_Attachments\r\n    **ENDREGION\r\n    **REGION Flow variables - adjust as necessary\r\n    /# Flow and directory variables.\r\nProjectName should match the directory name for the project.\r\nFlowName and UserFriendlyProjectName are used for logging and notifications.#/\r\n    SET ProjectName TO $'''{ReplaceMe}'''\r\n    SET FlowName TO $'''{ReplaceMe}'''\r\n    SET UserFriendlyProjectName TO $'''{ReplaceMe}'''\r\n    # Directory can be adjusted if necessary as well. C:\\RPA is just a suggestion.\r\n    SET ProjectDirectory TO $'''C:\\\\RPA\\\\%ProjectName%'''\r\n    **ENDREGION\r\n    **REGION ConfigReader variables - adjust as necessary\r\n    /# Config_Type is used by ConfigReader. Should be set to one of the following:\r\n- JSON\r\n- Excel\r\n- Database\r\n- SharePoint List\r\n- Dataverse#/\r\n    SET Config_Type TO $'''JSON'''\r\n    /# Config_Address is used by ConfigReader. Should be blank for JSON files. Otherwise, should contain:\r\n- A connection string for getting Config values from a Database\r\n- A site address for for getting Config values from a SharePoint List\r\n- An environment URL for getting Config values from a Dataverse table\r\n- A file path for getting Config values from an Excel file#/\r\n    SET Config_Address TO $'''%''%'''\r\n    /# Config_Path is used by ConfigReader. Should contain:\r\n- File path for JSON files (set in the Config subflow)\r\n- Sheet name for Excel files\r\n- SQL stored procedure name for Databases\r\n- SharePoint list name for SharePoint\r\n- Table logical name for Dataverse#/\r\n    SET Config_Path TO $'''%''%'''\r\n    **ENDREGION\r\n    **REGION Logger variables - adjust as necessary\r\n    /# Log_Type is used by Logger. Should be set to one of the following:\r\n- Log File (plain text .log files)\r\n- CSV file\r\n- Database\r\n- SharePoint List#/\r\n    SET Log_Type TO $'''Log File'''\r\n    /# Log_Address is used by Logger. Should be blank for plain text or CSV files. Otherwise, should contain:\r\n- A Connection string for logging to Database\r\n- A Site address for logging to SharePoint List#/\r\n    SET Log_Address TO $'''%''%'''\r\n    /# Log_Path is used by Logger. Should contain:\r\n- File path for Plain text and CSV files (set in Config)\r\n- Database table name or stored procedure for Databases\r\n- SharePoint list name for SharePoint#/\r\n    SET Log_Path TO $'''%''%'''\r\n    **ENDREGION\r\n    **REGION Directories\r\n    /# These directories should be created as needed:\r\n- Logs for logging to files. Not needed for logging to SharePoint lists or databases\r\n- Flow for any files that may be temporarily stored by the flow, as well as screenshots, etc.\r\n- Config for external config files. Not needed when Configs are stored in databases.#/\r\n    SET LogsDirectory TO $'''%ProjectDirectory%\\\\Logs'''\r\n    SET FlowDirectory TO $'''%ProjectDirectory%\\\\Flow'''\r\n    SET ConfigDirectory TO $'''%ProjectDirectory%\\\\Config'''\r\n    **ENDREGION\r\nEND FUNCTION\r\nFUNCTION Config GLOBAL\r\n    SET ErrorMessage TO ''\r\n    BLOCK \r\nON BLOCK ERROR all\r\n    SET Log_Message TO $'''TRACE'''\r\n    CALL Logger\r\nEND\r\n        SET ConfigFile TO $'''%ConfigDirectory%\\\\Config.json'''\r\n        **REGION Base Logger\r\n        # Creating base logger with all log levels enabled so we can actually log errors/information from Config if it fails.\r\n        SET Config_LoggerObject TO {{ }}\r\n        SET Config_LoggerObject[$'''LogLevels'''] TO $'''TRACE,DEBUG,INFO,WARN,ERROR,FATAL'''\r\n        SET Config_LoggerObject['ErrorLogLevels'] TO $'''ERROR,TRACE,FATAL'''\r\n        **ENDREGION\r\n        **REGION Log file path\r\n        System.GetEnvironmentVariable.GetEnvironmentVariable Name: $'''COMPUTERNAME''' Value=&gt; ComputerName\r\n        SWITCH Log_Type\r\n            CASE = $'''Log File'''\r\n                SET Log_Path TO $'''%LogsDirectory%\\\\%DateStamp%_%FlowName%_%ComputerName%.log'''\r\n            CASE = $'''CSV File'''\r\n                SET Log_Path TO $'''%LogsDirectory%\\\\%DateStamp%_%FlowName%_%ComputerName%.csv'''\r\n        END\r\n        **ENDREGION\r\n        @@flowname: 'PADFramework: ConfigReader'\r\nExternal.RunFlow FlowId: 'c74ad727-5617-4d54-89a9-9d7b35187d34' @Input_ConfigType: Config_Type @Input_ConfigPath: Config_Path @Input_ConfigAddress: Config_Address @Input_ProjectName: ProjectName @Output_ConfigObject=&gt; Config_Object @Output_Message=&gt; Output_Message @Output_Status=&gt; Output_Status\r\n        IF Output_Status &lt;&gt; 200 THEN\r\n            SET ErrorMessage TO Output_Message\r\n            GOTO 'Exit'\r\n        END\r\n        # Conversion needed in case the objects are stored as JSON strings in configs (e.g. Dataverse, Database, SharePoint, Excel)\r\n        Variables.ConvertJsonToCustomObject Json: Config_Object['Recipient'] CustomObject=&gt; Config_RecipientObject\r\n        Variables.ConvertJsonToCustomObject Json: Config_Object['Logger'] CustomObject=&gt; Config_LoggerObject\r\n        Variables.ConvertJsonToCustomObject Json: Config_Object['MaxErrorCount'] CustomObject=&gt; Config_MaxErrorCountObject\r\n        IF Contains(Config_Object, $'''ScreenshotsPath''', False) THEN\r\n            SET Config_ScreenshotsPath TO Config_Object['ScreenshotsPath']\r\n        END\r\n        IF Contains(Config_Object, $'''URL''', False) THEN\r\n            Variables.ConvertJsonToCustomObject Json: Config_Object['URL'] CustomObject=&gt; Config_URLObject\r\n        END\r\n        IF Contains(Config_Object, $'''HTMLTemplatePath''', False) THEN\r\n            SET Config_HTMLTemplatePath TO Config_Object['HTMLTemplatePath']\r\n        END\r\n        /# Environment values:\r\n- PROD\r\n- TEST\r\n- DEV\r\n#/\r\n        SET Config_Environment TO Config_Object['Environment']\r\n    END\r\n    LABEL 'Exit'\r\nEND FUNCTION\r\nFUNCTION Logger GLOBAL\r\n    BLOCK \r\nON BLOCK ERROR all\r\n\r\nEND\r\n        # TRACE level used in \"On block error\" blocks only, indicating a system exception.\r\n        IF Log_Message = $'''TRACE''' THEN\r\n            ERROR =&gt; ErrorMessage\r\n            SET Log_Message TO $'''%Log_Message%;;;%ErrorMessage%'''\r\n        END\r\n        /# Adjust the parameters according to your logging needs.\r\nThe current settings will log to a plain text .log file.#/\r\n        @@flowname: 'PADFramework: Logger'\r\nExternal.RunFlow FlowId: '2a80c691-72fd-4222-99f2-2a4ee54b2b71' @Input_SubflowNamesList: List_SubflowNames @Input_LoggerObject: Config_LoggerObject @Input_LogPath: Log_Path @Input_LogMessage: Log_Message @Input_LogType: Log_Type @Input_ErrorMessageList: List_ErrorMessages @Input_FlowName: FlowName @Input_ProjectName: ProjectName @Input_LogAddress: Log_Address @Output_ErrorMessageList=&gt; List_ErrorMessages @Output_ErrorMessage=&gt; Output_Message\r\n        IF IsNotEmpty(Output_Message) THEN\r\n            # Not calling ThrowFatalError here to prevent logical recursion.\r\n            SET ErrorMessage TO Output_Message\r\n            SET Output_IsSuccess TO False\r\n            EXIT Code: 0\r\n        END\r\n        SET Log_Message TO ''\r\n        EXIT FUNCTION\r\n    END\r\n    # Retrieving the error captured by the block\r\n    ERROR =&gt; ErrorMessage\r\n    IF IsNotEmpty(ErrorMessage) THEN\r\n        SET Output_IsSuccess TO False\r\n        EXIT Code: 0\r\n    END\r\nEND FUNCTION\r\nFUNCTION StopFlow GLOBAL\r\n    /# Description:\r\nThis subflow gets the last occurred exception and stops the flow with the exception message. If the error handling is configured to do so, it would also send an email about the fatal error.\r\n\r\nParams:\r\n- None\r\n\r\nReturns:\r\n- Nothing\r\n#/\r\n    SET Output_IsSuccess TO False\r\n    ERROR =&gt; ErrorMessage\r\n    EXIT Code: 0\r\nEND FUNCTION\r\nFUNCTION SendErrorMessages GLOBAL\r\n    SET ErrorMessage TO ''\r\n    Text.ToNumber Text: $'''\\'\\''''\r\n    ON ERROR\r\n        CALL GetSubflowName\r\n    END\r\n    SET Log_Message TO $'''INFO;;;Start'''\r\n    CALL Logger\r\n    BLOCK \r\nON BLOCK ERROR all\r\n    SET Log_Message TO $'''TRACE'''\r\n    CALL Logger\r\nEND\r\n        SET HTML_EmailMessage TO $'''&lt;i&gt;\r\n &lt;p&gt;You are receiving this message because you are set as the recipient for error/warning messages on project %ProjectName%. If you do not want to receive these messages in the future, please contact support.&lt;/p&gt;\r\n &lt;p&gt;Please see the messages below and take appropriate action. If the above explanations do not cover the messages you receive and you are not sure whether or not you need to take any action, please contact support for guidance.&lt;/p&gt;\r\n&lt;/i&gt; \r\n&lt;p&gt;Hello,&lt;/p&gt;\r\n&lt;p&gt;The project %UserFriendlyProjectName% (%ProjectName%) flow \\\"%FlowName%\\\" has completed {{TextToReplace}} and produced the following error log messages:&lt;/p&gt;\r\n&lt;p&gt;%List_ErrorMessages%&lt;/p&gt;\r\n&lt;p&gt;\r\n Please act accordingly.&lt;br&gt;\r\n Best regards,&lt;br&gt;\r\n Robot\r\n&lt;/p&gt;'''\r\n        IF Output_IsSuccess = True THEN\r\n            Text.Replace Text: HTML_EmailMessage TextToFind: $'''{{TextToReplace}}''' IsRegEx: False IgnoreCase: False ReplaceWith: $'''successfully''' ActivateEscapeSequences: False Result=&gt; HTML_EmailMessage\r\n        ELSE\r\n            Text.Replace Text: HTML_EmailMessage TextToFind: $'''{{TextToReplace}}''' IsRegEx: False IgnoreCase: False ReplaceWith: $'''unsuccessfully''' ActivateEscapeSequences: False Result=&gt; HTML_EmailMessage\r\n        END\r\n        IF Config_Environment &lt;&gt; $'''PROD''' THEN\r\n            SET ErrorLogRecipient TO Config_RecipientObject['Default']\r\n        ELSE\r\n            SET ErrorLogRecipient TO Config_RecipientObject['Error']\r\n        END\r\n        SET Log_Message TO $'''INFO;;;Sending error messages to \\\"%ErrorLogRecipient%\\\"'''\r\n        CALL Logger\r\n        # Use either 'EmailSender' or 'EmailSenderO365Outlook' depending on the mailbox type you want to send the message from.\r\n        @@flowname: 'PADFramework: EmailSenderO365Outlook'\r\nExternal.RunFlow FlowId: 'c515285c-5a5d-4379-b50b-96837d0796d2' @Input_Attachments: List_Attachments @Input_EmailMessage: HTML_EmailMessage @Input_EmailRecipient: ErrorLogRecipient @Input_EmailRecipientCC: $'''%''%''' @Input_EmailSubject: $'''%ProjectName% error log''' @Input_HTMLTemplatePath: Config_HTMLTemplatePath @Output_Message=&gt; Output_Message @Output_Status=&gt; Output_Status\r\n    END\r\n    LABEL 'Exit'\r\n    SET Log_Message TO $'''INFO;;;End'''\r\n    CALL Logger\r\n    Variables.RemoveItemFromList.RemoveItemFromListByIndex ItemIndex: List_SubflowNames.Count - 1 List: List_SubflowNames\r\nEND FUNCTION\r\nFUNCTION ExecuteMainFlow GLOBAL\r\n    SET ErrorMessage TO ''\r\n    Text.ToNumber Text: $'''\\'\\''''\r\n    ON ERROR\r\n        CALL GetSubflowName\r\n    END\r\n    SET Log_Message TO $'''INFO;;;Start'''\r\n    CALL Logger\r\n    BLOCK \r\nON BLOCK ERROR all\r\n    SET Log_Message TO $'''TRACE'''\r\n    CALL Logger\r\nEND\r\n        CALL PrepareSystem\r\n        IF IsNotEmpty(ErrorMessage) THEN\r\n            GOTO 'Exit'\r\n        END\r\n        /# Add custom subflow calls here.\r\nCall GenerateWorkItems instead of ProcessWorkItems if this flow is supposed to be the work item generator and not the processor.#/\r\n        CALL ProcessWorkItems\r\n        IF IsNotEmpty(ErrorMessage) THEN\r\n            GOTO 'Exit'\r\n        END\r\n        CALL PrepareSystem\r\n        IF IsNotEmpty(ErrorMessage) THEN\r\n            GOTO 'Exit'\r\n        END\r\n    END\r\n    LABEL 'Exit'\r\n    SET Log_Message TO $'''INFO;;;End'''\r\n    CALL Logger\r\n    Variables.RemoveItemFromList.RemoveItemFromListByIndex ItemIndex: List_SubflowNames.Count - 1 List: List_SubflowNames\r\nEND FUNCTION\r\nFUNCTION PrepareSystem GLOBAL\r\n    /# Description:\r\n1. Closing any applications used by this flow.\r\n2. Clearing any temporary files that may interfere with the flow.\r\n3. Must be run in the beginning of the main flow (after Config). Also recommended to run at the end for cleanup purposes.#/\r\n    SET ErrorMessage TO ''\r\n    Text.ToNumber Text: $'''\\'\\''''\r\n    ON ERROR\r\n        CALL GetSubflowName\r\n    END\r\n    SET Log_Message TO $'''INFO;;;Start'''\r\n    CALL Logger\r\n    BLOCK \r\nON BLOCK ERROR all\r\n    SET Log_Message TO $'''TRACE'''\r\n    CALL Logger\r\nEND\r\n        CALL CloseBrowser\r\n        IF IsNotEmpty(ErrorMessage) THEN\r\n            GOTO 'Exit'\r\n        END\r\n        CALL CloseExcel\r\n        IF IsNotEmpty(ErrorMessage) THEN\r\n            GOTO 'Exit'\r\n        END\r\n        /# Add additional subflow calls as necessary. \r\nRemove CloseBrowser and/or CloseExcel if irrelevant.\r\n#/\r\n    END\r\n    LABEL 'Exit'\r\n    SET Log_Message TO $'''INFO;;;End'''\r\n    CALL Logger\r\n    Variables.RemoveItemFromList.RemoveItemFromListByIndex ItemIndex: List_SubflowNames.Count - 1 List: List_SubflowNames\r\nEND FUNCTION\r\nFUNCTION CloseBrowser GLOBAL\r\n    SET ErrorMessage TO ''\r\n    Text.ToNumber Text: $'''\\'\\''''\r\n    ON ERROR\r\n        CALL GetSubflowName\r\n    END\r\n    SET Log_Message TO $'''INFO;;;Start'''\r\n    CALL Logger\r\n    BLOCK \r\nON BLOCK ERROR all\r\n    SET Log_Message TO $'''TRACE'''\r\n    CALL Logger\r\nEND\r\n        /# The browser instance is a text value if is not instantiated and it does not have a .Handle property.\r\nAttempting to close with the happy path first.#/\r\n        IF IsNotEmpty(BrowserToClose) THEN\r\n            IF (BrowserToClose.Handle) &lt;&gt; (-1) THEN\r\n                WebAutomation.CloseWebBrowser BrowserInstance: BrowserToClose\r\n                ON ERROR REPEAT 3 TIMES WAIT 3\r\n                ON ERROR\r\n\r\n                END\r\n                IF BrowserToClose.IsAlive = False THEN\r\n                    GOTO 'Exit'\r\n                END\r\n            END\r\n        END\r\n        /# Will close all browsers and all instances.\r\nProvide a browser name and URL (as variables) to close a specific browser and/or tab.#/\r\n        @@flowname: 'PADFramework: BrowserCloser'\r\nExternal.RunFlow FlowId: 'a08238ca-5ec4-422d-8eaf-1766d05ec8fe' @Input_Browser: $'''''' @Input_URL: $'''''' @Output_Message=&gt; Output_Message @Output_Status=&gt; Output_Status\r\n        IF Output_Status &lt;&gt; 200 THEN\r\n            SET ErrorMessage TO Output_Message\r\n            GOTO 'Exit'\r\n        END\r\n        Variables.IncreaseVariable Value: BrowserRestartCount IncrementValue: 1\r\n        IF BrowserRestartCount &gt;= Config_MaxErrorCountObject['Web'] THEN\r\n            SET Log_Message TO $'''FATAL;;;The browser has been restarted %BrowserRestartCount% time(s). Assuming it has fallen into an infinite loop and stopping the flow.'''\r\n            CALL Logger\r\n            CALL ThrowFatalError\r\n        END\r\n    END\r\n    LABEL 'Exit'\r\n    SET Log_Message TO $'''INFO;;;End'''\r\n    CALL Logger\r\n    Variables.RemoveItemFromList.RemoveItemFromListByIndex ItemIndex: List_SubflowNames.Count - 1 List: List_SubflowNames\r\nEND FUNCTION\r\nFUNCTION ThrowFatalError GLOBAL\r\n    Text.ToNumber Text: $'''\\'\\''''\r\n    ON ERROR\r\n        CALL GetSubflowName\r\n    END\r\n    SET Log_Message TO $'''FATAL;;;A fatal error has occurred. Stopping the flow \\\"%FlowName%\\\"'''\r\n    CALL Logger\r\n    Variables.RemoveItemFromList.RemoveItemFromListByIndex ItemIndex: List_SubflowNames.Count - 1 List: List_SubflowNames\r\n    # These variables need to be reset, as there is a circular call between ThrowFatalError and any of the Close* subflows.\r\n    SET ErrorCount TO 0\r\n    SET ExcelRestartCount TO 0\r\n    SET BrowserRestartCount TO 0\r\n    CALL PrepareSystem\r\n    CALL SendErrorMessages\r\n    CALL StopFlow\r\nEND FUNCTION\r\nFUNCTION CloseExcel GLOBAL\r\n    SET ErrorMessage TO ''\r\n    Text.ToNumber Text: $'''\\'\\''''\r\n    ON ERROR\r\n        CALL GetSubflowName\r\n    END\r\n    SET Log_Message TO $'''INFO;;;Start'''\r\n    CALL Logger\r\n    BLOCK \r\nON BLOCK ERROR all\r\n    SET Log_Message TO $'''TRACE'''\r\n    CALL Logger\r\nEND\r\n        # Attempting to close with the happy path first before calling ExcelCloser.\r\n        IF IsNotEmpty(ExcelToClose) THEN\r\n            IF ExcelToClose.Handle &lt;&gt; 0 THEN\r\n                BLOCK \r\nON BLOCK ERROR all\r\n\r\nEND\r\n                    Excel.CloseExcel.Close Instance: ExcelToClose\r\n                    WAIT (System.WaitForProcess.ProcessToStop ProcessName: $'''EXCEL''') FOR 10 \r\n                    ON ERROR TimeoutError\r\n\r\n                    END\r\n                    IF (System.IfProcess.ProcessIsNotRunning ProcessName: $'''EXCEL''') THEN\r\n                    ON ERROR\r\n\r\n                    END\r\n                        GOTO 'Exit'\r\n                    END\r\n                END\r\n            END\r\n        END\r\n        /# Will close all Excel instances by default.\r\nProvide a file path as an input parameter to close a specific file.#/\r\n        @@flowname: 'PADFramework: ExcelCloser'\r\nExternal.RunFlow FlowId: 'a261fa2e-fce6-49c8-909a-a94012906030' @Input_FilePath: $'''''' @Output_Message=&gt; Output_Message @Output_Status=&gt; Output_Status\r\n        IF Output_Status &lt;&gt; 200 THEN\r\n            SET ErrorMessage TO Output_Message\r\n            GOTO 'Exit'\r\n        END\r\n        Variables.IncreaseVariable Value: ExcelRestartCount IncrementValue: 1\r\n        IF ExcelRestartCount &gt;= Config_MaxErrorCountObject['Excel'] THEN\r\n            SET Log_Message TO $'''FATAL;;;Excel has been restarted %ExcelRestartCount% time(s). Assuming it has fallen into an infinite loop and stopping the flow.'''\r\n            CALL Logger\r\n            CALL ThrowFatalError\r\n        END\r\n    END\r\n    LABEL 'Exit'\r\n    SET Log_Message TO $'''INFO;;;End'''\r\n    CALL Logger\r\n    Variables.RemoveItemFromList.RemoveItemFromListByIndex ItemIndex: List_SubflowNames.Count - 1 List: List_SubflowNames\r\nEND FUNCTION\r\nFUNCTION ExecuteExcelFlow GLOBAL\r\n    SET ErrorMessage TO ''\r\n    Text.ToNumber Text: $'''\\'\\''''\r\n    ON ERROR\r\n        CALL GetSubflowName\r\n    END\r\n    SET Log_Message TO $'''INFO;;;Start'''\r\n    CALL Logger\r\n    BLOCK \r\nON BLOCK ERROR all\r\n    SET Log_Message TO $'''TRACE'''\r\n    CALL Logger\r\nEND\r\n        SET ExcelDocument TO Config_FlowObject['ExcelDocument']\r\n        /# These retries will apply to each work item retry (3 Excel retries times 3 work item retries by default).\r\nIf you want to do less attempts, reduce the max error count values in config or remove this loop.#/\r\n        LOOP ErrorCount FROM 0 TO Config_MaxErrorCountObject['Excel'] STEP 1\r\n            CALL CloseExcel\r\n            IF IsNotEmpty(ErrorMessage) THEN\r\n                GOTO 'Exit'\r\n            END\r\n            IF (File.IfFile.DoesNotExist File: ExcelDocument) THEN\r\n                SET ErrorMessage TO $'''File \\\"%ExcelDocument%\\\" does not exist. '''\r\n                GOTO 'Exit'\r\n            END\r\n            Excel.LaunchExcel.LaunchAndOpen Path: ExcelDocument Visible: False ReadOnly: False LoadAddInsAndMacros: False Instance=&gt; ExcelMain\r\n            # Replace this comment custom subflow calls.\r\n            IF IsNotEmpty(ErrorMessage) THEN\r\n                SET Log_Message TO $'''ERROR;;;Failed to process Excel due to %ErrorMessage%. Retrying'''\r\n                CALL Logger\r\n                NEXT LOOP\r\n            END\r\n            EXIT LOOP\r\n        END\r\n        SET ExcelToClose TO ExcelMain\r\n        CALL CloseExcel\r\n        IF IsNotEmpty(ErrorMessage) THEN\r\n            SET Log_Message TO $'''WARN;;;%ErrorMessage%. Ignoring error and continuing'''\r\n            CALL Logger\r\n            SET ErrorMessage TO ''\r\n        END\r\n        IF (ErrorCount) &gt;= (Config_MaxErrorCountObject['Excel']) THEN\r\n            SET ErrorMessage TO $'''Excel automation failed after retrying for %Config_MaxErrorCountObject['Excel']% times.'''\r\n        END\r\n    END\r\n    LABEL 'Exit'\r\n    SET Log_Message TO $'''INFO;;;End'''\r\n    CALL Logger\r\n    Variables.RemoveItemFromList.RemoveItemFromListByIndex ItemIndex: List_SubflowNames.Count - 1 List: List_SubflowNames\r\nEND FUNCTION\r\nFUNCTION ProcessWorkItems GLOBAL\r\n    SET ErrorMessage TO ''\r\n    Text.ToNumber Text: $'''\\'\\''''\r\n    ON ERROR\r\n        CALL GetSubflowName\r\n    END\r\n    SET Log_Message TO $'''INFO;;;Start'''\r\n    CALL Logger\r\n    BLOCK \r\nON BLOCK ERROR all\r\n    SET Log_Message TO $'''TRACE'''\r\n    CALL Logger\r\nEND\r\n        LOOP WHILE (1) = (1)\r\n            CALL ResetVariables\r\n            CALL GetWorkItem\r\n            IF IsNotEmpty(ErrorMessage) THEN\r\n                SET WorkItem_Status TO $'''Fail'''\r\n                SET WorkItem_Reason TO $'''GetWorkItemFailure'''\r\n                SET WorkItem_Message TO $'''Failed to get the contents of work item with number %WorkItem_Number% and Id %WorkItem_Id% due to: %ErrorMessage%.'''\r\n                SET Log_Message TO $'''ERROR;;;%WorkItem_Message%'''\r\n                CALL Logger\r\n                CALL CompleteWorkItem\r\n                IF IsNotEmpty(ErrorMessage) THEN\r\n                    GOTO 'Exit'\r\n                END\r\n                NEXT LOOP\r\n            ELSE IF IsEmpty(WorkItem_Id) THEN\r\n                SET Log_Message TO $'''INFO;;;No work items to process.'''\r\n                CALL Logger\r\n                EXIT LOOP\r\n            END\r\n            CALL ProcessWorkItem\r\n            IF IsNotEmpty(ErrorMessage) THEN\r\n                SET WorkItem_Status TO $'''Fail'''\r\n                SET WorkItem_Reason TO $'''ProcessingFailure'''\r\n                SET WorkItem_Message TO $'''Failed to process work item with number %WorkItem_Number% and Id %WorkItem_Id% due to: %ErrorMessage%. Retrying.'''\r\n                SET Log_Message TO $'''ERROR;;;%WorkItem_Message%'''\r\n                CALL Logger\r\n                CALL CleanupOnError\r\n                IF IsNotEmpty(ErrorMessage) THEN\r\n                    SET Log_Message TO $'''ERROR;;;Failed to clean up for work item %WorkItem_Number% and Id %WorkItem_Id% due to: %ErrorMessage%. Ignoring error'''\r\n                    CALL Logger\r\n                    SET ErrorMessage TO $'''%''%'''\r\n                END\r\n                NEXT LOOP\r\n            END\r\n            SET Log_Message TO $'''DEBUG;;;Work item %WorkItem_Number%/%WorkItem_Id% status=(WorkItem_Status=%WorkItem_Status%;WorkItem_Message=%WorkItem_Message%)'''\r\n            CALL Logger\r\n            CALL CompleteWorkItem\r\n            IF IsNotEmpty(ErrorMessage) THEN\r\n                GOTO 'Exit'\r\n            END\r\n        END\r\n    END\r\n    LABEL 'Exit'\r\n    SET Log_Message TO $'''INFO;;;End'''\r\n    CALL Logger\r\n    Variables.RemoveItemFromList.RemoveItemFromListByIndex ItemIndex: List_SubflowNames.Count - 1 List: List_SubflowNames\r\nEND FUNCTION\r\nFUNCTION ResetVariables GLOBAL\r\n    # Reset WorkItem variables\r\n    SET WorkItem_Status TO $'''%''%'''\r\n    SET WorkItem_Reason TO $'''%''%'''\r\n    SET WorkItem_Message TO $'''%''%'''\r\n    SET WorkItem_DataContent TO {{ }}\r\n    SET WorkItem_Id TO ''\r\n    SET WorkItem_Number TO ''\r\n    SET WorkItem_RetrieveCount TO ''\r\n    SET WorkItem_DataSource TO ''\r\n    SET WorkItem_Priority TO $'''Normal'''\r\n    SET WorkItem_ProcessingStartTime TO $'''%''%'''\r\nEND FUNCTION\r\nFUNCTION ProcessWorkItem GLOBAL\r\n    SET ErrorMessage TO ''\r\n    Text.ToNumber Text: $'''\\'\\''''\r\n    ON ERROR\r\n        CALL GetSubflowName\r\n    END\r\n    SET Log_Message TO $'''INFO;;;Start'''\r\n    CALL Logger\r\n    BLOCK \r\nON BLOCK ERROR all\r\n    SET Log_Message TO $'''TRACE'''\r\n    CALL Logger\r\nEND\r\n        # Replace this comment with custom subflows\r\n        IF IsNotEmpty(ErrorMessage) THEN\r\n            GOTO 'Exit'\r\n        END\r\n        SET WorkItem_Status TO $'''Success'''\r\n        SET WorkItem_Reason TO $'''%''%'''\r\n        SET WorkItem_Message TO $'''Successfully processed work item with number %WorkItem_Number% and Id %WorkItem_Id%.'''\r\n    END\r\n    LABEL 'Exit'\r\n    SET Log_Message TO $'''INFO;;;End'''\r\n    CALL Logger\r\n    Variables.RemoveItemFromList.RemoveItemFromListByIndex ItemIndex: List_SubflowNames.Count - 1 List: List_SubflowNames\r\nEND FUNCTION\r\nFUNCTION CleanupOnError GLOBAL\r\n    SET ErrorMessage TO ''\r\n    Text.ToNumber Text: $'''\\'\\''''\r\n    ON ERROR\r\n        CALL GetSubflowName\r\n    END\r\n    SET Log_Message TO $'''INFO;;;Start'''\r\n    CALL Logger\r\n    BLOCK \r\nON BLOCK ERROR all\r\n    SET Log_Message TO $'''TRACE'''\r\n    CALL Logger\r\nEND\r\n        # If needed, call `TakeScreenshot` subflow to take a screenshot before calling any `Close*` subflows (except CloseExcel).\r\n        CALL UpsertWorkItem\r\n        IF IsNotEmpty(ErrorMessage) THEN\r\n            GOTO 'Exit'\r\n        END\r\n        IF WorkItem_RetrieveCount &gt;= (Config_MaxErrorCountObject['WorkItem'] - 1) THEN\r\n            SET WorkItem_Status TO $'''Fail'''\r\n            SET WorkItem_Reason TO $'''MaxRetryFailure'''\r\n            SET WorkItem_Message TO $'''Failed to process work item with number %WorkItem_Number% and Id %WorkItem_Id% after %WorkItem_RetrieveCount% attempt(s). Skipping this work item'''\r\n            SET Log_Message TO $'''ERROR;;;%WorkItem_Message%'''\r\n            CALL Logger\r\n            CALL CompleteWorkItem\r\n            IF IsNotEmpty(ErrorMessage) THEN\r\n                GOTO 'Exit'\r\n            END\r\n        END\r\n        CALL PrepareSystem\r\n        IF IsNotEmpty(ErrorMessage) THEN\r\n            GOTO 'Exit'\r\n        END\r\n    END\r\n    LABEL 'Exit'\r\n    SET Log_Message TO $'''INFO;;;End'''\r\n    CALL Logger\r\n    Variables.RemoveItemFromList.RemoveItemFromListByIndex ItemIndex: List_SubflowNames.Count - 1 List: List_SubflowNames\r\nEND FUNCTION\r\nFUNCTION GetWorkItem GLOBAL\r\n    SET ErrorMessage TO ''\r\n    Text.ToNumber Text: $'''\\'\\''''\r\n    ON ERROR\r\n        CALL GetSubflowName\r\n    END\r\n    SET Log_Message TO $'''INFO;;;Start'''\r\n    CALL Logger\r\n    BLOCK \r\nON BLOCK ERROR all\r\n    SET Log_Message TO $'''TRACE'''\r\n    CALL Logger\r\nEND\r\n        SET WorkItem_Operation TO $'''Get'''\r\n        CALL HandleWorkItem\r\n        IF IsNotEmpty(ErrorMessage) THEN\r\n            GOTO 'Exit'\r\n        END\r\n    END\r\n    LABEL 'Exit'\r\n    SET Log_Message TO $'''INFO;;;End'''\r\n    CALL Logger\r\n    Variables.RemoveItemFromList.RemoveItemFromListByIndex ItemIndex: List_SubflowNames.Count - 1 List: List_SubflowNames\r\nEND FUNCTION\r\nFUNCTION CompleteWorkItem GLOBAL\r\n    SET ErrorMessage TO ''\r\n    Text.ToNumber Text: $'''\\'\\''''\r\n    ON ERROR\r\n        CALL GetSubflowName\r\n    END\r\n    SET Log_Message TO $'''INFO;;;Start'''\r\n    CALL Logger\r\n    BLOCK \r\nON BLOCK ERROR all\r\n    SET Log_Message TO $'''TRACE'''\r\n    CALL Logger\r\nEND\r\n        SET WorkItem_Operation TO $'''Complete'''\r\n        CALL HandleWorkItem\r\n        IF IsNotEmpty(ErrorMessage) THEN\r\n            GOTO 'Exit'\r\n        END\r\n    END\r\n    LABEL 'Exit'\r\n    SET Log_Message TO $'''INFO;;;End'''\r\n    CALL Logger\r\n    Variables.RemoveItemFromList.RemoveItemFromListByIndex ItemIndex: List_SubflowNames.Count - 1 List: List_SubflowNames\r\nEND FUNCTION\r\nFUNCTION ExecuteWebFlow GLOBAL\r\n    SET ErrorMessage TO ''\r\n    Text.ToNumber Text: $'''\\'\\''''\r\n    ON ERROR\r\n        CALL GetSubflowName\r\n    END\r\n    SET Log_Message TO $'''INFO;;;Start'''\r\n    CALL Logger\r\n    BLOCK \r\nON BLOCK ERROR all\r\n    SET Log_Message TO $'''TRACE'''\r\n    CALL Logger\r\nEND\r\n        /# These retries will apply to each work item retry (3 web retries times 3 work item retries by default).\r\nIf you want to do less attempts, reduce the max error count values in config or remove this loop.#/\r\n        LOOP ErrorCount FROM 1 TO Config_MaxErrorCountObject['Web'] STEP 1\r\n            IF IsNotEmpty(ErrorMessage) THEN\r\n                SET Log_Message TO $'''ERROR;;;%ErrorMessage%'''\r\n                CALL Logger\r\n                SET ErrorMessage TO ''\r\n                CALL TakeScreenshot\r\n                IF IsNotEmpty(ErrorMessage) THEN\r\n                    SET Log_Message TO $'''ERROR;;;%ErrorMessage%'''\r\n                    CALL Logger\r\n                    SET ErrorMessage TO ''\r\n                END\r\n            END\r\n            CALL PrepareWebPage\r\n            IF IsNotEmpty(ErrorMessage) THEN\r\n                NEXT LOOP\r\n            END\r\n            # Replace this comment with custom subflows\r\n            EXIT LOOP\r\n        END\r\n        IF (ErrorCount) &gt;= (Config_MaxErrorCountObject['Web']) THEN\r\n            SET WorkItem_Status TO $'''Fail'''\r\n            SET WorkItem_Reason TO $'''ProcessingFailure'''\r\n            SET WorkItem_Message TO $'''Web Automation failed after %ErrorCount% attempts.'''\r\n        END\r\n    END\r\n    LABEL 'Exit'\r\n    SET Log_Message TO $'''INFO;;;End'''\r\n    CALL Logger\r\n    Variables.RemoveItemFromList.RemoveItemFromListByIndex ItemIndex: List_SubflowNames.Count - 1 List: List_SubflowNames\r\nEND FUNCTION\r\nFUNCTION PrepareWebPage GLOBAL\r\n    SET ErrorMessage TO ''\r\n    Text.ToNumber Text: $'''\\'\\''''\r\n    ON ERROR\r\n        CALL GetSubflowName\r\n    END\r\n    SET Log_Message TO $'''INFO;;;Start'''\r\n    CALL Logger\r\n    BLOCK \r\nON BLOCK ERROR all\r\n    SET Log_Message TO $'''TRACE'''\r\n    CALL Logger\r\nEND\r\n        /# Checking for whether a browser instance is alive to not clean up on each retry and work item.\r\nAdditional checks for specific page title or URL or even a window can be added to check if the flow can recover without restarting the browser.#/\r\n        IF IsNotEmpty(BrowserMain) THEN\r\n            IF (BrowserMain.Handle &lt;&gt; -1 AND BrowserMain.IsAlive = True) = True THEN\r\n                SET Log_Message TO $'''INFO;;;Browser is open and ready.'''\r\n                CALL Logger\r\n                GOTO 'Exit'\r\n            END\r\n        END\r\n        CALL CloseBrowser\r\n        IF IsNotEmpty(ErrorMessage) THEN\r\n            GOTO 'Exit'\r\n        END\r\n        CALL LaunchBrowser\r\n        IF IsNotEmpty(ErrorMessage) THEN\r\n            GOTO 'Exit'\r\n        END\r\n        # Login subflow to be used only when relevant to login to the web page.\r\n        CALL LoginToWebPage\r\n        IF IsNotEmpty(ErrorMessage) THEN\r\n            GOTO 'Exit'\r\n        END\r\n    END\r\n    LABEL 'Exit'\r\n    SET Log_Message TO $'''INFO;;;End'''\r\n    CALL Logger\r\n    Variables.RemoveItemFromList.RemoveItemFromListByIndex ItemIndex: List_SubflowNames.Count - 1 List: List_SubflowNames\r\nEND FUNCTION\r\nFUNCTION LaunchBrowser GLOBAL\r\n    SET ErrorMessage TO ''\r\n    Text.ToNumber Text: $'''\\'\\''''\r\n    ON ERROR\r\n        CALL GetSubflowName\r\n    END\r\n    SET Log_Message TO $'''INFO;;;Start'''\r\n    CALL Logger\r\n    BLOCK \r\nON BLOCK ERROR all\r\n    SET Log_Message TO $'''TRACE'''\r\n    CALL Logger\r\nEND\r\n        SET URL TO Config_URLObject['Main']\r\n        /# Will launch Edge in normal mode by default.\r\nAdjust input parameters as necessary.#/\r\n        SET Browser TO $'''Edge'''\r\n        @@flowname: 'PADFramework: BrowserLauncher'\r\nExternal.RunFlow FlowId: 'aa0a967a-5f8c-4891-b6c1-87536e7f3d0b' @Input_Browser: Browser @Input_URL: URL @Input_IncognitoMode: False @Output_Status=&gt; Output_Status @Output_Message=&gt; Output_Message\r\n        IF Output_Status &lt;&gt; 200 THEN\r\n            SET ErrorMessage TO Output_Message\r\n        END\r\n        SWITCH Browser\r\n            CASE = $'''Chrome'''\r\n                WebAutomation.LaunchChrome.AttachToChromeByUrl TabUrl: URL AttachTimeout: 5 BrowserInstance=&gt; BrowserMain\r\n            CASE = $'''Edge'''\r\n                WebAutomation.LaunchEdge.AttachToEdgeByUrl TabUrl: URL AttachTimeout: 5 BrowserInstance=&gt; BrowserMain\r\n            CASE = $'''Firefox'''\r\n                WebAutomation.LaunchFirefox.AttachToFirefoxByUrl TabUrl: URL AttachTimeout: 5 BrowserInstance=&gt; BrowserMain\r\n        END\r\n        SET BrowserToClose TO BrowserMain\r\n    END\r\n    LABEL 'Exit'\r\n    SET Log_Message TO $'''INFO;;;End'''\r\n    CALL Logger\r\n    Variables.RemoveItemFromList.RemoveItemFromListByIndex ItemIndex: List_SubflowNames.Count - 1 List: List_SubflowNames\r\nEND FUNCTION\r\nFUNCTION LoginToWebPage GLOBAL\r\n    SET ErrorMessage TO ''\r\n    Text.ToNumber Text: $'''\\'\\''''\r\n    ON ERROR\r\n        CALL GetSubflowName\r\n    END\r\n    SET Log_Message TO $'''INFO;;;Start'''\r\n    CALL Logger\r\n    BLOCK \r\nON BLOCK ERROR all\r\n    SET Log_Message TO $'''TRACE'''\r\n    CALL Logger\r\nEND\r\n        /# Populate credentials.\r\nPress button to login.\r\nWait for page to load.#/\r\n        # Check if Credentials are correct. If they are not =&gt; call ThrowFatalError\r\n    END\r\n    LABEL 'Exit'\r\n    SET Log_Message TO $'''INFO;;;End'''\r\n    CALL Logger\r\n    Variables.RemoveItemFromList.RemoveItemFromListByIndex ItemIndex: List_SubflowNames.Count - 1 List: List_SubflowNames\r\nEND FUNCTION\r\nFUNCTION TakeScreenshot GLOBAL\r\n    SET ErrorMessage TO ''\r\n    Text.ToNumber Text: $'''\\'\\''''\r\n    ON ERROR\r\n        CALL GetSubflowName\r\n    END\r\n    SET Log_Message TO $'''INFO;;;Start'''\r\n    CALL Logger\r\n    BLOCK \r\nON BLOCK ERROR all\r\n    SET Log_Message TO $'''TRACE'''\r\n    CALL Logger\r\nEND\r\n        DateTime.GetCurrentDateTime.Local DateTimeFormat: DateTime.DateTimeFormat.DateAndTime CurrentDateTime=&gt; CurrentDateTime\r\n        Text.ConvertDateTimeToText.FromCustomDateTime DateTime: CurrentDateTime CustomFormat: $'''yyyy-MM-dd HHmmss''' Result=&gt; Timestamp\r\n        SET ScreenshotFileName TO $'''%WorkItem_Id% %WorkItem_Number% %Timestamp%.png'''\r\n        @@flowname: 'PADFramework: ScreenshotMaker'\r\nExternal.RunFlow FlowId: '8bba4a93-fbb7-478c-b098-a5ca91273227' @Input_ScreenshotsDirectory: Config_ScreenshotsPath @Input_ScreenshotFileName: ScreenshotFileName @Output_Message=&gt; Output_Message @Output_Status=&gt; Output_Status\r\n        IF Output_Status &lt;&gt; 200 THEN\r\n            SET ErrorMessage TO Output_Message\r\n            GOTO 'Exit'\r\n        END\r\n        SET Log_Message TO $'''DEBUG;;;Successfully took screenshot `%ScreenshotFileName%`'''\r\n        CALL Logger\r\n    END\r\n    LABEL 'Exit'\r\n    SET Log_Message TO $'''INFO;;;End'''\r\n    CALL Logger\r\n    Variables.RemoveItemFromList.RemoveItemFromListByIndex ItemIndex: List_SubflowNames.Count - 1 List: List_SubflowNames\r\nEND FUNCTION\r\nFUNCTION Template GLOBAL\r\n    SET ErrorMessage TO ''\r\n    Text.ToNumber Text: $'''\\'\\''''\r\n    ON ERROR\r\n        CALL GetSubflowName\r\n    END\r\n    SET Log_Message TO $'''INFO;;;Start'''\r\n    CALL Logger\r\n    BLOCK \r\nON BLOCK ERROR all\r\n    SET Log_Message TO $'''TRACE'''\r\n    CALL Logger\r\nEND\r\n    END\r\n    LABEL 'Exit'\r\n    SET Log_Message TO $'''INFO;;;End'''\r\n    CALL Logger\r\n    Variables.RemoveItemFromList.RemoveItemFromListByIndex ItemIndex: List_SubflowNames.Count - 1 List: List_SubflowNames\r\nEND FUNCTION\r\nFUNCTION GetFlowSettings GLOBAL\r\n    /# Gets settings from Config for a specific Flow.\r\nParameters that are available globally in the config (MaxErrorCount, Logger, Environment, Recipient, etc.) are not mandatory, but can be set per flow, too.\r\nCustom parameters specific to a certain flow should be set in the flow object and not the global Config.#/\r\n    SET ErrorMessage TO ''\r\n    Text.ToNumber Text: $'''\\'\\''''\r\n    ON ERROR\r\n        CALL GetSubflowName\r\n    END\r\n    SET Log_Message TO $'''INFO;;;Start'''\r\n    CALL Logger\r\n    BLOCK \r\nON BLOCK ERROR all\r\n    SET Log_Message TO $'''TRACE'''\r\n    CALL Logger\r\nEND\r\n        SET Config_FlowObject TO Config_Object['Flows'][FlowName]\r\n        IF Contains(Config_FlowObject, $'''MaxErrorCount''', False) THEN\r\n            Variables.ConvertJsonToCustomObject Json: Config_FlowObject['MaxErrorCount'] CustomObject=&gt; Config_MaxErrorCountObject\r\n        END\r\n        IF Contains(Config_FlowObject, $'''Logger''', False) THEN\r\n            Variables.ConvertJsonToCustomObject Json: Config_FlowObject['Logger'] CustomObject=&gt; Config_LoggerObject\r\n            IF NotContains(Config_LoggerObject, $'''LogLevels''', False) THEN\r\n                SET ErrorMessage TO $'''Modules =&gt; %FlowName% =&gt; Logger =&gt; LogLevels'''\r\n                GOTO 'Exit'\r\n            ELSE IF NotContains(Config_LoggerObject, $'''ErrorLogLevels''', False) THEN\r\n                SET ErrorMessage TO $'''Modules =&gt; %FlowName% =&gt; Logger =&gt; ErrorLogLevels'''\r\n                GOTO 'Exit'\r\n            END\r\n            SET Log_Message TO $'''INFO;;;Using logger settings from the flow environment'''\r\n            CALL Logger\r\n        END\r\n        IF Contains(Config_FlowObject, $'''Environment''', False) THEN\r\n            SET Config_Environment TO Config_FlowObject['Environment']\r\n        END\r\n        IF Contains(Config_FlowObject, $'''Recipient''', False) THEN\r\n            Variables.ConvertJsonToCustomObject Json: Config_FlowObject['Recipient'] CustomObject=&gt; Config_RecipientObject\r\n        END\r\n        IF Contains(Config_FlowObject, $'''ScreenshotsPath''', False) THEN\r\n            SET Config_ScreenshotsPath TO Config_FlowObject['ScreenshotsPath']\r\n        END\r\n        IF Contains(Config_FlowObject, $'''URL''', False) THEN\r\n            Variables.ConvertJsonToCustomObject Json: Config_FlowObject['URL'] CustomObject=&gt; Config_URLObject\r\n        END\r\n        IF Contains(Config_FlowObject, $'''HTMLTemplatePath''', False) THEN\r\n            SET Config_HTMLTemplatePath TO Config_FlowObject['HTMLTemplatePath']\r\n        END\r\n        SET Log_Message TO $'''INFO;;;Environment is %Config_Environment%'''\r\n        CALL Logger\r\n    END\r\n    LABEL 'Exit'\r\n    SET Log_Message TO $'''INFO;;;End'''\r\n    CALL Logger\r\n    Variables.RemoveItemFromList.RemoveItemFromListByIndex ItemIndex: List_SubflowNames.Count - 1 List: List_SubflowNames\r\nEND FUNCTION\r\nFUNCTION HandleWorkItem GLOBAL\r\n    SET ErrorMessage TO ''\r\n    Text.ToNumber Text: $'''\\'\\''''\r\n    ON ERROR\r\n        CALL GetSubflowName\r\n    END\r\n    SET Log_Message TO $'''INFO;;;Start'''\r\n    CALL Logger\r\n    BLOCK \r\nON BLOCK ERROR all\r\n    SET Log_Message TO $'''TRACE'''\r\n    CALL Logger\r\nEND\r\n        @@flowname: 'PADFramework: WorkItemHandler'\r\nExternal.RunFlow FlowId: 'ba8eaa10-fb57-4fef-9240-e2690d67b906' @Input_WorkItemOperation: WorkItem_Operation @Input_WorkItemId: WorkItem_Id @Input_WorkItemNumber: WorkItem_Number @Input_WorkItemData: WorkItem_DataContent @Input_WorkItemStatus: WorkItem_Status @Input_WorkItemMessage: WorkItem_Message @Input_WorkItemDataSource: WorkItem_DataSource @Input_ProjectName: ProjectName @Input_FlowName: FlowName @Input_DatabaseType: Config_Object['WorkItemDatabaseType'] @Input_ConnectionString: Config_Object['WorkItemDatabaseConnectionString']['Config_Environment'] @Input_WorkItemProcessingStartTime: WorkItem_ProcessingStartTime @Input_WorkItemReason: WorkItem_Reason @Input_MaxRetrieveCount: Config_MaxErrorCountObject['WorkItem'] @Input_Environment: Config_Environment @Input_WorkItemPriority: WorkItem_Priority @Output_WorkItemId=&gt; WorkItem_Id @Output_WorkItemNumber=&gt; WorkItem_Number @Output_WorkItemData=&gt; WorkItem_DataContent @Output_WorkItemRetrieveCount=&gt; WorkItem_RetrieveCount @Output_WorkItemDataSource=&gt; WorkItem_DataSource @Output_Message=&gt; Output_Message @Output_Status=&gt; Output_Status @Output_WorkItemProcessingStartTime=&gt; WorkItem_ProcessingStartTime @Output_WorkItemPriority=&gt; WorkItem_Priority\r\n        IF Output_Status &gt;= 300 THEN\r\n            SET ErrorMessage TO Output_Message\r\n            GOTO 'Exit'\r\n        END\r\n    END\r\n    LABEL 'Exit'\r\n    SET Log_Message TO $'''INFO;;;End'''\r\n    CALL Logger\r\n    Variables.RemoveItemFromList.RemoveItemFromListByIndex ItemIndex: List_SubflowNames.Count - 1 List: List_SubflowNames\r\nEND FUNCTION\r\nFUNCTION UpsertWorkItem GLOBAL\r\n    SET ErrorMessage TO ''\r\n    Text.ToNumber Text: $'''\\'\\''''\r\n    ON ERROR\r\n        CALL GetSubflowName\r\n    END\r\n    SET Log_Message TO $'''INFO;;;Start'''\r\n    CALL Logger\r\n    BLOCK \r\nON BLOCK ERROR all\r\n    SET Log_Message TO $'''TRACE'''\r\n    CALL Logger\r\nEND\r\n        SET WorkItem_Operation TO $'''Upsert'''\r\n        CALL HandleWorkItem\r\n        IF IsNotEmpty(ErrorMessage) THEN\r\n            GOTO 'Exit'\r\n        END\r\n    END\r\n    LABEL 'Exit'\r\n    SET Log_Message TO $'''INFO;;;End'''\r\n    CALL Logger\r\n    Variables.RemoveItemFromList.RemoveItemFromListByIndex ItemIndex: List_SubflowNames.Count - 1 List: List_SubflowNames\r\nEND FUNCTION\r\nFUNCTION GenerateWorkItems GLOBAL\r\n    SET ErrorMessage TO ''\r\n    Text.ToNumber Text: $'''\\'\\''''\r\n    ON ERROR\r\n        CALL GetSubflowName\r\n    END\r\n    SET Log_Message TO $'''INFO;;;Start'''\r\n    CALL Logger\r\n    BLOCK \r\nON BLOCK ERROR all\r\n    SET Log_Message TO $'''TRACE'''\r\n    CALL Logger\r\nEND\r\n        /# Replace this comment with custom subflows for retrieving the work item data from some data source.\r\nDelete the \"Create new data table\" action afterwards - it is only used to create a variable so that the loop has something to iterate through.#/\r\n        Variables.CreateNewDatatable InputTable: { } DataTable=&gt; DataTable_WorkItems\r\n        LOOP FOREACH DataRow_CurrentWorkItem IN DataTable_WorkItems\r\n            CALL SerializeWorkItem\r\n            IF IsNotEmpty(ErrorMessage) THEN\r\n                GOTO 'Exit'\r\n            END\r\n            CALL UpsertWorkItem\r\n            IF IsNotEmpty(ErrorMessage) THEN\r\n                GOTO 'Exit'\r\n            END\r\n        END\r\n    END\r\n    LABEL 'Exit'\r\n    SET Log_Message TO $'''INFO;;;End'''\r\n    CALL Logger\r\n    Variables.RemoveItemFromList.RemoveItemFromListByIndex ItemIndex: List_SubflowNames.Count - 1 List: List_SubflowNames\r\nEND FUNCTION\r\nFUNCTION SerializeWorkItem GLOBAL\r\n    SET ErrorMessage TO ''\r\n    Text.ToNumber Text: $'''\\'\\''''\r\n    ON ERROR\r\n        CALL GetSubflowName\r\n    END\r\n    SET Log_Message TO $'''INFO;;;Start'''\r\n    CALL Logger\r\n    BLOCK \r\nON BLOCK ERROR all\r\n    SET Log_Message TO $'''TRACE'''\r\n    CALL Logger\r\nEND\r\n        SET WorkItem_DataContent TO {{ }}\r\n        /# Replace this comment with \"Set variable\" actions adding values from the %DataRow_CurrentWorkItem% variable to the custom object.\r\nAdd as many as needed.\r\nAlso set:\r\n- WorkItem_Number\r\n- WorkItem_DataSource#/\r\n    END\r\n    LABEL 'Exit'\r\n    SET Log_Message TO $'''INFO;;;End'''\r\n    CALL Logger\r\n    Variables.RemoveItemFromList.RemoveItemFromListByIndex ItemIndex: List_SubflowNames.Count - 1 List: List_SubflowNames\r\nEND FUNCTION\r\nFUNCTION GetSubflowName GLOBAL\r\n    ERROR =&gt; MockError Reset: True\r\n    Text.ParseText.RegexParseForFirstOccurrence Text: MockError.Location TextToFind: $'''(?&lt;=Subflow:\\\\s).+(?=,\\\\sAction:)''' StartingPosition: 0 IgnoreCase: False Match=&gt; SubflowName\r\n    Variables.AddItemToList Item: SubflowName List: List_SubflowNames\r\nEND FUNCTION\r\n"</Definition>
      <SchemaVersion>2022.07</SchemaVersion>
      <DesktopFlowModules>[]</DesktopFlowModules>
      <PrimaryEntity>none</PrimaryEntity>
      <LocalizedNames>
        <LocalizedName languagecode="1033" description="PADFramework: FlowTemplate" />
      </LocalizedNames>
    </Workflow>
    <Workflow WorkflowId="{b1b933bf-5746-4c79-9b99-12da65958023}" Name="PADFramework: EmailSender">
      <JsonFileName>/Workflows/PADFrameworkEmailSender-B1B933BF-5746-4C79-9B99-12DA65958023.json</JsonFileName>
      <Type>1</Type>
      <Subprocess>0</Subprocess>
      <Category>6</Category>
      <Mode>0</Mode>
      <Scope>4</Scope>
      <OnDemand>0</OnDemand>
      <TriggerOnCreate>0</TriggerOnCreate>
      <TriggerOnDelete>0</TriggerOnDelete>
      <AsyncAutodelete>0</AsyncAutodelete>
      <SyncWorkflowLogOnFailure>0</SyncWorkflowLogOnFailure>
      <StateCode>1</StateCode>
      <StatusCode>2</StatusCode>
      <RunAs>1</RunAs>
      <IsTransacted>1</IsTransacted>
      <IntroducedVersion>1.0</IntroducedVersion>
      <IsCustomizable>1</IsCustomizable>
      <BusinessProcessType>0</BusinessProcessType>
      <UIFlowType>2</UIFlowType>
      <IsCustomProcessingStepAllowedForOtherPublishers>1</IsCustomProcessingStepAllowedForOtherPublishers>
      <Metadata>{"clientversion":"2.45.00410.24179","isvalid":true,"$schema":"https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#","schemaVersion":"ROBIN_20211012","containsActiveConnections":false,"containsGptPredictActions":false,"containsActiveCopilotActions":false,"containsActiveWorkQueuesActions":false,"containsActiveLogMessageActions":false,"multipleRequestsState":0,"scriptType":0,"disableScreenshotCaptureOnError":false,"missingUiElementRepairType":null,"flowTimeout":null}</Metadata>
      <Inputs>{"schema":{"required":["Input_DisplayName","Input_EmailAccount","Input_EmailRecipient","Input_EmailSubject","Input_HTMLTemplatePath","Input_MailboxType","Input_EmailMessage"],"properties":{"Input_Attachments":{"isOptional":true,"default":"","description":"Provide attachments (if any) to be added to the email message in a form of a list of file paths.","format":null,"title":"Input_Attachments","type":"array","value":"[\r\n]\r\n"},"Input_DisplayName":{"isOptional":false,"default":"","description":"Provide the sender name to be displayed to the recipient(s) of the email.","format":null,"title":"Input_DisplayName","type":"string","value":""},"Input_EmailAccount":{"isOptional":false,"default":"","description":"Provide the account to be used when sending the email.","format":null,"title":"Input_EmailAccount","type":"string","value":""},"Input_EmailRecipient":{"isOptional":false,"default":"","description":"Provide the recipient(s) to send the email to.\r\nIf multiple recipients are provided, separate them by a semicolon.","format":"password","title":"Input_EmailRecipient","type":"string","value":null},"Input_EmailRecipientCC":{"isOptional":true,"default":"","description":"Provide CC recipient(s) of the email (optional)\r\nIf multiple recipients are provided, separate them by a semicolon.","format":"password","title":"Input_EmailRecipientCC","type":"string","value":null},"Input_EmailSubject":{"isOptional":false,"default":"","description":"Provide the subject text for the email.","format":null,"title":"Input_EmailSubject","type":"string","value":""},"Input_ExchangeObject":{"isOptional":true,"default":"","description":"Provide a custom object with Exchange server parameters (optional for other mailbox types).\r\nIf left blank, default values will be used.\r\nParameters expected:\r\n1. Server - the server address\r\n1. Domain - for the user account\r\n1. Username\r\n1. Password","format":"password","title":"Input_ExchangeObject","type":"object","value":null},"Input_HTMLTemplatePath":{"isOptional":false,"default":"","description":"Provide the path to the HTML template for the email body.","format":null,"title":"Input_HTMLTemplatePath","type":"string","value":""},"Input_MailboxType":{"isOptional":false,"default":"","description":"Provide the type of mailbox to be used.\r\nSupported options are:\r\n1. Exchange \r\n1. Outlook\r\n1. SMTP\r\n","format":null,"title":"Input_MailboxType","type":"string","value":""},"Input_SMTPObject":{"isOptional":true,"default":"","description":"Provide a custom object with SMTP server parameters (optional for other mailbox types).\r\nParameters expected:\r\n1. Server - the server address\r\n1. Port\r\n1. Username\r\n1. Password","format":"password","title":"Input_SMTPObject","type":"object","value":null},"Input_EmailMessage":{"isOptional":false,"default":"","description":"Please provide the email message to be sent.\r\nThe message should be formatted as HTML. Otherwise, it will be sent as a single blob of text inside an HTML message.","format":"password","title":"Input_EmailMessage","type":"string","value":null}},"type":"object"}}</Inputs>
      <Outputs>{"schema":{"properties":{"Output_Message":{"default":"","description":"The flow response.","format":"password","title":"Output_Message","type":"string","value":null},"Output_Status":{"default":"","description":"The status of the flow. Uses standard HTTP status codes.","format":null,"title":"Output_Status","type":"number","value":null}},"type":"object"}}</Outputs>
      <Dependencies>{"childFlows":[],"workQueues":[]}</Dependencies>
      <ConnectionReferences>[]</ConnectionReferences>
      <Definition>"@@ConnectionString: ''\r\n@@Type: 'Local'\r\n@@DesktopType: 'local'\r\n@@DisplayName: 'Local computer'\r\nIMPORT 'controlRepo.appmask' AS appmask\r\nIMPORT 'imageRepo.imgrepo' AS imgrepo\r\n@SENSITIVE: [Input_EmailRecipient, Input_EmailRecipientCC, Input_ExchangeObject, Input_SMTPObject, Output_Message, Input_EmailMessage]\r\n@INPUT Input_Attachments : { 'Description': 'Provide attachments (if any) to be added to the email message in a form of a list of file paths.', 'FriendlyName': 'Input_Attachments', 'Type': 'List', 'IsOptional': True, 'DefaultValue': [] } \r\n@INPUT Input_DisplayName : { 'Description': 'Provide the sender name to be displayed to the recipient(s) of the email.', 'FriendlyName': 'Input_DisplayName', 'Type': 'String', 'IsOptional': False, 'DefaultValue': '' } \r\n@INPUT Input_EmailAccount : { 'Description': 'Provide the account to be used when sending the email.', 'FriendlyName': 'Input_EmailAccount', 'Type': 'String', 'IsOptional': False, 'DefaultValue': '' } \r\n@INPUT Input_EmailRecipient : { 'Description': '''Provide the recipient(s) to send the email to.\r\nIf multiple recipients are provided, separate them by a semicolon.''', 'FriendlyName': 'Input_EmailRecipient', 'Type': 'String', 'IsOptional': False, 'DefaultValue': '' } \r\n@INPUT Input_EmailRecipientCC : { 'Description': '''Provide CC recipient(s) of the email (optional)\r\nIf multiple recipients are provided, separate them by a semicolon.''', 'FriendlyName': 'Input_EmailRecipientCC', 'Type': 'String', 'IsOptional': True } \r\n@INPUT Input_EmailSubject : { 'Description': 'Provide the subject text for the email.', 'FriendlyName': 'Input_EmailSubject', 'Type': 'String', 'IsOptional': False, 'DefaultValue': '' } \r\n@INPUT Input_ExchangeObject : { 'Description': '''Provide a custom object with Exchange server parameters (optional for other mailbox types).\r\nIf left blank, default values will be used.\r\nParameters expected:\r\n1. Server - the server address\r\n1. Domain - for the user account\r\n1. Username\r\n1. Password''', 'FriendlyName': 'Input_ExchangeObject', 'Type': 'CustomObject', 'IsOptional': True, 'DefaultValue': {{ }} } \r\n@INPUT Input_HTMLTemplatePath : { 'Description': 'Provide the path to the HTML template for the email body.', 'FriendlyName': 'Input_HTMLTemplatePath', 'Type': 'String', 'IsOptional': False, 'DefaultValue': '' } \r\n@INPUT Input_MailboxType : { 'Description': '''Provide the type of mailbox to be used.\r\nSupported options are:\r\n1. Exchange \r\n1. Outlook\r\n1. SMTP\r\n''', 'FriendlyName': 'Input_MailboxType', 'Type': 'String', 'IsOptional': False, 'DefaultValue': '' } \r\n@INPUT Input_SMTPObject : { 'Description': '''Provide a custom object with SMTP server parameters (optional for other mailbox types).\r\nParameters expected:\r\n1. Server - the server address\r\n1. Port\r\n1. Username\r\n1. Password''', 'FriendlyName': 'Input_SMTPObject', 'Type': 'CustomObject', 'IsOptional': True, 'DefaultValue': {{ }} } \r\n@OUTPUT Output_Message : { 'Description': 'The flow response.', 'FriendlyName': 'Output_Message', 'Type': 'String' } \r\n@OUTPUT Output_Status : { 'Description': 'The status of the flow. Uses standard HTTP status codes.', 'FriendlyName': 'Output_Status', 'Type': 'Numeric' } \r\n@INPUT Input_EmailMessage : { 'Description': '''Please provide the email message to be sent.\r\nThe message should be formatted as HTML. Otherwise, it will be sent as a single blob of text inside an HTML message.''', 'FriendlyName': 'Input_EmailMessage', 'Type': 'String', 'IsOptional': False, 'DefaultValue': '' } \r\n# Setting the status and message to 'Bad Request' by default in case the flow fails.\r\nSET Output_Status TO 400\r\nSET Output_Message TO $'''Bad Request'''\r\nBLOCK \r\nON BLOCK ERROR all\r\n\r\nEND\r\n    CALL SetEmailBody\r\n    SWITCH Input_MailboxType\r\n        CASE = $'''Exchange'''\r\n            CALL SendEmailViaExchange\r\n        CASE = $'''Outlook'''\r\n            CALL SendEmailViaOutlook\r\n        CASE = $'''SMTP'''\r\n            CALL SendEmailViaSMTP\r\n        DEFAULT\r\n            SET Output_Status TO 400\r\n            SET Output_Message TO $'''Mailbox type \\'%Input_MailboxType%\\' is not supported by the Email Sender flow.'''\r\n            GOTO 'Exit'\r\n    END\r\n    SET Output_Status TO 200\r\n    SET Output_Message TO $'''Successfully sent an email with subject text \\'%Input_EmailSubject%\\' to \\'%Input_EmailRecipient%\\''''\r\n    LABEL 'Exit'\r\n    EXIT Code: 0\r\nEND\r\nERROR =&gt; ErrorMessage\r\nSET Output_Status TO 500\r\nSET Output_Message TO $'''Failed to send an email due to %ErrorMessage%'''\r\nFUNCTION SendEmailViaExchange GLOBAL\r\n    IF (Contains(Input_ExchangeObject, 'Server', False) AND Contains(Input_ExchangeObject, 'Username', False)) = True THEN\r\n        IF (IsNotEmpty(Input_ExchangeObject['Server']) AND IsNotEmpty(Input_ExchangeObject['Server'])) = True THEN\r\n            Exchange.ConnectToExchangeServer.ConnectToServerWithCredentials ServerVersion: Exchange.ServerVersion.Exchange2013_SP1 ServerAddress: Input_ExchangeObject['Server'] Domain: Input_ExchangeObject['Domain'] Username: Input_ExchangeObject['Username'] Password: Input_ExchangeObject['Password'] Timeout: 30 Connection=&gt; ExchangeConnection\r\n        ELSE IF IsNotEmpty(Input_ExchangeObject['Server']) THEN\r\n            Exchange.ConnectToExchangeServer.ConnectToServer ServerVersion: Exchange.ServerVersion.Exchange2013_SP1 ServerAddress: Input_ExchangeObject['Server'] Timeout: 30 Connection=&gt; ExchangeConnection\r\n        ELSE IF IsNotEmpty(Input_ExchangeObject['Username']) THEN\r\n            Exchange.ConnectToExchangeServer.ConnectWithCredentials ServerVersion: Exchange.ServerVersion.Exchange2013_SP1 EmailAddress: Input_EmailAccount Domain: Input_ExchangeObject['Domain'] Username: Input_ExchangeObject['Username'] Password: Input_ExchangeObject['Password'] Timeout: 30 Connection=&gt; ExchangeConnection\r\n        ELSE\r\n            Exchange.ConnectToExchangeServer.Connect ServerVersion: Exchange.ServerVersion.Exchange2013_SP1 EmailAddress: Input_EmailAccount Timeout: 30 Connection=&gt; ExchangeConnection\r\n        END\r\n    ELSE\r\n        Exchange.ConnectToExchangeServer.Connect ServerVersion: Exchange.ServerVersion.Exchange2013_SP1 EmailAddress: Input_EmailAccount Timeout: 30 Connection=&gt; ExchangeConnection\r\n    END\r\n    IF IsNotEmpty(Input_Attachments) THEN\r\n        Exchange.SendMessage Connection: ExchangeConnection SendFrom: Input_EmailAccount SenderDisplayName: Input_DisplayName SendTo: Input_EmailRecipient CC: Input_EmailRecipientCC Subject: Input_EmailSubject Body: HTMLEmailBody IsBodyHtml: True Attachments: Input_Attachments\r\n    ELSE\r\n        Exchange.SendMessage Connection: ExchangeConnection SendFrom: Input_EmailAccount SenderDisplayName: Input_DisplayName SendTo: Input_EmailRecipient CC: Input_EmailRecipientCC Subject: Input_EmailSubject Body: HTMLEmailBody IsBodyHtml: True\r\n    END\r\nEND FUNCTION\r\nFUNCTION SendEmailViaOutlook GLOBAL\r\n    Outlook.Launch Instance=&gt; OutlookInstance\r\n    IF IsNotEmpty(Input_Attachments) THEN\r\n        Outlook.SendEmailThroughOutlook.SendEmail Instance: OutlookInstance Account: Input_EmailAccount SendTo: Input_EmailRecipient CC: Input_EmailRecipientCC Subject: Input_EmailSubject Body: HTMLEmailBody IsBodyHtml: True IsDraft: False Attachments: Input_Attachments\r\n    ELSE\r\n        Outlook.SendEmailThroughOutlook.SendEmail Instance: OutlookInstance Account: Input_EmailAccount SendTo: Input_EmailRecipient CC: Input_EmailRecipientCC Subject: Input_EmailSubject Body: HTMLEmailBody IsBodyHtml: True IsDraft: False\r\n    END\r\nEND FUNCTION\r\nFUNCTION SendEmailViaSMTP GLOBAL\r\n    IF IsNotEmpty(Input_Attachments) THEN\r\n        Email.SendEmail.AuthenticateAndSend SMTPServer: Input_SMTPObject['Server'] Port: Input_SMTPObject['Port'] EnableSSL: True Username: Input_SMTPObject['Username'] Password: Input_SMTPObject['Password'] AcceptUntrustedCertificates: True SendFrom: Input_EmailAccount SenderDisplayName: Input_DisplayName SendTo: Input_EmailRecipient CC: Input_EmailRecipientCC Subject: Input_EmailSubject Body: HTMLEmailBody IsBodyHtml: True Attachments: Input_Attachments\r\n    ELSE\r\n        Email.SendEmail.AuthenticateAndSend SMTPServer: Input_SMTPObject['Server'] Port: Input_SMTPObject['Port'] EnableSSL: True Username: Input_SMTPObject['Username'] Password: Input_SMTPObject['Password'] AcceptUntrustedCertificates: True SendFrom: Input_EmailAccount SenderDisplayName: Input_DisplayName SendTo: Input_EmailRecipient CC: Input_EmailRecipientCC Subject: Input_EmailSubject Body: HTMLEmailBody IsBodyHtml: True\r\n    END\r\nEND FUNCTION\r\nFUNCTION SetEmailBody GLOBAL\r\n    IF IsNotEmpty(Input_HTMLTemplatePath) THEN\r\n        File.ReadTextFromFile.ReadText File: Input_HTMLTemplatePath Encoding: File.TextFileEncoding.UTF8 Content=&gt; HTMLEmailBody\r\n        Text.Replace Text: HTMLEmailBody TextToFind: $'''{EmailMessage}''' IsRegEx: False IgnoreCase: False ReplaceWith: Input_EmailMessage ActivateEscapeSequences: False Result=&gt; HTMLEmailBody\r\n    ELSE\r\n        SET HTMLEmailBody TO Input_EmailMessage\r\n    END\r\nEND FUNCTION\r\n"</Definition>
      <SchemaVersion>2022.07</SchemaVersion>
      <DesktopFlowModules>[]</DesktopFlowModules>
      <PrimaryEntity>none</PrimaryEntity>
      <LocalizedNames>
        <LocalizedName languagecode="1033" description="PADFramework: EmailSender" />
      </LocalizedNames>
    </Workflow>
    <Workflow WorkflowId="{a08238ca-5ec4-422d-8eaf-1766d05ec8fe}" Name="PADFramework: BrowserCloser">
      <JsonFileName>/Workflows/PADFrameworkBrowserCloser-A08238CA-5EC4-422D-8EAF-1766D05EC8FE.json</JsonFileName>
      <Type>1</Type>
      <Subprocess>0</Subprocess>
      <Category>6</Category>
      <Mode>0</Mode>
      <Scope>4</Scope>
      <OnDemand>0</OnDemand>
      <TriggerOnCreate>0</TriggerOnCreate>
      <TriggerOnDelete>0</TriggerOnDelete>
      <AsyncAutodelete>0</AsyncAutodelete>
      <SyncWorkflowLogOnFailure>0</SyncWorkflowLogOnFailure>
      <StateCode>1</StateCode>
      <StatusCode>2</StatusCode>
      <RunAs>1</RunAs>
      <IsTransacted>1</IsTransacted>
      <IntroducedVersion>1.0</IntroducedVersion>
      <IsCustomizable>1</IsCustomizable>
      <BusinessProcessType>0</BusinessProcessType>
      <UIFlowType>2</UIFlowType>
      <IsCustomProcessingStepAllowedForOtherPublishers>1</IsCustomProcessingStepAllowedForOtherPublishers>
      <Metadata>{"isvalid":true,"schemaVersion":"ROBIN_20211012","containsActiveConnections":false}</Metadata>
      <Inputs>{"schema":{"required":[],"properties":{"Input_Browser":{"isOptional":true,"default":"","description":"Please provide the name of the browser to close. If no name is provided, all browser windows will be closed.\r\nAvailable options:\r\n- Chrome\r\n- Edge\r\n- Firefox","format":null,"title":"Input_Browser","type":"string","value":null},"Input_URL":{"isOptional":true,"default":"","description":"Please provide the URL of the browser tab to be closed.\r\nIf no URL is provided, all browser tabs will be closed.","format":null,"title":"Input_URL","type":"string","value":null}},"type":"object"}}</Inputs>
      <Outputs>{"schema":{"properties":{"Output_Message":{"default":"","description":"The flow response.","format":"password","title":"Output_Message","type":"string","value":null},"Output_Status":{"default":"","description":"The status of the flow. Uses standard HTTP status codes.","format":null,"title":"Output_Status","type":"number","value":null}},"type":"object"}}</Outputs>
      <Dependencies>{"childFlows":[],"workQueues":[]}</Dependencies>
      <ConnectionReferences>[]</ConnectionReferences>
      <Definition>"@@ConnectionString: ''\r\n@@Type: 'Local'\r\n@@DesktopType: 'local'\r\n@@DisplayName: 'Local computer'\r\nIMPORT 'controlRepo.appmask' AS appmask\r\nIMPORT 'imageRepo.imgrepo' AS imgrepo\r\n@SENSITIVE: [Output_Message]\r\n@INPUT Input_Browser : { 'Description': '''Please provide the name of the browser to close. If no name is provided, all browser windows will be closed.\r\nAvailable options:\r\n- Chrome\r\n- Edge\r\n- Firefox''', 'FriendlyName': 'Input_Browser', 'Type': 'String', 'IsOptional': True } \r\n@OUTPUT Output_Message : { 'Description': 'The flow response.', 'FriendlyName': 'Output_Message', 'Type': 'String' } \r\n@OUTPUT Output_Status : { 'Description': 'The status of the flow. Uses standard HTTP status codes.', 'FriendlyName': 'Output_Status', 'Type': 'Numeric' } \r\n@INPUT Input_URL : { 'Description': '''Please provide the URL of the browser tab to be closed.\r\nIf no URL is provided, all browser tabs will be closed.''', 'FriendlyName': 'Input_URL', 'Type': 'String', 'IsOptional': True } \r\nSET Output_Status TO 200\r\nBLOCK \r\nON BLOCK ERROR all\r\n\r\nEND\r\n    SWITCH Input_Browser\r\n        CASE = $'''Chrome'''\r\n            CALL CloseChrome\r\n        CASE = $'''Edge'''\r\n            CALL CloseEdge\r\n        CASE = $'''Firefox'''\r\n            CALL CloseFirefox\r\n        DEFAULT\r\n            SET Output_Message TO $'''Closing all browsers as the input browser name was either unrecognized or empty (\\\"%Input_Browser%\\\").'''\r\n            CALL CloseChrome\r\n            CALL CloseEdge\r\n            CALL CloseFirefox\r\n            GOTO 'Exit'\r\n    END\r\n    Text.AppendLine Text: Output_Message LineToAppend: $'''Successfully closed %Input_Browser%.''' Result=&gt; Output_Message\r\n    LABEL 'Exit'\r\n    EXIT Code: 0\r\nEND\r\nERROR =&gt; ErrorMessage\r\nSET Output_Status TO 500\r\nText.AppendLine Text: Output_Message LineToAppend: $'''Failed to close browser due to %ErrorMessage%''' Result=&gt; Output_Message\r\nFUNCTION CloseChrome GLOBAL\r\n    IF (UIAutomation.IfWindow.IsNotOpenByTitleClass Title: $'''*Google Chrome*''' Class: $'''*''') THEN\r\n        Text.AppendLine Text: Output_Message LineToAppend: $'''Browser %Input_Browser% is not open. Not closing it.''' Result=&gt; Output_Message\r\n        EXIT FUNCTION\r\n    ELSE\r\n        UIAutomation.CloseWindow.CloseByTitleClass Title: $'''*Google Chrome*''' Class: $'''*'''\r\n        ON ERROR\r\n\r\n        END\r\n    END\r\n    BLOCK \r\nON BLOCK ERROR all\r\n\r\nEND\r\n        IF IsNotEmpty(Input_URL) THEN\r\n            WebAutomation.LaunchChrome.AttachToChromeByUrl TabUrl: Input_URL AttachTimeout: 5 BrowserInstance=&gt; BrowserToClose\r\n            WebAutomation.CloseWebBrowser BrowserInstance: BrowserToClose\r\n            Text.AppendLine Text: Output_Message LineToAppend: $'''Successfully closed browser %Input_Browser% tab with URL %Input_URL%''' Result=&gt; Output_Message\r\n            EXIT FUNCTION\r\n        END\r\n        IF (UIAutomation.IfWindow.IsOpenByTitleClass Title: $'''*Google Chrome*''' Class: $'''*''') THEN\r\n            WebAutomation.LaunchChrome.AttachToForegroundChrome AttachTimeout: 5 BrowserInstance=&gt; BrowserToClose\r\n            WebAutomation.CloseWebBrowser BrowserInstance: BrowserToClose\r\n        END\r\n    END\r\n    IF (UIAutomation.IfWindow.IsOpenByTitleClass Title: $'''*Google Chrome*''' Class: $'''*''') THEN\r\n        LOOP LoopIndex FROM 0 TO 10 STEP 1\r\n            IF (System.IfProcess.ProcessIsRunning ProcessName: $'''chrome''') THEN\r\n            ON ERROR\r\n\r\n            END\r\n                System.TerminateProcess.TerminateProcessByName ProcessName: $'''chrome'''\r\n                ON ERROR\r\n\r\n                END\r\n                WAIT (System.WaitForProcess.ProcessToStop ProcessName: $'''chrome''') FOR 5 \r\n                ON ERROR\r\n\r\n                END\r\n            ELSE\r\n                EXIT LOOP\r\n            END\r\n        END\r\n    END\r\n    IF (UIAutomation.IfWindow.IsOpenByTitleClass Title: $'''*Google Chrome*''' Class: $'''*''') THEN\r\n        SET Output_Status TO 500\r\n        Text.AppendLine Text: Output_Message LineToAppend: $'''Failed to close Chrome.''' Result=&gt; Output_Message\r\n    END\r\nEND FUNCTION\r\nFUNCTION CloseEdge GLOBAL\r\n    IF (UIAutomation.IfWindow.IsNotOpenByTitleClass Title: $'''*Microsoft​ Edge*''' Class: $'''*''') THEN\r\n        Text.AppendLine Text: Output_Message LineToAppend: $'''Browser %Input_Browser% is not open. Not closing it.''' Result=&gt; Output_Message\r\n        EXIT FUNCTION\r\n    ELSE\r\n        UIAutomation.CloseWindow.CloseByTitleClass Title: $'''*Microsoft Edge*''' Class: $'''*'''\r\n        ON ERROR\r\n\r\n        END\r\n    END\r\n    BLOCK \r\nON BLOCK ERROR all\r\n\r\nEND\r\n        IF IsNotEmpty(Input_URL) THEN\r\n            WebAutomation.LaunchEdge.AttachToEdgeByUrl TabUrl: Input_URL AttachTimeout: 5 BrowserInstance=&gt; BrowserToClose\r\n            WebAutomation.CloseWebBrowser BrowserInstance: BrowserToClose\r\n            Text.AppendLine Text: Output_Message LineToAppend: $'''Successfully closed browser %Input_Browser% tab with URL %Input_URL%''' Result=&gt; Output_Message\r\n            EXIT FUNCTION\r\n        END\r\n        IF (UIAutomation.IfWindow.IsOpenByTitleClass Title: $'''*Microsoft​ Edge*''' Class: $'''*''') THEN\r\n            WebAutomation.LaunchEdge.AttachToTheForegroundEdge AttachTimeout: 5 BrowserInstance=&gt; BrowserToClose\r\n            WebAutomation.CloseWebBrowser BrowserInstance: BrowserToClose\r\n        END\r\n    END\r\n    IF (UIAutomation.IfWindow.IsOpenByTitleClass Title: $'''*Microsoft​ Edge*''' Class: $'''*''') THEN\r\n        LOOP LoopIndex FROM 0 TO 10 STEP 1\r\n            IF (System.IfProcess.ProcessIsRunning ProcessName: $'''msedge''') THEN\r\n            ON ERROR\r\n\r\n            END\r\n                System.TerminateProcess.TerminateProcessByName ProcessName: $'''msedge'''\r\n                ON ERROR\r\n\r\n                END\r\n                WAIT (System.WaitForProcess.ProcessToStop ProcessName: $'''msedge''') FOR 5 \r\n                ON ERROR\r\n\r\n                END\r\n            ELSE\r\n                EXIT LOOP\r\n            END\r\n        END\r\n    END\r\n    IF (UIAutomation.IfWindow.IsOpenByTitleClass Title: $'''*Microsoft​ Edge*''' Class: $'''*''') THEN\r\n        SET Output_Status TO 500\r\n        Text.AppendLine Text: Output_Message LineToAppend: $'''Failed to close Edge.''' Result=&gt; Output_Message\r\n    END\r\nEND FUNCTION\r\nFUNCTION CloseFirefox GLOBAL\r\n    IF (UIAutomation.IfWindow.IsNotOpenByTitleClass Title: $'''*Mozilla Firefox*''' Class: $'''MozillaWindowClass''') THEN\r\n        Text.AppendLine Text: Output_Message LineToAppend: $'''Browser %Input_Browser% is not open. Not closing it.''' Result=&gt; Output_Message\r\n        EXIT FUNCTION\r\n    ELSE\r\n        UIAutomation.CloseWindow.CloseByTitleClass Title: $'''*Mozilla Firefox*''' Class: $'''MozillaWindowClass'''\r\n        ON ERROR\r\n\r\n        END\r\n    END\r\n    BLOCK \r\nON BLOCK ERROR all\r\n\r\nEND\r\n        IF IsNotEmpty(Input_URL) THEN\r\n            WebAutomation.LaunchFirefox.AttachToFirefoxByUrl TabUrl: Input_URL AttachTimeout: 5 BrowserInstance=&gt; BrowserToClose\r\n            WebAutomation.CloseWebBrowser BrowserInstance: BrowserToClose\r\n            Text.AppendLine Text: Output_Message LineToAppend: $'''Successfully closed browser %Input_Browser% tab with URL %Input_URL%''' Result=&gt; Output_Message\r\n            EXIT FUNCTION\r\n        END\r\n        IF (UIAutomation.IfWindow.IsOpenByTitleClass Title: $'''*Mozilla Firefox*''' Class: $'''MozillaWindowClass''') THEN\r\n            WebAutomation.LaunchFirefox.AttachToForegroundFirefox AttachTimeout: 5 BrowserInstance=&gt; BrowserToClose\r\n            WebAutomation.CloseWebBrowser BrowserInstance: BrowserToClose\r\n        END\r\n    END\r\n    IF (UIAutomation.IfWindow.IsOpenByTitleClass Title: $'''*Mozilla Firefox*''' Class: $'''MozillaWindowClass''') THEN\r\n        LOOP LoopIndex FROM 0 TO 10 STEP 1\r\n            IF (System.IfProcess.ProcessIsRunning ProcessName: $'''firefox''') THEN\r\n            ON ERROR\r\n\r\n            END\r\n                System.TerminateProcess.TerminateProcessByName ProcessName: $'''firefox'''\r\n                ON ERROR\r\n\r\n                END\r\n                WAIT (System.WaitForProcess.ProcessToStop ProcessName: $'''firefox''') FOR 5 \r\n                ON ERROR\r\n\r\n                END\r\n            ELSE\r\n                EXIT LOOP\r\n            END\r\n        END\r\n    END\r\n    IF (UIAutomation.IfWindow.IsOpenByTitleClass Title: $'''*Mozilla Firefox*''' Class: $'''MozillaWindowClass''') THEN\r\n        SET Output_Status TO 500\r\n        Text.AppendLine Text: Output_Message LineToAppend: $'''Failed to close Firefox.''' Result=&gt; Output_Message\r\n    END\r\nEND FUNCTION\r\n"</Definition>
      <SchemaVersion>2022.06</SchemaVersion>
      <DesktopFlowModules>[]</DesktopFlowModules>
      <PrimaryEntity>none</PrimaryEntity>
      <LocalizedNames>
        <LocalizedName languagecode="1033" description="PADFramework: BrowserCloser" />
      </LocalizedNames>
    </Workflow>
    <Workflow WorkflowId="{2a80c691-72fd-4222-99f2-2a4ee54b2b71}" Name="PADFramework: Logger">
      <JsonFileName>/Workflows/PADFrameworkLogger-2A80C691-72FD-4222-99F2-2A4EE54B2B71.json</JsonFileName>
      <Type>1</Type>
      <Subprocess>0</Subprocess>
      <Category>6</Category>
      <Mode>0</Mode>
      <Scope>4</Scope>
      <OnDemand>0</OnDemand>
      <TriggerOnCreate>0</TriggerOnCreate>
      <TriggerOnDelete>0</TriggerOnDelete>
      <AsyncAutodelete>0</AsyncAutodelete>
      <SyncWorkflowLogOnFailure>0</SyncWorkflowLogOnFailure>
      <StateCode>1</StateCode>
      <StatusCode>2</StatusCode>
      <RunAs>1</RunAs>
      <IsTransacted>1</IsTransacted>
      <IntroducedVersion>1.0</IntroducedVersion>
      <IsCustomizable>1</IsCustomizable>
      <BusinessProcessType>0</BusinessProcessType>
      <UIFlowType>2</UIFlowType>
      <IsCustomProcessingStepAllowedForOtherPublishers>1</IsCustomProcessingStepAllowedForOtherPublishers>
      <Metadata>{"clientversion":"2.45.375.24159","isvalid":true,"$schema":"https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#","schemaVersion":"ROBIN_20211012","containsActiveConnections":true,"containsGptPredictActions":false,"containsActiveCopilotActions":false,"containsActiveWorkQueuesActions":false,"containsActiveLogMessageActions":false,"multipleRequestsState":0,"scriptType":0,"disableScreenshotCaptureOnError":false,"missingUiElementRepairType":null,"flowTimeout":null}</Metadata>
      <Inputs>{"schema":{"required":["Input_SubflowNamesList","Input_LoggerObject","Input_LogPath","Input_LogMessage","Input_LogType","Input_ErrorMessageList","Input_FlowName","Input_ProjectName"],"properties":{"Input_SubflowNamesList":{"isOptional":false,"default":"","description":"Provide the list of subflow names used in the flow invoking the Logger, so the Logger can fetch the last item from the list and use it as the name of the subflow that called it.","format":null,"title":"Input_SubflowNamesList","type":"array","value":"[\r\n]\r\n"},"Input_LoggerObject":{"isOptional":false,"default":"","description":"Provide the Logger Object that contains 'LogLevels' and 'ErrorLogLevels' as parameters for defining which levels of messages to log and which to include to the error log list.","format":null,"title":"Input_LoggerObject","type":"object","value":"{  }"},"Input_LogPath":{"isOptional":false,"default":"","description":"Provide the path for the log message to be written to.\r\nThe path is a universal variable regardless of the type of the logs being made:\r\nWhen logging to file, the path should contain a file path. \r\nWhen logging to a database, it should contain the table name, etc.","format":null,"title":"Input_LogPath","type":"string","value":""},"Input_LogMessage":{"isOptional":false,"default":"","description":"Provide the message to be logged.","format":null,"title":"Input_LogMessage","type":"string","value":""},"Input_LogType":{"isOptional":false,"default":"","description":"Provide the type of log to be created.\r\nAvailable options are:\r\n- Log File\r\n- CSV File\r\n- Database\r\n- SharePoint List","format":null,"title":"Input_LogType","type":"string","value":""},"Input_ErrorMessageList":{"isOptional":false,"default":"","description":"Provide the list of existing error messages.","format":"password","title":"Input_ErrorMessageList","type":"array","value":null},"Input_FlowName":{"isOptional":false,"default":"","description":"Provide the name of the flow that invokes the Logger.","format":null,"title":"Input_FlowName","type":"string","value":""},"Input_ProjectName":{"isOptional":false,"default":"","description":"Provide the name of the project that the flow invoking the Logger belongs to.","format":null,"title":"Input_ProjectName","type":"string","value":""},"Input_LogAddress":{"isOptional":true,"default":"","description":"Provide the address to log the log message to.\r\nThis is optional when logging to files, but required when log type is:\r\na) Database - This should then contain the connection string.\r\nb) SharePoint List - This should then contain the site address.","format":"password","title":"Input_LogAddress","type":"string","value":null}},"type":"object"}}</Inputs>
      <Outputs>{"schema":{"properties":{"Output_ErrorMessageList":{"default":"","description":"Returns the error message list after adding the current message, if it was includided in the \"ErrorLogLevels\" property of the logger object.","format":"password","title":"Output_ErrorMessageList","type":"array","value":null},"Output_ErrorMessage":{"default":"","description":"Returns any errors that may have occurred during the flow run.","format":"password","title":"Output_ErrorMessage","type":"string","value":null}},"type":"object"}}</Outputs>
      <Dependencies>{"childFlows":[],"workQueues":[]}</Dependencies>
      <ConnectionReferences>[{"api":{"name":"/providers/Microsoft.PowerApps/apis/shared_sharepointonline"},"connectionReferenceLogicalName":"def_PADFramework_SharePoint","displayName":"PADFramework_SharePoint","isDisabled":false,"name":"shared-sharepointonl-677e875a-ae40-406d-852e-d2b04c7a981b","padInternalId":"2416a92f-89d3-403f-9e70-b61bce2dd7d8","isEmbedded":false}]</ConnectionReferences>
      <Definition>"@@ConnectionString: ''\r\n@@Type: 'Local'\r\n@@DesktopType: 'local'\r\n@@DisplayName: 'Local computer'\r\nIMPORT 'controlRepo.appmask' AS appmask\r\nIMPORT 'imageRepo.imgrepo' AS imgrepo\r\n@SENSITIVE: [Input_LogAddress, Input_ErrorMessageList, Output_ErrorMessage, Output_ErrorMessageList]\r\n@INPUT Input_SubflowNamesList : { 'Description': 'Provide the list of subflow names used in the flow invoking the Logger, so the Logger can fetch the last item from the list and use it as the name of the subflow that called it.', 'FriendlyName': 'Input_SubflowNamesList', 'Type': 'List', 'IsOptional': False, 'DefaultValue': [] } \r\n@INPUT Input_LoggerObject : { 'Description': 'Provide the Logger Object that contains \\'LogLevels\\' and \\'ErrorLogLevels\\' as parameters for defining which levels of messages to log and which to include to the error log list.', 'FriendlyName': 'Input_LoggerObject', 'Type': 'CustomObject', 'IsOptional': False, 'DefaultValue': {{ }} } \r\n@INPUT Input_LogPath : { 'Description': '''Provide the path for the log message to be written to.\r\nThe path is a universal variable regardless of the type of the logs being made:\r\nWhen logging to file, the path should contain a file path. \r\nWhen logging to a database, it should contain the table name, etc.''', 'FriendlyName': 'Input_LogPath', 'Type': 'String', 'IsOptional': False, 'DefaultValue': '' } \r\n@INPUT Input_LogMessage : { 'Description': 'Provide the message to be logged.', 'FriendlyName': 'Input_LogMessage', 'Type': 'String', 'IsOptional': False, 'DefaultValue': '' } \r\n@INPUT Input_LogType : { 'Description': '''Provide the type of log to be created.\r\nAvailable options are:\r\n- Log File\r\n- CSV File\r\n- Database\r\n- SharePoint List''', 'FriendlyName': 'Input_LogType', 'Type': 'String', 'IsOptional': False, 'DefaultValue': '' } \r\n@INPUT Input_ErrorMessageList : { 'Description': 'Provide the list of existing error messages.', 'FriendlyName': 'Input_ErrorMessageList', 'Type': 'List', 'IsOptional': False, 'DefaultValue': [] } \r\n@OUTPUT Output_ErrorMessageList : { 'Description': 'Returns the error message list after adding the current message, if it was includided in the \\\"ErrorLogLevels\\\" property of the logger object.', 'FriendlyName': 'Output_ErrorMessageList', 'Type': 'List' } \r\n@OUTPUT Output_ErrorMessage : { 'Description': 'Returns any errors that may have occurred during the flow run.', 'FriendlyName': 'Output_ErrorMessage', 'Type': 'String' } \r\n@INPUT Input_FlowName : { 'Description': 'Provide the name of the flow that invokes the Logger.', 'FriendlyName': 'Input_FlowName', 'Type': 'String', 'IsOptional': False, 'DefaultValue': '' } \r\n@INPUT Input_ProjectName : { 'Description': 'Provide the name of the project that the flow invoking the Logger belongs to.', 'FriendlyName': 'Input_ProjectName', 'Type': 'String', 'IsOptional': False, 'DefaultValue': '' } \r\n@INPUT Input_LogAddress : { 'Description': '''Provide the address to log the log message to.\r\nThis is optional when logging to files, but required when log type is:\r\na) Database - This should then contain the connection string.\r\nb) SharePoint List - This should then contain the site address.''', 'FriendlyName': 'Input_LogAddress', 'Type': 'String', 'IsOptional': True } \r\nBLOCK \r\nON BLOCK ERROR all\r\n\r\nEND\r\n    CALL Init\r\n    SWITCH Input_LogType\r\n        CASE = $'''Log File'''\r\n            CALL LogToFile\r\n        CASE = $'''CSV File'''\r\n            CALL LogToCSV\r\n        CASE = $'''Database'''\r\n            CALL LogToDatabase\r\n        CASE = $'''SharePoint List'''\r\n            CALL LogToSharePoint\r\n        DEFAULT\r\n            SET Output_ErrorMessage TO $'''The log type \\'%Input_LogType%\\' is not supported by the Logger flow.'''\r\n    END\r\n    Variables.MergeLists FirstList: Input_ErrorMessageList SecondList: Output_ErrorMessageList OutputList=&gt; Output_ErrorMessageList\r\n    IF Contains(Input_LoggerObject['ErrorLogLevels'], Log_Level, True) THEN\r\n        SET Log_Message TO $'''\\\"Level\\\": \\\"%Log_Level%\\\", \\\"Timestamp\\\": \\\"%Log_Timestamp%\\\", \\\"Subflow\\\": \\\"%Log_SubflowName%\\\", \\\"Message\\\": \\\"%Log_Message%\\\"'''\r\n        Variables.AddItemToList Item: $'''%Log_Message%&lt;br&gt;''' List: Output_ErrorMessageList\r\n    END\r\n    EXIT Code: 0\r\nEND\r\nERROR =&gt; Output_ErrorMessage\r\nFUNCTION LogToFile GLOBAL\r\n    Text.ConvertDateTimeToText.FromCustomDateTime DateTime: CurrentDateTime CustomFormat: $'''yyyy-MM-ddTHH:mm:ss.fff''' Result=&gt; Log_Timestamp\r\n    IF Contains(Input_LoggerObject['LogLevels'], Log_Level, True) THEN\r\n        File.WriteText File: Input_LogPath TextToWrite: $'''{\\\"Level\\\": \\\"%Log_Level%\\\", \\\"Timestamp\\\": \\\"%Log_Timestamp%\\\", \\\"Project\\\": \\\"%Input_ProjectName%\\\", \\\"Flow\\\": \\\"%Input_FlowName%\\\", \\\"Subflow\\\": \\\"%Log_SubflowName%\\\", \\\"Message\\\": \\\"%Log_Message%\\\"}''' AppendNewLine: True IfFileExists: File.IfFileExists.Append Encoding: File.FileEncoding.UTF8\r\n    END\r\nEND FUNCTION\r\nFUNCTION Init GLOBAL\r\n    DateTime.GetCurrentDateTime.Local DateTimeFormat: DateTime.DateTimeFormat.DateAndTime CurrentDateTime=&gt; CurrentDateTime\r\n    Text.SplitText.SplitWithDelimiter Text: Input_LogMessage CustomDelimiter: $''';;;''' IsRegEx: False Result=&gt; Log_MessageList\r\n    IF Log_MessageList.Count &lt; 2 THEN\r\n        SET Log_Level TO $'''WARN'''\r\n        SET Log_Message TO $'''Found the list of expected message count to be less than 2. Cannot parse the message object correctly. Original message: %Log_Message%'''\r\n    ELSE\r\n        SET Log_Level TO Log_MessageList[0]\r\n        SET Log_Message TO Log_MessageList[1]\r\n    END\r\n    Text.Replace Text: Log_Message TextToFind: $'''[\\\\r\\\\n]''' IsRegex: True IgnoreCase: False ReplaceWith: $'''%' '%''' ActivateEscapeSequences: False Result=&gt; Log_Message\r\n    Text.Replace Text: Log_Message TextToFind: $'''\\\\''' IsRegex: False IgnoreCase: False ReplaceWith: $'''/''' ActivateEscapeSequences: False Result=&gt; Log_Message\r\n    Text.Replace Text: Log_Message TextToFind: $'''\\\"''' IsRegex: False IgnoreCase: False ReplaceWith: $'''\\'''' ActivateEscapeSequences: False Result=&gt; Log_Message\r\n    SET Log_SubflowName TO $'''Unknown'''\r\n    IF Input_SubflowNamesList.Count &lt;&gt; 0 THEN\r\n        SET Log_SubflowName TO Input_SubflowNamesList[Input_SubflowNamesList.Count - 1]\r\n    END\r\n    System.GetEnvironmentVariable.GetEnvironmentVariable Name: $'''COMPUTERNAME''' Value=&gt; Log_MachineName\r\nEND FUNCTION\r\nFUNCTION LogToCSV GLOBAL\r\n    Text.ConvertDateTimeToText.FromCustomDateTime DateTime: CurrentDateTime CustomFormat: $'''yyyy-MM-ddTHH:mm:ss.fff''' Result=&gt; Log_Timestamp\r\n    IF (File.IfFile.DoesNotExist File: Input_LogPath) THEN\r\n        # Creating a file with headers if it doesn't exist yet.\r\n        File.WriteToCSVFile.WriteCSV VariableToWrite: {['Level', 'Timestamp', 'Project', 'Flow', 'Subflow', 'Message'] } CSVFile: Input_LogPath CsvFileEncoding: File.CSVEncoding.UTF8 IncludeColumnNames: False IfFileExists: File.IfFileExists.Overwrite ColumnsSeparator: File.CSVColumnsSeparator.Semicolon\r\n    END\r\n    IF Contains(Input_LoggerObject['LogLevels'], Log_Level, True) THEN\r\n        File.WriteToCSVFile.WriteCSV VariableToWrite: {[Log_Level, Log_Timestamp, Input_ProjectName, Input_FlowName, Log_SubflowName, Log_Message] } CSVFile: Input_LogPath CsvFileEncoding: File.CSVEncoding.UTF8 IncludeColumnNames: False IfFileExists: File.IfFileExists.Append ColumnsSeparator: File.CSVColumnsSeparator.Semicolon\r\n    END\r\nEND FUNCTION\r\nFUNCTION LogToDatabase GLOBAL\r\n    IF IsEmpty(Input_LogAddress) THEN\r\n        SET ErrorMessage TO $'''Empty \\'Input_LogAddress\\' value provided. It is required when Log Type is \\'%Input_LogType%\\'.'''\r\n        EXIT FUNCTION\r\n    END\r\n    @@copilotGeneratedAction: 'False'\r\nDatabase.ExecuteSqlStatement.ConnectAndExecute ConnectionString: Input_LogAddress Statement: $'''INSERT INTO %Input_LogPath% (Level, Machine, Project, Flow, Subflow, Message)\r\nVALUES (\\'%Log_Level%\\', \\'%Log_MachineName%\\', \\'%Input_ProjectName%\\', \\'%Input_FlowName%\\', \\'%Log_SubflowName%\\',\\'%Log_Message%\\')''' Timeout: 45\r\nEND FUNCTION\r\nFUNCTION LogToSharePoint GLOBAL\r\n    IF IsEmpty(Input_LogAddress) THEN\r\n        SET ErrorMessage TO $'''Empty \\'Input_LogAddress\\' value provided. It is required when Log Type is \\'%Input_LogType%\\'.'''\r\n        EXIT FUNCTION\r\n    END\r\n    Text.ConvertDateTimeToText.FromCustomDateTime DateTime: CurrentDateTime CustomFormat: $'''yyyy-MM-dd HH:mm:ss''' Result=&gt; Log_Timestamp\r\n    @@dataset: '%Input_LogAddress%'\r\n@@table: '%Input_LogAddress%'\r\n@@view: ''\r\n@@'InputSchema:item': '903008207'\r\n@@'OutputSchema:PostItemResponse': '-1550202392'\r\n@@connectionDisplayName: 'PADFramework_SharePoint'\r\nExternal.InvokeCloudConnector Connection: '2416a92f-89d3-403f-9e70-b61bce2dd7d8' ConnectorId: '/providers/Microsoft.PowerApps/apis/shared_sharepointonline' OperationId: 'PostItem' @dataset: Input_LogAddress @table: Input_LogPath @'item/Title': Log_Level @'item/Timestamp': Log_Timestamp @'item/Machine': Log_MachineName @'item/Project': Input_ProjectName @'item/Flow': Input_FlowName @'item/Subflow': Log_SubflowName @'item/Message': Log_Message @'item/FlowRunURL': $'''%''%''' @PostItemResponse=&gt; PostItemResponse\r\nEND FUNCTION\r\nFUNCTION LogToDatabaseSP GLOBAL\r\n    IF IsEmpty(Input_LogAddress) THEN\r\n        SET ErrorMessage TO $'''Empty \\'Input_LogAddress\\' value provided. It is required when Log Type is \\'%Input_LogType%\\'.'''\r\n        EXIT FUNCTION\r\n    END\r\n    @@copilotGeneratedAction: 'False'\r\nDatabase.ExecuteSqlStatement.ConnectAndExecute ConnectionString: Input_LogAddress Statement: $'''EXEC %Input_LogPath% @Level = \\'%Log_Level%\\', @Machine = \\'%Log_MachineName%\\', @Project = \\'%Input_ProjectName%\\', @Flow = \\'%Input_FlowName%\\', @Subflow = \\'%Log_SubflowName%\\', @Message = \\'%Log_Message%\\';''' Timeout: 45 Result=&gt; Table_SPResult\r\n    IF Table_SPResult.IsEmpty = True THEN\r\n        SET ErrorMessage TO $'''The database returned nothing when attempting to log the following message \\'%Input_LogMessage%\\''''\r\n    ELSE IF Table_SPResult[0]['Status'] &lt; 0 THEN\r\n        SET ErrorMessage TO $'''Status: %Table_SPResult[0]['Status']%, Message: %Table_SPResult[0]['Message']%'''\r\n    END\r\nEND FUNCTION\r\n"</Definition>
      <SchemaVersion>2022.07</SchemaVersion>
      <DesktopFlowModules>[]</DesktopFlowModules>
      <PrimaryEntity>none</PrimaryEntity>
      <LocalizedNames>
        <LocalizedName languagecode="1033" description="PADFramework: Logger" />
      </LocalizedNames>
    </Workflow>
    <Workflow WorkflowId="{aa0a967a-5f8c-4891-b6c1-87536e7f3d0b}" Name="PADFramework: BrowserLauncher">
      <JsonFileName>/Workflows/PADFrameworkBrowserLauncher-AA0A967A-5F8C-4891-B6C1-87536E7F3D0B.json</JsonFileName>
      <Type>1</Type>
      <Subprocess>0</Subprocess>
      <Category>6</Category>
      <Mode>0</Mode>
      <Scope>4</Scope>
      <OnDemand>0</OnDemand>
      <TriggerOnCreate>0</TriggerOnCreate>
      <TriggerOnDelete>0</TriggerOnDelete>
      <AsyncAutodelete>0</AsyncAutodelete>
      <SyncWorkflowLogOnFailure>0</SyncWorkflowLogOnFailure>
      <StateCode>1</StateCode>
      <StatusCode>2</StatusCode>
      <RunAs>1</RunAs>
      <IsTransacted>1</IsTransacted>
      <IntroducedVersion>1.0</IntroducedVersion>
      <IsCustomizable>1</IsCustomizable>
      <BusinessProcessType>0</BusinessProcessType>
      <UIFlowType>2</UIFlowType>
      <IsCustomProcessingStepAllowedForOtherPublishers>1</IsCustomProcessingStepAllowedForOtherPublishers>
      <Metadata>{"isvalid":true,"schemaVersion":"ROBIN_20211012","containsActiveConnections":false}</Metadata>
      <Inputs>{"schema":{"required":["Input_Browser","Input_URL","Input_IncognitoMode"],"properties":{"Input_Browser":{"isOptional":false,"default":"","description":"Please provide the browser to be launched.\r\nAvailable options are: \r\n- Chrome\r\n- Edge\r\n- Firefox\r\n- Internet Explorer","format":null,"title":"Input_Browser","type":"string","value":""},"Input_URL":{"isOptional":false,"default":"","description":"Please provide the URL to navigate to.","format":null,"title":"Input_URL","type":"string","value":""},"Input_IncognitoMode":{"isOptional":false,"default":"","description":"Please select whether or not the browser should be launched in Incognito/Private mode.","format":null,"title":"Input_IncognitoMode","type":"boolean","value":"False"}},"type":"object"}}</Inputs>
      <Outputs>{"schema":{"properties":{"Output_Status":{"default":"","description":"The status of the flow. Uses standard HTTP status codes.","format":null,"title":"Output_Status","type":"number","value":null},"Output_Message":{"default":"","description":"The flow response.","format":"password","title":"Output_Message","type":"string","value":null}},"type":"object"}}</Outputs>
      <Dependencies>{"childFlows":[],"workQueues":[]}</Dependencies>
      <ConnectionReferences>[]</ConnectionReferences>
      <Definition>"@@ConnectionString: ''\r\n@@Type: 'Local'\r\n@@DesktopType: 'local'\r\n@@DisplayName: 'Local computer'\r\nIMPORT 'controlRepo.appmask' AS appmask\r\nIMPORT 'imageRepo.imgrepo' AS imgrepo\r\n@SENSITIVE: [Output_Message]\r\n@INPUT Input_Browser : { 'Description': '''Please provide the browser to be launched.\r\nAvailable options are: \r\n- Chrome\r\n- Edge\r\n- Firefox\r\n- Internet Explorer''', 'FriendlyName': 'Input_Browser', 'Type': 'String', 'IsOptional': False, 'DefaultValue': '' } \r\n@OUTPUT Output_Status : { 'Description': 'The status of the flow. Uses standard HTTP status codes.', 'FriendlyName': 'Output_Status', 'Type': 'Numeric' } \r\n@OUTPUT Output_Message : { 'Description': 'The flow response.', 'FriendlyName': 'Output_Message', 'Type': 'String' } \r\n@INPUT Input_URL : { 'Description': 'Please provide the URL to navigate to.', 'FriendlyName': 'Input_URL', 'Type': 'String', 'IsOptional': False, 'DefaultValue': '' } \r\n@INPUT Input_IncognitoMode : { 'Description': 'Please select whether or not the browser should be launched in Incognito/Private mode.', 'FriendlyName': 'Input_IncognitoMode', 'Type': 'Bool', 'IsOptional': False, 'DefaultValue': False } \r\n# Setting the status and message to 'Bad Request' by default in case the flow fails.\r\nSET Output_Status TO 400\r\nSET Output_Message TO $'''Bad Request'''\r\nBLOCK \r\nON BLOCK ERROR all\r\n\r\nEND\r\n    SET CommandLineArguments TO $'''www.google.com'''\r\n    SWITCH Input_Browser\r\n        CASE = $'''Chrome'''\r\n            CALL LaunchChrome\r\n        CASE = $'''Edge'''\r\n            CALL LaunchEdge\r\n        CASE = $'''Firefox'''\r\n            CALL LaunchFirefox\r\n        DEFAULT\r\n            SET Output_Status TO 400\r\n            SET Output_Message TO $'''Browser \\'%Input_Browser%\\' is not supported by the Browser Launcher flow.'''\r\n            GOTO 'Exit'\r\n    END\r\n    WebAutomation.GoToWebPage.GoToWebPageCloseDialog BrowserInstance: BrowserInstance Url: Input_URL WaitForPageToLoadTimeout: 60\r\n    SET Output_Status TO 200\r\n    SET Output_Message TO $'''Successfully launched %Input_Browser% and navigated to %Input_URL%'''\r\n    LABEL 'Exit'\r\n    EXIT Code: 0\r\nEND\r\nERROR =&gt; ErrorMessage\r\nSET Output_Status TO 500\r\nSET Output_Message TO $'''Failed to launch %Input_Browser% browser due to %ErrorMessage%'''\r\nFUNCTION LaunchChrome GLOBAL\r\n    IF Input_IncognitoMode = True THEN\r\n        SET CommandLineArguments TO $'''%CommandLineArguments% -incognito'''\r\n    END\r\n    System.RunApplication.RunApplication ApplicationPath: $'''chrome''' CommandLineArguments: CommandLineArguments WindowStyle: System.ProcessWindowStyle.Maximized ProcessId=&gt; AppProcessId\r\n    WAIT (UIAutomation.WaitForWindow.ToOpenByTitleClass Title: $'''Google*''' Class: $'''Chrome_WidgetWin_1''' FocusWindow: True) FOR 30\r\n    WebAutomation.LaunchChrome.AttachToChromeByTitle TabTitle: $'''Google''' AttachTimeout: 5 BrowserInstance=&gt; BrowserInstance\r\nEND FUNCTION\r\nFUNCTION LaunchEdge GLOBAL\r\n    IF Input_IncognitoMode = True THEN\r\n        SET CommandLineArguments TO $'''%CommandLineArguments% -inprivate'''\r\n    END\r\n    System.RunApplication.RunApplication ApplicationPath: $'''msedge''' CommandLineArguments: CommandLineArguments WindowStyle: System.ProcessWindowStyle.Maximized ProcessId=&gt; AppProcessId\r\n    WAIT (UIAutomation.WaitForWindow.ToOpenByTitleClass Title: $'''Google*''' Class: $'''Chrome_WidgetWin_1''' FocusWindow: True) FOR 30\r\n    WebAutomation.LaunchEdge.AttachToEdgeByTitle TabTitle: $'''Google''' AttachTimeout: 5 BrowserInstance=&gt; BrowserInstance\r\nEND FUNCTION\r\nFUNCTION LaunchFirefox GLOBAL\r\n    IF Input_IncognitoMode = True THEN\r\n        SET CommandLineArguments TO $'''%CommandLineArguments% -private'''\r\n    END\r\n    System.RunApplication.RunApplication ApplicationPath: $'''firefox''' CommandLineArguments: CommandLineArguments WindowStyle: System.ProcessWindowStyle.Maximized ProcessId=&gt; AppProcessId\r\n    WAIT (UIAutomation.WaitForWindow.ToOpenByTitleClass Title: $'''Google*''' Class: $'''MozillaWindowClass''' FocusWindow: True) FOR 30\r\n    WebAutomation.LaunchFirefox.AttachToFirefoxByTitle TabTitle: $'''Google''' AttachTimeout: 5 BrowserInstance=&gt; BrowserInstance\r\nEND FUNCTION\r\n"</Definition>
      <SchemaVersion>2022.06</SchemaVersion>
      <DesktopFlowModules>[]</DesktopFlowModules>
      <PrimaryEntity>none</PrimaryEntity>
      <LocalizedNames>
        <LocalizedName languagecode="1033" description="PADFramework: BrowserLauncher" />
      </LocalizedNames>
    </Workflow>
    <Workflow WorkflowId="{c515285c-5a5d-4379-b50b-96837d0796d2}" Name="PADFramework: EmailSenderO365Outlook">
      <JsonFileName>/Workflows/PADFrameworkEmailSenderO365Outlook-C515285C-5A5D-4379-B50B-96837D0796D2.json</JsonFileName>
      <Type>1</Type>
      <Subprocess>0</Subprocess>
      <Category>6</Category>
      <Mode>0</Mode>
      <Scope>4</Scope>
      <OnDemand>0</OnDemand>
      <TriggerOnCreate>0</TriggerOnCreate>
      <TriggerOnDelete>0</TriggerOnDelete>
      <AsyncAutodelete>0</AsyncAutodelete>
      <SyncWorkflowLogOnFailure>0</SyncWorkflowLogOnFailure>
      <StateCode>1</StateCode>
      <StatusCode>2</StatusCode>
      <RunAs>1</RunAs>
      <IsTransacted>1</IsTransacted>
      <IntroducedVersion>1.0</IntroducedVersion>
      <IsCustomizable>1</IsCustomizable>
      <BusinessProcessType>0</BusinessProcessType>
      <UIFlowType>2</UIFlowType>
      <IsCustomProcessingStepAllowedForOtherPublishers>1</IsCustomProcessingStepAllowedForOtherPublishers>
      <Metadata>{"clientversion":"2.45.00410.24179","isvalid":true,"$schema":"https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#","schemaVersion":"ROBIN_20211012","containsActiveConnections":true,"containsGptPredictActions":false,"containsActiveCopilotActions":false,"containsActiveWorkQueuesActions":false,"containsActiveLogMessageActions":false,"multipleRequestsState":0,"scriptType":0,"disableScreenshotCaptureOnError":false,"missingUiElementRepairType":null,"flowTimeout":null}</Metadata>
      <Inputs>{"schema":{"required":["Input_EmailMessage","Input_EmailRecipient","Input_EmailSubject","Input_HTMLTemplatePath"],"properties":{"Input_Attachments":{"isOptional":true,"default":"","description":"Provide attachments (if any) to be added to the email message in a form of a list of file paths.","format":null,"title":"Input_Attachments","type":"array","value":"[\r\n]\r\n"},"Input_EmailMessage":{"isOptional":false,"default":"","description":"Please provide the email message to be sent.\r\nThe message should be formatted as HTML. Otherwise, it will be sent as a single blob of text inside an HTML message.","format":"password","title":"Input_EmailMessage","type":"string","value":null},"Input_EmailRecipient":{"isOptional":false,"default":"","description":"Provide the recipient(s) to send the email to.\r\nIf multiple recipients are provided, separate them by a semicolon.","format":"password","title":"Input_EmailRecipient","type":"string","value":null},"Input_EmailRecipientCC":{"isOptional":true,"default":"","description":"Provide CC recipient(s) of the email (optional)\r\nIf multiple recipients are provided, separate them by a semicolon.","format":"password","title":"Input_EmailRecipientCC","type":"string","value":null},"Input_EmailSubject":{"isOptional":false,"default":"","description":"Provide the subject text for the email.","format":null,"title":"Input_EmailSubject","type":"string","value":""},"Input_HTMLTemplatePath":{"isOptional":false,"default":"","description":"Provide the path to the HTML template for the email body.","format":null,"title":"Input_HTMLTemplatePath","type":"string","value":""}},"type":"object"}}</Inputs>
      <Outputs>{"schema":{"properties":{"Output_Message":{"default":"","description":"The flow response.","format":"password","title":"Output_Message","type":"string","value":null},"Output_Status":{"default":"","description":"The status of the flow. Uses standard HTTP status codes.","format":null,"title":"Output_Status","type":"number","value":null}},"type":"object"}}</Outputs>
      <Dependencies>{"childFlows":[],"workQueues":[]}</Dependencies>
      <ConnectionReferences>[{"api":{"name":"/providers/Microsoft.PowerApps/apis/shared_office365"},"connectionReferenceLogicalName":"def_PADFramework_Office365Outlook","displayName":"PADFramework_Office365Outlook","isDisabled":false,"name":"17587d78fc4f49da8dd2b1a564f6044d","padInternalId":"f8c42f8b-23a9-4a78-90c2-5fe372fdc8ed","isEmbedded":false}]</ConnectionReferences>
      <Definition>"@@ConnectionString: ''\r\n@@Type: 'Local'\r\n@@DesktopType: 'local'\r\n@@DisplayName: 'Local computer'\r\nIMPORT 'controlRepo.appmask' AS appmask\r\nIMPORT 'imageRepo.imgrepo' AS imgrepo\r\n@SENSITIVE: [Input_EmailMessage, Input_EmailRecipient, Input_EmailRecipientCC, Output_Message]\r\n@INPUT Input_Attachments : { 'Description': 'Provide attachments (if any) to be added to the email message in a form of a list of file paths.', 'FriendlyName': 'Input_Attachments', 'Type': 'List', 'IsOptional': True, 'DefaultValue': [] } \r\n@INPUT Input_EmailMessage : { 'Description': '''Please provide the email message to be sent.\r\nThe message should be formatted as HTML. Otherwise, it will be sent as a single blob of text inside an HTML message.''', 'FriendlyName': 'Input_EmailMessage', 'Type': 'String', 'IsOptional': False, 'DefaultValue': '' } \r\n@INPUT Input_EmailRecipient : { 'Description': '''Provide the recipient(s) to send the email to.\r\nIf multiple recipients are provided, separate them by a semicolon.''', 'FriendlyName': 'Input_EmailRecipient', 'Type': 'String', 'IsOptional': False, 'DefaultValue': '' } \r\n@INPUT Input_EmailRecipientCC : { 'Description': '''Provide CC recipient(s) of the email (optional)\r\nIf multiple recipients are provided, separate them by a semicolon.''', 'FriendlyName': 'Input_EmailRecipientCC', 'Type': 'String', 'IsOptional': True } \r\n@INPUT Input_EmailSubject : { 'Description': 'Provide the subject text for the email.', 'FriendlyName': 'Input_EmailSubject', 'Type': 'String', 'IsOptional': False, 'DefaultValue': '' } \r\n@INPUT Input_HTMLTemplatePath : { 'Description': 'Provide the path to the HTML template for the email body.', 'FriendlyName': 'Input_HTMLTemplatePath', 'Type': 'String', 'IsOptional': False, 'DefaultValue': '' } \r\n@OUTPUT Output_Message : { 'Description': 'The flow response.', 'FriendlyName': 'Output_Message', 'Type': 'String' } \r\n@OUTPUT Output_Status : { 'Description': 'The status of the flow. Uses standard HTTP status codes.', 'FriendlyName': 'Output_Status', 'Type': 'Numeric' } \r\n# Setting the status and message to 'Bad Request' by default in case the flow fails.\r\nSET Output_Status TO 400\r\nSET Output_Message TO $'''Bad Request'''\r\nBLOCK \r\nON BLOCK ERROR all\r\n\r\nEND\r\n    CALL SetEmailBody\r\n    IF IsNotEmpty(Input_Attachments) THEN\r\n        CALL CreateAttachmentsObject\r\n        @@'emailMessage/Sensitivity': ''\r\n@@connectionDisplayName: 'PADFramework_Office365Outlook'\r\nExternal.InvokeCloudConnector Connection: 'f8c42f8b-23a9-4a78-90c2-5fe372fdc8ed' ConnectorId: '/providers/Microsoft.PowerApps/apis/shared_office365' OperationId: 'SendEmailV2' @'emailMessage/To': Input_EmailRecipient @'emailMessage/Subject': Input_EmailSubject @'emailMessage/Body': HTMLEmailBody @'emailMessage/Cc': Input_EmailRecipientCC @'emailMessage/Attachments': List_AttachmentObjects\r\n    ELSE\r\n        @@'emailMessage/Sensitivity': ''\r\n@@connectionDisplayName: 'PADFramework_Office365Outlook'\r\nExternal.InvokeCloudConnector Connection: 'f8c42f8b-23a9-4a78-90c2-5fe372fdc8ed' ConnectorId: '/providers/Microsoft.PowerApps/apis/shared_office365' OperationId: 'SendEmailV2' @'emailMessage/To': Input_EmailRecipient @'emailMessage/Subject': Input_EmailSubject @'emailMessage/Body': HTMLEmailBody @'emailMessage/Cc': Input_EmailRecipientCC\r\n    END\r\n    SET Output_Status TO 200\r\n    SET Output_Message TO $'''Successfully sent an email with subject text \\'%Input_EmailSubject%\\' to \\'%Input_EmailRecipient%\\''''\r\n    LABEL 'Exit'\r\n    EXIT Code: 0\r\nEND\r\nERROR =&gt; ErrorMessage\r\nSET Output_Status TO 500\r\nSET Output_Message TO $'''Failed to send an email due to %ErrorMessage%'''\r\nFUNCTION SetEmailBody GLOBAL\r\n    IF IsNotEmpty(Input_HTMLTemplatePath) THEN\r\n        File.ReadTextFromFile.ReadText File: Input_HTMLTemplatePath Encoding: File.TextFileEncoding.UTF8 Content=&gt; HTMLEmailBody\r\n        Text.Replace Text: HTMLEmailBody TextToFind: $'''{EmailMessage}''' IsRegEx: False IgnoreCase: False ReplaceWith: Input_EmailMessage ActivateEscapeSequences: False Result=&gt; HTMLEmailBody\r\n    ELSE\r\n        SET HTMLEmailBody TO Input_EmailMessage\r\n    END\r\nEND FUNCTION\r\nFUNCTION CreateAttachmentsObject GLOBAL\r\n    Variables.CreateNewList List=&gt; List_AttachmentObjects\r\n    LOOP FOREACH CurrentAttachment IN Input_Attachments\r\n        File.ConvertToBinary File: CurrentAttachment BinaryData=&gt; BinaryData\r\n        File.GetPathPart File: CurrentAttachment FileName=&gt; FileName\r\n        Variables.AddItemToList Item: { 'Name': FileName, 'ContentBytes': BinaryData } List: List_AttachmentObjects\r\n    END\r\nEND FUNCTION\r\n"</Definition>
      <SchemaVersion>2022.07</SchemaVersion>
      <DesktopFlowModules>[]</DesktopFlowModules>
      <PrimaryEntity>none</PrimaryEntity>
      <LocalizedNames>
        <LocalizedName languagecode="1033" description="PADFramework: EmailSenderO365Outlook" />
      </LocalizedNames>
    </Workflow>
    <Workflow WorkflowId="{c74ad727-5617-4d54-89a9-9d7b35187d34}" Name="PADFramework: ConfigReader">
      <JsonFileName>/Workflows/PADFrameworkConfigReader-C74AD727-5617-4D54-89A9-9D7B35187D34.json</JsonFileName>
      <Type>1</Type>
      <Subprocess>0</Subprocess>
      <Category>6</Category>
      <Mode>0</Mode>
      <Scope>4</Scope>
      <OnDemand>0</OnDemand>
      <TriggerOnCreate>0</TriggerOnCreate>
      <TriggerOnDelete>0</TriggerOnDelete>
      <AsyncAutodelete>0</AsyncAutodelete>
      <SyncWorkflowLogOnFailure>0</SyncWorkflowLogOnFailure>
      <StateCode>1</StateCode>
      <StatusCode>2</StatusCode>
      <RunAs>1</RunAs>
      <IsTransacted>1</IsTransacted>
      <IntroducedVersion>1.0</IntroducedVersion>
      <IsCustomizable>1</IsCustomizable>
      <BusinessProcessType>0</BusinessProcessType>
      <UIFlowType>2</UIFlowType>
      <IsCustomProcessingStepAllowedForOtherPublishers>1</IsCustomProcessingStepAllowedForOtherPublishers>
      <Metadata>{"clientversion":"2.45.00410.24179","isvalid":true,"$schema":"https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#","schemaVersion":"ROBIN_20211012","containsActiveConnections":true,"containsGptPredictActions":false,"containsActiveCopilotActions":false,"containsActiveWorkQueuesActions":false,"containsActiveLogMessageActions":false,"multipleRequestsState":0,"scriptType":0,"disableScreenshotCaptureOnError":false,"missingUiElementRepairType":null,"flowTimeout":null}</Metadata>
      <Inputs>{"schema":{"required":["Input_ConfigType","Input_ConfigPath"],"properties":{"Input_ConfigType":{"isOptional":false,"default":"","description":"The type of Config source to be parsed.\r\nCurrently supported options are:\r\n- JSON\r\n- Excel\r\n- Database\r\n- Dataverse\r\n- SharePoint","format":null,"title":"Input_ConfigType","type":"string","value":""},"Input_ConfigPath":{"isOptional":false,"default":"","description":"The path to the config data. Expects different values based on Config type:\r\n- 'JSON' - file path\r\n- 'Excel' - sheet name\r\n- 'SharePoint' - list name\r\n- 'Dataverse' - table logical name\r\n- 'Database' - stored procedure name","format":"password","title":"Input_ConfigPath","type":"string","value":null},"Input_ConfigAddress":{"isOptional":true,"default":"","description":"The address of the Config.\r\nOptional when Config type is 'JSON'.\r\nExpects a connection string when Config type is 'Database', \r\nExpects a site address when Config type is 'SharePoint'.\r\nExpects an environment URL when Config type is 'Dataverse'.\r\nExpects a file path when ConfigType is 'Excel'.","format":"password","title":"Input_ConfigAddress","type":"string","value":null},"Input_ProjectName":{"isOptional":true,"default":"","description":"The project name/number/Id that can be used to identify the config in the database.\r\nOptional when Config type is 'JSON' or 'Excel'.","format":null,"title":"Input_ProjectName","type":"string","value":null}},"type":"object"}}</Inputs>
      <Outputs>{"schema":{"properties":{"Output_ConfigObject":{"default":"","description":"The config values as a custom object.","format":"password","title":"Output_ConfigObject","type":"object","value":null},"Output_Message":{"default":"","description":"The flow response.","format":"password","title":"Output_Message","type":"string","value":null},"Output_Status":{"default":"","description":"The status of the flow. Uses standard HTTP status codes.","format":null,"title":"Output_Status","type":"number","value":null}},"type":"object"}}</Outputs>
      <Dependencies>{"childFlows":["a261fa2e-fce6-49c8-909a-a94012906030"],"workQueues":[]}</Dependencies>
      <ConnectionReferences>[{"api":{"name":"/providers/Microsoft.PowerApps/apis/shared_commondataserviceforapps"},"displayName":"PADFramework_Dataverse","isDisabled":false,"connectionReferenceLogicalName":"def_PADFramework_Dataverse","name":"shared-commondataser-a1574e24-6fc8-4470-bbd9-4aa76c9c4528","connectionDisplayName":"ab@robovirgin.com","ownerId":null,"padInternalId":"01b026b7-a356-41c6-b0e7-e0d51d248923","isEmbedded":false},{"api":{"name":"/providers/Microsoft.PowerApps/apis/shared_sharepointonline"},"displayName":"PADFramework_SharePoint","isDisabled":false,"connectionReferenceLogicalName":"def_PADFramework_SharePoint","name":"shared-sharepointonl-677e875a-ae40-406d-852e-d2b04c7a981b","connectionDisplayName":"ab@robovirgin.com","ownerId":null,"padInternalId":"9c94fd45-2b5a-417f-8cbf-1ef6a134e654","isEmbedded":false}]</ConnectionReferences>
      <Definition>"@@ConnectionString: ''\r\n@@Type: 'Local'\r\n@@DesktopType: 'local'\r\n@@DisplayName: 'Local computer'\r\nIMPORT 'controlRepo.appmask' AS appmask\r\nIMPORT 'imageRepo.imgrepo' AS imgrepo\r\n@SENSITIVE: [Output_ConfigObject, Output_Message, Input_ConfigPath, Input_ConfigAddress]\r\n@OUTPUT Output_ConfigObject : { 'Description': 'The config values as a custom object.', 'FriendlyName': 'Output_ConfigObject', 'Type': 'CustomObject' } \r\n@OUTPUT Output_Message : { 'Description': 'The flow response.', 'FriendlyName': 'Output_Message', 'Type': 'String' } \r\n@OUTPUT Output_Status : { 'Description': 'The status of the flow. Uses standard HTTP status codes.', 'FriendlyName': 'Output_Status', 'Type': 'Numeric' } \r\n@INPUT Input_ConfigType : { 'Description': '''The type of Config source to be parsed.\r\nCurrently supported options are:\r\n- JSON\r\n- Excel\r\n- Database\r\n- Dataverse\r\n- SharePoint''', 'FriendlyName': 'Input_ConfigType', 'Type': 'String', 'IsOptional': False, 'DefaultValue': '' } \r\n@INPUT Input_ConfigPath : { 'Description': '''The path to the config data. Expects different values based on Config type:\r\n- \\'JSON\\' - file path\r\n- \\'Excel\\' - sheet name\r\n- \\'SharePoint\\' - list name\r\n- \\'Dataverse\\' - table logical name\r\n- \\'Database\\' - stored procedure name''', 'FriendlyName': 'Input_ConfigPath', 'Type': 'String', 'IsOptional': False, 'DefaultValue': '' } \r\n@INPUT Input_ConfigAddress : { 'Description': '''The address of the Config.\r\nOptional when Config type is \\'JSON\\'.\r\nExpects a connection string when Config type is \\'Database\\', \r\nExpects a site address when Config type is \\'SharePoint\\'.\r\nExpects an environment URL when Config type is \\'Dataverse\\'.\r\nExpects a file path when ConfigType is \\'Excel\\'.''', 'FriendlyName': 'Input_ConfigAddress', 'Type': 'String', 'IsOptional': True } \r\n@INPUT Input_ProjectName : { 'Description': '''The project name/number/Id that can be used to identify the config in the database.\r\nOptional when Config type is \\'JSON\\' or \\'Excel\\'.''', 'FriendlyName': 'Input_ProjectName', 'Type': 'String', 'IsOptional': True } \r\n# Setting the status and message to 'Bad Request' by default in case the flow fails.\r\nSET Output_Status TO 400\r\nSET Output_Message TO $'''Bad Request'''\r\nBLOCK \r\nON BLOCK ERROR all\r\n\r\nEND\r\n    SWITCH Input_ConfigType\r\n        CASE = $'''JSON'''\r\n            CALL ReadJSONConfig\r\n        CASE = $'''Excel'''\r\n            CALL ReadExcelConfig\r\n        CASE = $'''Database'''\r\n            CALL ReadDatabaseConfig\r\n        CASE = $'''Dataverse'''\r\n            CALL ReadDataverseConfig\r\n        CASE = $'''SharePoint'''\r\n            CALL ReadSharePointConfig\r\n        DEFAULT\r\n            SET Output_Status TO 400\r\n            SET Output_Message TO $'''Browser \\'%Input_ConfigType%\\' is not supported by the Config Reader flow.'''\r\n            GOTO 'Exit'\r\n    END\r\n    IF IsNotEmpty(ErrorMessage) THEN\r\n        # Business exceptions are considered to be BadRequest.\r\n        SET Output_Status TO 400\r\n        SET Output_Message TO $'''Failed to read config values due to %ErrorMessage%'''\r\n        GOTO 'Exit'\r\n    END\r\n    SET Output_Status TO 200\r\n    SET Output_Message TO $'''Successfully retrieved config values.'''\r\n    LABEL 'Exit'\r\n    EXIT Code: 0\r\nEND\r\nERROR =&gt; ErrorMessage\r\nSET Output_Status TO 500\r\nSET Output_Message TO $'''Failed to read config values due to %ErrorMessage%'''\r\nFUNCTION ReadJSONConfig GLOBAL\r\n    File.ReadTextFromFile.ReadText File: Input_Configpath Encoding: File.TextFileEncoding.UTF8 Content=&gt; ConfigData\r\n    Variables.ConvertJsonToCustomObject Json: ConfigData CustomObject=&gt; Output_ConfigObject\r\nEND FUNCTION\r\nFUNCTION ReadExcelConfig GLOBAL\r\n    IF IsEmpty(Input_ConfigAddress) THEN\r\n        SET ErrorMessage TO $'''Empty Input_ConfigAddress parameter provided. It is required for config type %Input_ConfigType%.'''\r\n        GOTO 'Exit'\r\n    END\r\n    Excel.LaunchExcel.LaunchAndOpenUnderExistingProcess Path: Input_ConfigAddress Visible: False ReadOnly: True Instance=&gt; ExcelInstance\r\n    Excel.SetActiveWorksheet.ActivateWorksheetByName Instance: ExcelInstance Name: Input_ConfigPath\r\n    Excel.ReadFromExcel.ReadAllCells Instance: ExcelInstance ReadAsText: False FirstLineIsHeader: True RangeValue=&gt; Table_ConfigData\r\n    Excel.CloseExcel.Close Instance: ExcelInstance\r\n    ON ERROR\r\n        CALL RunExcelCloser\r\n    END\r\n    IF IsNotEmpty(ErrorMessage) THEN\r\n        GOTO 'Exit'\r\n    END\r\n    CALL ConvertTabularConfigToCustomObject\r\n    LABEL 'Exit'\r\nEND FUNCTION\r\nFUNCTION RunExcelCloser GLOBAL\r\n    @@flowname: 'PADFramework: ExcelCloser'\r\nExternal.RunFlow FlowId: 'a261fa2e-fce6-49c8-909a-a94012906030' @Input_FilePath: Input_ConfigAddress @Output_Message=&gt; Output_Message @Output_Status=&gt; Output_Status\r\n    IF Output_Status &lt;&gt; 200 THEN\r\n        SET ErrorMessage TO Output_Message\r\n    END\r\nEND FUNCTION\r\nFUNCTION ReadDatabaseConfig GLOBAL\r\n    IF IsEmpty(Input_ConfigAddress) THEN\r\n        SET ErrorMessage TO $'''Empty Input_ConfigAddress parameter provided. It is required for config type %Input_ConfigType%.'''\r\n        GOTO 'Exit'\r\n    ELSE IF IsEmpty(Input_ProjectName) THEN\r\n        SET ErrorMessage TO $'''Empty Input_ProjectName parameter provided. It is required for config type %Input_ConfigType%.'''\r\n        GOTO 'Exit'\r\n    END\r\n    @@copilotGeneratedAction: 'False'\r\nDatabase.ExecuteSqlStatement.ConnectAndExecute ConnectionString: Input_ConfigAddress Statement: $'''EXEC %Input_ConfigPath% @ProjectNumber = \\'%Input_ProjectName%\\';''' Timeout: 180 Result=&gt; Table_ConfigData\r\n    IF Table_ConfigData.IsEmpty = $'''true''' THEN\r\n        SET ErrorMessage TO $'''The database returned nothing when trying to get config values.'''\r\n        GOTO 'Exit'\r\n    ELSE IF Table_ConfigData[0]['Status'] &lt; 0 THEN\r\n        SET ErrorMessage TO $'''Status: %Table_ConfigData[0]['Status']%, Message: %Table_ConfigData[0]['Message']%'''\r\n        GOTO 'Exit'\r\n    END\r\n    CALL ConvertTabularConfigToCustomObject\r\n    LABEL 'Exit'\r\nEND FUNCTION\r\nFUNCTION ReadDataverseConfig GLOBAL\r\n    IF IsEmpty(Input_ConfigAddress) THEN\r\n        SET ErrorMessage TO $'''Empty Input_ConfigAddress parameter provided. It is required for config type %Input_ConfigType%.'''\r\n        GOTO 'Exit'\r\n    ELSE IF IsEmpty(Input_ProjectName) THEN\r\n        SET ErrorMessage TO $'''Empty Input_ProjectName parameter provided. It is required for config type %Input_ConfigType%.'''\r\n        GOTO 'Exit'\r\n    END\r\n    # Getting the prefix from the table name, as it is also used in logical column names.\r\n    Text.ParseText.RegexParseForFirstOccurrence Text: Input_ConfigPath TextToFind: $'''^[^_]+_''' StartingPosition: 0 IgnoreCase: False Match=&gt; Prefix\r\n    SET ColumnName_ProjectNumber TO $'''%Prefix%projectnumber'''\r\n    SET ColumnName_FlowName TO $'''%Prefix%flowname'''\r\n    SET ColumnName_PropertyName TO $'''%Prefix%propertyname'''\r\n    SET ColumnName_Value TO $'''%Prefix%value'''\r\n    @@organization: '%Input_ConfigAddress%'\r\n@@entityName: '%Input_ConfigPath%'\r\n@@connectionDisplayName: 'PADFramework_Dataverse'\r\nExternal.InvokeCloudConnector Connection: '01b026b7-a356-41c6-b0e7-e0d51d248923' ConnectorId: '/providers/Microsoft.PowerApps/apis/shared_commondataserviceforapps' OperationId: 'ListRecordsWithOrganization' @organization: Input_ConfigAddress @entityName: Input_ConfigPath @'$filter': $'''%ColumnName_ProjectNumber% eq \\'%Input_ProjectName%\\'''' @ListRecordsWithOrganizationResponse=&gt; ListRecordsWithOrganizationResponse\r\n    Variables.CreateNewDatatable InputTable: { ^['Flow Name', 'Property Name', 'Value'], [$'''''', $'''''', $''''''] } DataTable=&gt; Table_ConfigData\r\n    LOOP FOREACH CurrentItem IN ListRecordsWithOrganizationResponse['value']\r\n        Variables.AddRowToDataTable.AppendRowToDataTable DataTable: Table_ConfigData RowToAdd: [CurrentItem[ColumnName_FlowName], CurrentItem[ColumnName_PropertyName], CurrentItem[ColumnName_Value]]\r\n    END\r\n    CALL ConvertTabularConfigToCustomObject\r\n    LABEL 'Exit'\r\nEND FUNCTION\r\nFUNCTION ReadSharePointConfig GLOBAL\r\n    IF IsEmpty(Input_ConfigAddress) THEN\r\n        SET ErrorMessage TO $'''Empty Input_ConfigAddress parameter provided. It is required for config type %Input_ConfigType%.'''\r\n        GOTO 'Exit'\r\n    ELSE IF IsEmpty(Input_ProjectName) THEN\r\n        SET ErrorMessage TO $'''Empty Input_ProjectName parameter provided. It is required for config type %Input_ConfigType%.'''\r\n        GOTO 'Exit'\r\n    END\r\n    @@dataset: '%Input_ConfigAddress%'\r\n@@table: '%Input_ConfigPath%'\r\n@@folderPath: ''\r\n@@viewScopeOption: ''\r\n@@view: ''\r\n@@connectionDisplayName: 'PADFramework_SharePoint'\r\nExternal.InvokeCloudConnector Connection: '9c94fd45-2b5a-417f-8cbf-1ef6a134e654' ConnectorId: '/providers/Microsoft.PowerApps/apis/shared_sharepointonline' OperationId: 'GetItems' @dataset: Input_ConfigAddress @table: Input_ConfigPath @'$filter': $'''ProjectNumber eq \\'%Input_ProjectName%\\'''' @GetItemsResponse=&gt; GetItemsResponse\r\n    Variables.CreateNewDatatable InputTable: { ^['Flow Name', 'Property Name', 'Value'], [$'''''', $'''''', $''''''] } DataTable=&gt; Table_ConfigData\r\n    LOOP FOREACH CurrentItem IN GetItemsResponse['value']\r\n        Variables.AddRowToDataTable.AppendRowToDataTable DataTable: Table_ConfigData RowToAdd: [CurrentItem['Flow Name'], CurrentItem['Property Name'], CurrentItem['Value']]\r\n    END\r\n    CALL ConvertTabularConfigToCustomObject\r\n    LABEL 'Exit'\r\nEND FUNCTION\r\nFUNCTION ConvertTabularConfigToCustomObject GLOBAL\r\n    Variables.DeleteEmptyRowsFromDataTable DataTable: Table_ConfigData\r\n    Variables.DeleteDuplicateRowsFromDataTable DataTable: Table_ConfigData\r\n    SET Output_ConfigObject TO {{ }}\r\n    SET Output_ConfigObject['Flows'] TO {{ }}\r\n    LOOP FOREACH CurrentItem IN Table_ConfigData\r\n        IF IsEmpty(CurrentItem['Property Name']) THEN\r\n            EXIT LOOP\r\n        END\r\n        IF (IsEmpty(CurrentItem['Flow Name']) OR CurrentItem['Flow Name'] = 'General') = True THEN\r\n            SET Output_ConfigObject[CurrentItem['Property Name']] TO CurrentItem['Value']\r\n        ELSE IF Contains(Output_ConfigObject['Flows'], CurrentItem['Flow Name'], False) THEN\r\n            SET Output_ConfigObject['Flows'][CurrentItem['Flow Name']][CurrentItem['Property Name']] TO CurrentItem['Value']\r\n        ELSE\r\n            SET FlowObject TO {{ }}\r\n            SET FlowObject[CurrentItem['Property Name']] TO CurrentItem['Value']\r\n            SET Output_ConfigObject['Flows'][CurrentItem['Flow Name']] TO FlowObject\r\n        END\r\n    END\r\nEND FUNCTION\r\n"</Definition>
      <SchemaVersion>2022.07</SchemaVersion>
      <DesktopFlowModules>[]</DesktopFlowModules>
      <PrimaryEntity>none</PrimaryEntity>
      <LocalizedNames>
        <LocalizedName languagecode="1033" description="PADFramework: ConfigReader" />
      </LocalizedNames>
    </Workflow>
    <Workflow WorkflowId="{8bba4a93-fbb7-478c-b098-a5ca91273227}" Name="PADFramework: ScreenshotMaker">
      <JsonFileName>/Workflows/PADFrameworkScreenshotMaker-8BBA4A93-FBB7-478C-B098-A5CA91273227.json</JsonFileName>
      <Type>1</Type>
      <Subprocess>0</Subprocess>
      <Category>6</Category>
      <Mode>0</Mode>
      <Scope>4</Scope>
      <OnDemand>0</OnDemand>
      <TriggerOnCreate>0</TriggerOnCreate>
      <TriggerOnDelete>0</TriggerOnDelete>
      <AsyncAutodelete>0</AsyncAutodelete>
      <SyncWorkflowLogOnFailure>0</SyncWorkflowLogOnFailure>
      <StateCode>1</StateCode>
      <StatusCode>2</StatusCode>
      <RunAs>1</RunAs>
      <IsTransacted>1</IsTransacted>
      <IntroducedVersion>1.0</IntroducedVersion>
      <IsCustomizable>1</IsCustomizable>
      <BusinessProcessType>0</BusinessProcessType>
      <UIFlowType>2</UIFlowType>
      <IsCustomProcessingStepAllowedForOtherPublishers>1</IsCustomProcessingStepAllowedForOtherPublishers>
      <Metadata>{"isvalid":true,"schemaVersion":"ROBIN_20211012","containsActiveConnections":false}</Metadata>
      <Inputs>{"schema":{"properties":{"Input_ScreenshotsDirectory":{"default":"","description":"Please provide the directory to store the screenshot to.\r\nIf the directory is left empty, or does not exist, the screenshot will not be taken.","format":null,"title":"Input_ScreenshotsDirectory","type":"string","value":null,"isOptional":true},"Input_ScreenshotFileName":{"default":"","description":"Please provide a file name for the screenshot. Do not include an extension.\r\nBy default, ScreenshotTaker will add a timestamp to the end of the file name.","format":null,"title":"Input_ScreenshotFileName","type":"string","value":"","isOptional":false}},"required":["Input_ScreenshotFileName"],"type":"object"}}</Inputs>
      <Outputs>{"schema":{"properties":{"Output_Message":{"default":"","description":"The flow response.","format":"password","title":"Output_Message","type":"string","value":null,"isOptional":true},"Output_Status":{"default":"","description":"The status of the flow. Uses standard HTTP status codes.","format":null,"title":"Output_Status","type":"number","value":null,"isOptional":true}},"required":[],"type":"object"}}</Outputs>
      <Dependencies>{"childFlows":[],"workQueues":[]}</Dependencies>
      <ConnectionReferences>[]</ConnectionReferences>
      <Definition>"@@ConnectionString: ''\r\n@@Type: 'Local'\r\n@@DesktopType: 'local'\r\n@@DisplayName: 'Local computer'\r\nIMPORT 'controlRepo.appmask' AS appmask\r\nIMPORT 'imageRepo.imgrepo' AS imgrepo\r\n@SENSITIVE: [Output_Message]\r\n@INPUT Input_ScreenshotsDirectory : { 'Description': '''Please provide the directory to store the screenshot to.\r\nIf the directory is left empty, or does not exist, the screenshot will not be taken.''', 'FriendlyName': 'Input_ScreenshotsDirectory', 'Type': 'String', 'IsOptional': True } \r\n@INPUT Input_ScreenshotFileName : { 'Description': '''Please provide a file name for the screenshot. Do not include an extension.\r\nBy default, ScreenshotTaker will add a timestamp to the end of the file name.''', 'FriendlyName': 'Input_ScreenshotFileName', 'Type': 'String', 'IsOptional': False, 'DefaultValue': '' } \r\n@OUTPUT Output_Message : { 'Description': 'The flow response.', 'FriendlyName': 'Output_Message', 'Type': 'String' } \r\n@OUTPUT Output_Status : { 'Description': 'The status of the flow. Uses standard HTTP status codes.', 'FriendlyName': 'Output_Status', 'Type': 'Numeric' } \r\n# Setting the status and message to 'Bad Request' by default in case the flow fails.\r\nSET Output_Status TO 400\r\nSET Output_Message TO $'''Bad Request'''\r\nBLOCK \r\nON BLOCK ERROR all\r\n\r\nEND\r\n    IF IsEmpty(Input_ScreenshotsDirectory) THEN\r\n        SET Output_Status TO 422\r\n        SET Output_Message TO $'''Empty screenshots directory parameter provided. Screenshot will not be taken.'''\r\n        GOTO 'Exit'\r\n    END\r\n    IF (Folder.IfFolderExists.DoesNotExist Path: Input_ScreenshotsDirectory) THEN\r\n        SET Output_Status TO 404\r\n        SET Output_Message TO $'''The provided screenshots directory at \\'%Input_ScreenshotsDirectory%\\' does not exist. Screenshot will not be taken.'''\r\n        GOTO 'Exit'\r\n    END\r\n    DateTime.GetCurrentDateTime.Local DateTimeFormat: DateTime.DateTimeFormat.DateAndTime CurrentDateTime=&gt; CurrentDateTime\r\n    Text.ConvertDateTimeToText.FromCustomDateTime DateTime: CurrentDateTime CustomFormat: $'''yyyy-MM-dd HHmmss''' Result=&gt; Timestamp\r\n    SET ScreenshotFilePath TO $'''%Input_ScreenshotsDirectory%\\\\%Input_ScreenshotFileName% %Timestamp%.png'''\r\n    Workstation.TakeScreenshot.TakeScreenshotOfPrimaryScreenAndSaveToFile File: ScreenshotFilePath ImageFormat: System.ImageFormat.Png\r\n    SET Output_Status TO 200\r\n    SET Output_Message TO $'''Successfully took screenshot and saved it as \\'%ScreenshotFilePath%\\''''\r\n    LABEL 'Exit'\r\n    EXIT Code: 0\r\nEND\r\nERROR =&gt; ErrorMessage\r\nSET Output_Status TO 500\r\nSET Output_Message TO $'''Failed to take screenshot due to %ErrorMessage%'''\r\n"</Definition>
      <SchemaVersion>2022.06</SchemaVersion>
      <DesktopFlowModules>[]</DesktopFlowModules>
      <PrimaryEntity>none</PrimaryEntity>
      <LocalizedNames>
        <LocalizedName languagecode="1033" description="PADFramework: ScreenshotMaker" />
      </LocalizedNames>
    </Workflow>
    <Workflow WorkflowId="{a261fa2e-fce6-49c8-909a-a94012906030}" Name="PADFramework: ExcelCloser">
      <JsonFileName>/Workflows/PADFrameworkExcelCloser-A261FA2E-FCE6-49C8-909A-A94012906030.json</JsonFileName>
      <Type>1</Type>
      <Subprocess>0</Subprocess>
      <Category>6</Category>
      <Mode>0</Mode>
      <Scope>4</Scope>
      <OnDemand>0</OnDemand>
      <TriggerOnCreate>0</TriggerOnCreate>
      <TriggerOnDelete>0</TriggerOnDelete>
      <AsyncAutodelete>0</AsyncAutodelete>
      <SyncWorkflowLogOnFailure>0</SyncWorkflowLogOnFailure>
      <StateCode>1</StateCode>
      <StatusCode>2</StatusCode>
      <RunAs>1</RunAs>
      <IsTransacted>1</IsTransacted>
      <IntroducedVersion>1.0</IntroducedVersion>
      <IsCustomizable>1</IsCustomizable>
      <BusinessProcessType>0</BusinessProcessType>
      <UIFlowType>2</UIFlowType>
      <IsCustomProcessingStepAllowedForOtherPublishers>1</IsCustomProcessingStepAllowedForOtherPublishers>
      <Metadata>{"isvalid":true,"schemaVersion":"ROBIN_20211012","containsActiveConnections":false}</Metadata>
      <Inputs>{"schema":{"required":[],"properties":{"Input_FilePath":{"isOptional":true,"default":"","description":"Please provide the path to the document that should be closed.\r\nIf no path is provided, all active Excel instances will be closed.","format":null,"title":"Input_FilePath","type":"string","value":null}},"type":"object"}}</Inputs>
      <Outputs>{"schema":{"properties":{"Output_Message":{"default":"","description":"The flow response.","format":"password","title":"Output_Message","type":"string","value":null},"Output_Status":{"default":"","description":"The status of the flow. Uses standard HTTP status codes.","format":null,"title":"Output_Status","type":"number","value":null}},"type":"object"}}</Outputs>
      <Dependencies>{"childFlows":[],"workQueues":[]}</Dependencies>
      <ConnectionReferences>[]</ConnectionReferences>
      <Definition>"@@ConnectionString: ''\r\n@@Type: 'Local'\r\n@@DesktopType: 'local'\r\n@@DisplayName: 'Local computer'\r\nIMPORT 'controlRepo.appmask' AS appmask\r\nIMPORT 'imageRepo.imgrepo' AS imgrepo\r\n@SENSITIVE: [Output_Message]\r\n@INPUT Input_FilePath : { 'Description': '''Please provide the path to the document that should be closed.\r\nIf no path is provided, all active Excel instances will be closed.''', 'FriendlyName': 'Input_FilePath', 'Type': 'String', 'IsOptional': True } \r\n@OUTPUT Output_Message : { 'Description': 'The flow response.', 'FriendlyName': 'Output_Message', 'Type': 'String' } \r\n@OUTPUT Output_Status : { 'Description': 'The status of the flow. Uses standard HTTP status codes.', 'FriendlyName': 'Output_Status', 'Type': 'Numeric' } \r\nSET Output_Status TO 200\r\nBLOCK \r\nON BLOCK ERROR all\r\n\r\nEND\r\n    IF (System.IfProcess.ProcessIsNotRunning ProcessName: $'''EXCEL''') THEN\r\n    ON ERROR\r\n\r\n    END\r\n        SET Output_Message TO $'''Excel is not running. Will not attempt to close it.'''\r\n        GOTO 'Exit'\r\n    END\r\n    IF IsNotEmpty(Input_FilePath) THEN\r\n        Excel.Attach DocumentName: Input_FilePath Instance=&gt; ExcelToClose\r\n        Excel.CloseExcel.Close Instance: ExcelToClose\r\n        WAIT (System.WaitForProcess.ProcessToStop ProcessName: $'''EXCEL''') FOR 10 \r\n        ON ERROR TimeoutError\r\n\r\n        END\r\n        IF (System.IfProcess.ProcessIsNotRunning ProcessName: $'''EXCEL''') THEN\r\n        ON ERROR\r\n\r\n        END\r\n            SET Output_Message TO $'''Successfully closed Excel instance for document %Input_FilePath%'''\r\n            GOTO 'Exit'\r\n        END\r\n    END\r\n    LOOP FROM 1 TO 10 STEP 1\r\n        IF (System.IfProcess.ProcessIsRunning ProcessName: $'''EXCEL''') THEN\r\n        ON ERROR\r\n\r\n        END\r\n            @@copilotGeneratedAction: 'False'\r\nScripting.RunPowershellScript.RunPowershellScript Script: $'''$excel = [Runtime.Interopservices.Marshal]::GetActiveObject(\\'Excel.Application\\')\r\n$excel.Visible = $false\r\n$excel.DisplayAlerts = $false\r\n\r\n$excel.Quit()\r\n[System.Runtime.Interopservices.Marshal]::ReleaseComObject($excel)\r\nRemove-Variable -Name Excel \r\n[GC]::Collect() \r\n[GC]::WaitForPendingFinalizers()\r\nif ($excel.Workbooks.Count -eq 0)\r\n{\r\n    Stop-Process -Name EXCEL -ErrorAction SilentlyContinue\r\n}''' ScriptOutput=&gt; PowershellOutput\r\n            WAIT (System.WaitForProcess.ProcessToStop ProcessName: $'''EXCEL''') FOR 5 \r\n            ON ERROR\r\n\r\n            END\r\n        ELSE\r\n            EXIT LOOP\r\n        END\r\n    END\r\n    LOOP FROM 1 TO 10 STEP 1\r\n        IF (System.IfProcess.ProcessIsRunning ProcessName: $'''EXCEL''') THEN\r\n        ON ERROR\r\n\r\n        END\r\n            System.TerminateProcess.TerminateProcessByName ProcessName: $'''EXCEL'''\r\n            ON ERROR\r\n\r\n            END\r\n            WAIT (System.WaitForProcess.ProcessToStop ProcessName: $'''EXCEL''') FOR 5 \r\n            ON ERROR\r\n\r\n            END\r\n        ELSE\r\n            EXIT LOOP\r\n        END\r\n    END\r\n    IF (System.IfProcess.ProcessIsRunning ProcessName: $'''EXCEL''') THEN\r\n    ON ERROR\r\n\r\n    END\r\n        SET Output_Status TO 500\r\n        SET ErrorMessage TO $'''Failed to properly close excel'''\r\n        GOTO 'Exit'\r\n    END\r\n    SET Output_Message TO $'''Successfully closed Excel'''\r\n    LABEL 'Exit'\r\n    EXIT Code: 0\r\nEND\r\nERROR =&gt; ErrorMessage\r\nSET Output_Status TO 500\r\nSET Output_Message TO $'''Failed to close Excel due to %ErrorMessage%'''\r\n"</Definition>
      <SchemaVersion>2022.06</SchemaVersion>
      <DesktopFlowModules>[]</DesktopFlowModules>
      <PrimaryEntity>none</PrimaryEntity>
      <LocalizedNames>
        <LocalizedName languagecode="1033" description="PADFramework: ExcelCloser" />
      </LocalizedNames>
    </Workflow>
    <Workflow WorkflowId="{ba8eaa10-fb57-4fef-9240-e2690d67b906}" Name="PADFramework: WorkItemHandler">
      <JsonFileName>/Workflows/PADFrameworkWorkItemHandler-BA8EAA10-FB57-4FEF-9240-E2690D67B906.json</JsonFileName>
      <Type>1</Type>
      <Subprocess>0</Subprocess>
      <Category>6</Category>
      <Mode>0</Mode>
      <Scope>4</Scope>
      <OnDemand>0</OnDemand>
      <TriggerOnCreate>0</TriggerOnCreate>
      <TriggerOnDelete>0</TriggerOnDelete>
      <AsyncAutodelete>0</AsyncAutodelete>
      <SyncWorkflowLogOnFailure>0</SyncWorkflowLogOnFailure>
      <StateCode>1</StateCode>
      <StatusCode>2</StatusCode>
      <RunAs>1</RunAs>
      <IsTransacted>1</IsTransacted>
      <IntroducedVersion>1.0</IntroducedVersion>
      <IsCustomizable>1</IsCustomizable>
      <BusinessProcessType>0</BusinessProcessType>
      <UIFlowType>2</UIFlowType>
      <IsCustomProcessingStepAllowedForOtherPublishers>1</IsCustomProcessingStepAllowedForOtherPublishers>
      <Metadata>{"clientversion":"2.45.00410.24179","isvalid":true,"$schema":"https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#","schemaVersion":"ROBIN_20211012","containsActiveConnections":false,"containsGptPredictActions":false,"containsActiveCopilotActions":false,"containsActiveWorkQueuesActions":false,"containsActiveLogMessageActions":false,"multipleRequestsState":0,"scriptType":0,"disableScreenshotCaptureOnError":false,"missingUiElementRepairType":null,"flowTimeout":null}</Metadata>
      <Inputs>{"schema":{"required":["Input_WorkItemOperation","Input_FlowName","Input_DatabaseType","Input_ConnectionString"],"properties":{"Input_WorkItemOperation":{"isOptional":false,"default":"","description":"Provide the name of the operation to perform on the work item.\r\nAvailable options:\r\n- Complete\r\n- Get\r\n- Upsert","format":null,"title":"Input_WorkItemOperation","type":"string","value":""},"Input_WorkItemId":{"isOptional":true,"default":"","description":"Provide the Id of the work item.\r\nOptional when operation is \"Get\". Required for other operations.","format":null,"title":"Input_WorkItemId","type":"string","value":null},"Input_WorkItemNumber":{"isOptional":true,"default":"","description":"Provide the name/number of the work item.\r\nRequired when operation is \"Upsert\". Optional for other operations.","format":null,"title":"Input_WorkItemNumber","type":"string","value":null},"Input_WorkItemData":{"isOptional":true,"default":"","description":"Provide the data content of the work item (as a custom object).\r\nRequired when operation is \"Upsert\". Optional for other operations.","format":"password","title":"Input_WorkItemData","type":"object","value":null},"Input_WorkItemStatus":{"isOptional":true,"default":"","description":"Provide the status of the work item for the update.\r\nOptional when operation is \"Get\". \r\nRequired when operation is \"Complete\".\r\nWhen operation is \"Upsert\", providing a status will create an entry in the results table and will update the status in the work item table.\r\n","format":null,"title":"Input_WorkItemStatus","type":"string","value":null},"Input_WorkItemMessage":{"isOptional":true,"default":"","description":"Provide the message of the work item for the update.\r\nOptional when operation is \"Get\". Required for other operations.","format":"password","title":"Input_WorkItemMessage","type":"string","value":null},"Input_WorkItemDataSource":{"isOptional":true,"default":"","description":"The source of the work item data.\r\nRequired when operation is \"Upsert\". Optional for other operations.","format":"password","title":"Input_WorkItemDataSource","type":"string","value":null},"Input_ProjectName":{"isOptional":true,"default":"","description":"Provide the name of the project.\r\nRequired when operation is \"Get\" or \"Upsert\" (when inserting a new item).\r\nOptional when operation is \"Complete\" and when updating an existing item.","format":null,"title":"Input_ProjectName","type":"string","value":null},"Input_FlowName":{"isOptional":false,"default":"","description":"Provide the flow name for the work item.\r\nWhen operation is \"Get\", provide the name of the flow that created the work item.\r\nFor other operations - provide the name of the current flow invoking the handler.","format":null,"title":"Input_FlowName","type":"string","value":""},"Input_DatabaseType":{"isOptional":false,"default":"","description":"Provide the database type used for the work queue.\r\nAvailable options are:\r\n- SQLite (uses direct SELECT, INSERT and UPDATE statements)\r\n- SQL Server (uses SQL Server stored procedures)","format":null,"title":"Input_DatabaseType","type":"string","value":""},"Input_ConnectionString":{"isOptional":false,"default":"","description":"Provide the connection string to the work queue database.","format":"password","title":"Input_ConnectionString","type":"string","value":null},"Input_WorkItemProcessingStartTime":{"isOptional":true,"default":"","description":"Please provide the processing start time for the current work item under the standard database format of yyyy-MM-dd HH:mm:ss.\r\nOptional for operation type \"Get\".\r\nSQL Server expects the time to be in UTC time zone.","format":null,"title":"Input_WorkItemProcessingStartTime","type":"string","value":null},"Input_WorkItemReason":{"isOptional":true,"default":"","description":"Please provide the reason for the work item status.\r\nRelevant when updating and completing work items. Not necessary for completing successfuly.","format":null,"title":"Input_WorkItemReason","type":"string","value":null},"Input_MaxRetrieveCount":{"isOptional":true,"default":"","description":"Provide the maximum retrieve count for a work item.\r\nWork items that have been retrieved more than this number of times will be ignored.\r\nOnly needed for \"Get\" type operations.","format":null,"title":"Input_MaxRetrieveCount","type":"number","value":"0"},"Input_Environment":{"isOptional":true,"default":"","description":"Provide the environment.\r\nRequired when operation is Get and database type is SQL Server. Optional for all other cases.\r\nAvailable options are: \r\n- DEV\r\n- TEST\r\n- PROD","format":null,"title":"Input_Environment","type":"string","value":null},"Input_WorkItemPriority":{"isOptional":true,"default":"","description":"Please provide the priority to apply to the work item.\r\nRequired when operation is 'Upsert'. Optional for other operations.\r\nCurrently supported values are:\r\n- Highest\r\n- High\r\n- Normal\r\n- Low\r\n- Lowest\r\n","format":null,"title":"Input_WorkItemPriority","type":"string","value":null}},"type":"object"}}</Inputs>
      <Outputs>{"schema":{"properties":{"Output_WorkItemId":{"default":"","description":"The work item Id.","format":null,"title":"Output_WorkItemId","type":"string","value":null},"Output_WorkItemNumber":{"default":"","description":"The number of the work item.","format":null,"title":"Output_WorkItemNumber","type":"string","value":null},"Output_WorkItemData":{"default":"","description":"Work item data (custom object).","format":"password","title":"Output_WorkItemData","type":"object","value":null},"Output_WorkItemRetrieveCount":{"default":"","description":"The number of times the specific work item has been retrieved.","format":null,"title":"Output_WorkItemRetrieveCount","type":"number","value":null},"Output_WorkItemDataSource":{"default":"","description":"The source of the data for the work item.","format":"password","title":"Output_WorkItemDataSource","type":"string","value":null},"Output_Message":{"default":"","description":"The flow response.","format":"password","title":"Output_Message","type":"string","value":null},"Output_Status":{"default":"","description":"The status of the flow. Uses standard HTTP status codes.","format":null,"title":"Output_Status","type":"number","value":null},"Output_WorkItemProcessingStartTime":{"default":"","description":"The timestamp for when the work item was picked up for processing.\r\nFormatted as yyyy-MM-dd HH:mm:ss.","format":null,"title":"Output_WorkItemProcessingStartTime","type":"string","value":null},"Output_WorkItemPriority":{"default":"","description":"Contains the priority of the work item.","format":null,"title":"Output_WorkItemPriority","type":"string","value":null}},"type":"object"}}</Outputs>
      <Dependencies>{"childFlows":[],"workQueues":[],"requiredBinaries":["c01dc740-e226-4cfa-a026-798619932f5e","b01085fe-a933-4f0c-a3d3-4595f956b6c8","880de9c1-22f9-4b40-826b-42ce2a03cccf"]}</Dependencies>
      <ConnectionReferences>[]</ConnectionReferences>
      <Definition>"@@ConnectionString: ''\r\n@@Type: 'Local'\r\n@@DesktopType: 'local'\r\n@@DisplayName: 'Local computer'\r\nIMPORT 'controlRepo.appmask' AS appmask\r\nIMPORT 'imageRepo.imgrepo' AS imgrepo\r\n@SENSITIVE: [Input_WorkItemData, Input_WorkItemMessage, Output_WorkItemData, Input_WorkItemDataSource, Output_WorkItemDataSource, Output_Message, Input_ConnectionString]\r\n@INPUT Input_WorkItemOperation : { 'Description': '''Provide the name of the operation to perform on the work item.\r\nAvailable options:\r\n- Complete\r\n- Get\r\n- Upsert''', 'FriendlyName': 'Input_WorkItemOperation', 'Type': 'String', 'IsOptional': False, 'DefaultValue': '' } \r\n@INPUT Input_WorkItemId : { 'Description': '''Provide the Id of the work item.\r\nOptional when operation is \\\"Get\\\". Required for other operations.''', 'FriendlyName': 'Input_WorkItemId', 'Type': 'String', 'IsOptional': True } \r\n@INPUT Input_WorkItemNumber : { 'Description': '''Provide the name/number of the work item.\r\nRequired when operation is \\\"Upsert\\\". Optional for other operations.''', 'FriendlyName': 'Input_WorkItemNumber', 'Type': 'String', 'IsOptional': True } \r\n@INPUT Input_WorkItemData : { 'Description': '''Provide the data content of the work item (as a custom object).\r\nRequired when operation is \\\"Upsert\\\". Optional for other operations.''', 'FriendlyName': 'Input_WorkItemData', 'Type': 'CustomObject', 'IsOptional': True, 'DefaultValue': {{ }} } \r\n@INPUT Input_WorkItemStatus : { 'Description': '''Provide the status of the work item for the update.\r\nOptional when operation is \\\"Get\\\". \r\nRequired when operation is \\\"Complete\\\".\r\nWhen operation is \\\"Upsert\\\", providing a status will create an entry in the results table and will update the status in the work item table.\r\n''', 'FriendlyName': 'Input_WorkItemStatus', 'Type': 'String', 'IsOptional': True } \r\n@INPUT Input_WorkItemMessage : { 'Description': '''Provide the message of the work item for the update.\r\nOptional when operation is \\\"Get\\\". Required for other operations.''', 'FriendlyName': 'Input_WorkItemMessage', 'Type': 'String', 'IsOptional': True } \r\n@OUTPUT Output_WorkItemId : { 'Description': 'The work item Id.', 'FriendlyName': 'Output_WorkItemId', 'Type': 'String' } \r\n@OUTPUT Output_WorkItemNumber : { 'Description': 'The number of the work item.', 'FriendlyName': 'Output_WorkItemNumber', 'Type': 'String' } \r\n@OUTPUT Output_WorkItemData : { 'Description': 'Work item data (custom object).', 'FriendlyName': 'Output_WorkItemData', 'Type': 'CustomObject' } \r\n@OUTPUT Output_WorkItemRetrieveCount : { 'Description': 'The number of times the specific work item has been retrieved.', 'FriendlyName': 'Output_WorkItemRetrieveCount', 'Type': 'Numeric' } \r\n@INPUT Input_WorkItemDataSource : { 'Description': '''The source of the work item data.\r\nRequired when operation is \\\"Upsert\\\". Optional for other operations.''', 'FriendlyName': 'Input_WorkItemDataSource', 'Type': 'String', 'IsOptional': True } \r\n@OUTPUT Output_WorkItemDataSource : { 'Description': 'The source of the data for the work item.', 'FriendlyName': 'Output_WorkItemDataSource', 'Type': 'String' } \r\n@OUTPUT Output_Message : { 'Description': 'The flow response.', 'FriendlyName': 'Output_Message', 'Type': 'String' } \r\n@OUTPUT Output_Status : { 'Description': 'The status of the flow. Uses standard HTTP status codes.', 'FriendlyName': 'Output_Status', 'Type': 'Numeric' } \r\n@INPUT Input_ProjectName : { 'Description': '''Provide the name of the project.\r\nRequired when operation is \\\"Get\\\" or \\\"Upsert\\\" (when inserting a new item).\r\nOptional when operation is \\\"Complete\\\" and when updating an existing item.''', 'FriendlyName': 'Input_ProjectName', 'Type': 'String', 'IsOptional': True } \r\n@INPUT Input_FlowName : { 'Description': '''Provide the flow name for the work item.\r\nWhen operation is \\\"Get\\\", provide the name of the flow that created the work item.\r\nFor other operations - provide the name of the current flow invoking the handler.''', 'FriendlyName': 'Input_FlowName', 'Type': 'String', 'IsOptional': False, 'DefaultValue': '' } \r\n@INPUT Input_DatabaseType : { 'Description': '''Provide the database type used for the work queue.\r\nAvailable options are:\r\n- SQLite (uses direct SELECT, INSERT and UPDATE statements)\r\n- SQL Server (uses SQL Server stored procedures)''', 'FriendlyName': 'Input_DatabaseType', 'Type': 'String', 'IsOptional': False, 'DefaultValue': '' } \r\n@INPUT Input_ConnectionString : { 'Description': 'Provide the connection string to the work queue database.', 'FriendlyName': 'Input_ConnectionString', 'Type': 'String', 'IsOptional': False, 'DefaultValue': '' } \r\n@INPUT Input_WorkItemProcessingStartTime : { 'Description': '''Please provide the processing start time for the current work item under the standard database format of yyyy-MM-dd HH:mm:ss.\r\nOptional for operation type \\\"Get\\\".\r\nSQL Server expects the time to be in UTC time zone.''', 'FriendlyName': 'Input_WorkItemProcessingStartTime', 'Type': 'String', 'IsOptional': True } \r\n@OUTPUT Output_WorkItemProcessingStartTime : { 'Description': '''The timestamp for when the work item was picked up for processing.\r\nFormatted as yyyy-MM-dd HH:mm:ss.''', 'FriendlyName': 'Output_WorkItemProcessingStartTime', 'Type': 'String' } \r\n@INPUT Input_WorkItemReason : { 'Description': '''Please provide the reason for the work item status.\r\nRelevant when updating and completing work items. Not necessary for completing successfuly.''', 'FriendlyName': 'Input_WorkItemReason', 'Type': 'String', 'IsOptional': True } \r\n@INPUT Input_MaxRetrieveCount : { 'Description': '''Provide the maximum retrieve count for a work item.\r\nWork items that have been retrieved more than this number of times will be ignored.\r\nOnly needed for \\\"Get\\\" type operations.''', 'FriendlyName': 'Input_MaxRetrieveCount', 'Type': 'Numeric', 'IsOptional': True, 'DefaultValue': 0 } \r\n@INPUT Input_Environment : { 'Description': '''Provide the environment.\r\nRequired when operation is Get and database type is SQL Server. Optional for all other cases.\r\nAvailable options are: \r\n- DEV\r\n- TEST\r\n- PROD''', 'FriendlyName': 'Input_Environment', 'Type': 'String', 'IsOptional': True } \r\n@INPUT Input_WorkItemPriority : { 'Description': '''Please provide the priority to apply to the work item.\r\nRequired when operation is \\'Upsert\\'. Optional for other operations.\r\nCurrently supported values are:\r\n- Highest\r\n- High\r\n- Normal\r\n- Low\r\n- Lowest\r\n''', 'FriendlyName': 'Input_WorkItemPriority', 'Type': 'String', 'IsOptional': True } \r\n@OUTPUT Output_WorkItemPriority : { 'Description': 'Contains the priority of the work item.', 'FriendlyName': 'Output_WorkItemPriority', 'Type': 'String' } \r\n# Setting the status and message to 'Bad Request' by default in case the flow fails.\r\nSET Output_Status TO 400\r\nSET Output_Message TO $'''Bad Request'''\r\nBLOCK \r\nON BLOCK ERROR all\r\n\r\nEND\r\n    CALL Init\r\n    System.GetEnvironmentVariable.GetEnvironmentVariable Name: $'''COMPUTERNAME''' Value=&gt; ComputerName\r\n    SWITCH Input_DatabaseType\r\n        CASE = $'''SQLite'''\r\n            CALL PerformSQLiteOperations\r\n        CASE = $'''SQL Server'''\r\n            CALL PerformSQLServerOperations\r\n        DEFAULT\r\n            SET Output_Status TO 400\r\n            SET Output_Message TO $'''Browser \\'%Input_DatabaseType%\\' is not supported by the Work Item Handler flow.'''\r\n            GOTO 'Exit'\r\n    END\r\n    IF IsNotEmpty(ErrorMessage) THEN\r\n        # Business exceptions are considered to be BadRequest.\r\n        SET Output_Status TO 400\r\n        SET Output_Message TO $'''Failed to perform a %Input_WorkItemOperation% operation on database type %Input_DatabaseType% due to %ErrorMessage%'''\r\n    ELSE IF Output_Status &gt;= 400 THEN\r\n        # Not overwriting other success statuses that may be set in child flows.\r\n        SET Output_Status TO 200\r\n        SET Output_Message TO $'''Successfully performed a %Input_WorkItemOperation% operation on database type %Input_DatabaseType%.'''\r\n    END\r\n    LABEL 'Exit'\r\n    EXIT Code: 0\r\nEND\r\nERROR =&gt; ErrorMessage\r\nSET Output_Status TO 500\r\nSET Output_Message TO $'''Failed to perform a %Input_WorkItemOperation% operation on database type %Input_DatabaseType% due to %ErrorMessage%'''\r\nFUNCTION PerformSQLiteOperations GLOBAL\r\n    SWITCH Input_WorkItemOperation\r\n        CASE = $'''Complete'''\r\n            CALL SQLiteCompleteWorkItem\r\n        CASE = $'''Get'''\r\n            CALL SQLiteGetWorkItem\r\n        CASE = $'''Upsert'''\r\n            CALL SQLiteUpsertWorkItem\r\n        DEFAULT\r\n            SET ErrorMessage TO $'''Operation \\\"%Input_WorkItemOperation%\\\" is not supported.'''\r\n    END\r\nEND FUNCTION\r\nFUNCTION PerformSQLServerOperations GLOBAL\r\n    SWITCH Input_WorkItemOperation\r\n        CASE = $'''Complete'''\r\n            CALL SQLServerCompleteWorkItem\r\n        CASE = $'''Get'''\r\n            CALL SQLServerGetWorkItem\r\n        CASE = $'''Upsert'''\r\n            CALL SQLServerUpsertWorkItem\r\n        DEFAULT\r\n            SET ErrorMessage TO $'''Operation \\\"%Input_WorkItemOperation%\\\" is not supported.'''\r\n    END\r\nEND FUNCTION\r\nFUNCTION SQLiteCompleteWorkItem GLOBAL\r\n    IF IsEmpty(Input_WorkItemId) THEN\r\n        SET ErrorMessage TO $'''Empty Input_WorkItemId parameter provided. It is required for operation type %Input_WorkItemOperation%.'''\r\n        GOTO 'Exit'\r\n    ELSE IF IsEmpty(Input_WorkItemStatus) THEN\r\n        SET ErrorMessage TO $'''Empty Input_WorkItemStatus parameter provided. It is required for operation type %Input_WorkItemOperation%.'''\r\n        GOTO 'Exit'\r\n    ELSE IF IsEmpty(Input_WorkItemProcessingStartTime) THEN\r\n        SET ErrorMessage TO $'''Empty Input_WorkItemProcessingStartTime parameter provided. It is required for operation type %Input_WorkItemOperation%.'''\r\n        GOTO 'Exit'\r\n    ELSE IF IsEmpty(Input_FlowName) THEN\r\n        SET ErrorMessage TO $'''Empty Input_FlowName parameter provided. It is required for operation type %Input_WorkItemOperation%.'''\r\n        GOTO 'Exit'\r\n    ELSE IF IsEmpty(Input_WorkItemMessage) THEN\r\n        SET ErrorMessage TO $'''Empty Input_WorkItemMessage parameter provided. It is required for operation type %Input_WorkItemOperation%.'''\r\n        GOTO 'Exit'\r\n    END\r\n    CALL SQLiteUpdateWorkItemStatus\r\n    IF IsNotEmpty(ErrorMessage) THEN\r\n        GOTO 'Exit'\r\n    END\r\n    CALL SQLiteUpdateAccumulatedRuntime\r\n    IF IsNotEmpty(ErrorMessage) THEN\r\n        GOTO 'Exit'\r\n    END\r\n    CALL SQLiteGetFlowId\r\n    IF IsNotEmpty(ErrorMessage) THEN\r\n        GOTO 'Exit'\r\n    END\r\n    @@copilotGeneratedAction: 'False'\r\nDatabase.ExecuteSqlStatement.ConnectAndExecute ConnectionString: Input_ConnectionString Statement: $'''INSERT INTO\r\n    WorkItemResult (WorkItemId, StatusId, ModuleName, Reason, Message)\r\nVALUES\r\n(%Input_WorkItemId%, %Status_Object[Input_WorkItemStatus]%, \\'%Input_FlowName%\\', \\'%Input_WorkItemReason%\\', \\'%Input_WorkItemMessage%\\')''' Timeout: 30\r\n    @@copilotGeneratedAction: 'False'\r\nDatabase.ExecuteSqlStatement.ConnectAndExecute ConnectionString: Input_ConnectionString Statement: $'''UPDATE\r\n    WorkItem\r\nSET\r\n    StatusId = %Status_Object[Input_WorkItemStatus]%,\r\n    FlowId = %FlowId%\r\n    ProcessedBy = \\'%ComputerName%\\',\r\n    Processed = 1\r\nWHERE\r\n    Id = %Input_WorkItemId%''' Timeout: 30\r\n    LABEL 'Exit'\r\nEND FUNCTION\r\nFUNCTION SQLiteGetStatuses GLOBAL\r\n    @@copilotGeneratedAction: 'False'\r\nDatabase.ExecuteSqlStatement.ConnectAndExecute ConnectionString: Input_ConnectionString Statement: $'''SELECT * FROM Status''' Timeout: 30 Result=&gt; Table_Status\r\n    IF (Table_Status.IsEmpty) = (True) THEN\r\n        SET ErrorMessage TO $'''Status table is empty in database type %Input_DatabaseType%'''\r\n        GOTO 'Exit'\r\n    END\r\n    SET Status_Object TO {{ }}\r\n    LOOP FOREACH Row_Status IN Table_Status\r\n        SET Status_Object[Row_Status['Status']] TO Row_Status['Id']\r\n    END\r\n    LABEL 'Exit'\r\nEND FUNCTION\r\nFUNCTION SQLiteUpdateWorkItemStatus GLOBAL\r\n    CALL SQLiteGetStatuses\r\n    IF IsNotEmpty(ErrorMessage) THEN\r\n        GOTO 'Exit'\r\n    ELSE IF NotContains(Status_Object, Input_WorkItemStatus, False) THEN\r\n        SET ErrorMessage TO $'''Status (%Input_WorkItemStatus%) does not exist in the Status table.'''\r\n        GOTO 'Exit'\r\n    END\r\n    @@copilotGeneratedAction: 'False'\r\nDatabase.ExecuteSqlStatement.ConnectAndExecute ConnectionString: Input_ConnectionString Statement: $'''UPDATE\r\n    WorkItem\r\nSET\r\n    StatusId = %Status_Object[Input_WorkItemStatus]%\r\nWHERE\r\n    Id = %Input_WorkItemId%''' Timeout: 30\r\n    LABEL 'Exit'\r\nEND FUNCTION\r\nFUNCTION SQLServerCompleteWorkItem GLOBAL\r\n    IF IsEmpty(Input_WorkItemId) THEN\r\n        SET ErrorMessage TO $'''Empty Input_WorkItemId parameter provided. It is required for operation type %Input_WorkItemOperation%.'''\r\n        GOTO 'Exit'\r\n    ELSE IF IsEmpty(Input_FlowName) THEN\r\n        SET ErrorMessage TO $'''Empty Input_FlowName parameter provided. It is required for operation type %Input_WorkItemOperation%.'''\r\n        GOTO 'Exit'\r\n    ELSE IF IsEmpty(Input_WorkItemStatus) THEN\r\n        SET ErrorMessage TO $'''Empty Input_WorkItemStatus parameter provided. It is required for operation type %Input_WorkItemOperation%.'''\r\n        GOTO 'Exit'\r\n    ELSE IF IsEmpty(Input_WorkItemProcessingStartTime) THEN\r\n        SET ErrorMessage TO $'''Empty Input_WorkItemProcessingStartTime parameter provided. It is required for operation type %Input_WorkItemOperation%.'''\r\n        GOTO 'Exit'\r\n    END\r\n    @@copilotGeneratedAction: 'False'\r\nDatabase.ExecuteSqlStatement.ConnectAndExecute ConnectionString: Input_ConnectionString Statement: $'''EXEC usp_CompleteWorkItem @WorkItemId = %Input_WorkItemId%, @MachineName = \\'%ComputerName%\\', @ProjectNumber = \\'%Input_ProjectName%\\', @FlowName = \\'%Input_FlowName%\\', @WorkItemStatus = \\'%Input_WorkItemStatus%\\', @WorkItemReason = \\'%Input_WorkItemReason%\\',  @WorkItemMessage = \\'%Input_WorkItemMessage%\\', @ProcessingStartUTC = \\'%Input_WorkItemProcessingStartTime%\\';''' Timeout: 180 Result=&gt; Table_SPResult\r\n    ON ERROR\r\n\r\n    END\r\n    IF Table_SPResult.IsEmpty = $'''true''' THEN\r\n        SET ErrorMessage TO $'''The database returned nothing when completing work item \\\"%Input_WorkItemNumber%\\\".'''\r\n    ELSE IF Table_SPResult[0]['Status'] &lt; 0 THEN\r\n        SET ErrorMessage TO $'''Status: %Table_SPResult[0]['Status']%, Message: %Table_SPResult[0]['Message']%'''\r\n    END\r\n    LABEL 'Exit'\r\nEND FUNCTION\r\nFUNCTION SQLServerGetWorkItem GLOBAL\r\n    IF IsEmpty(Input_FlowName) THEN\r\n        SET ErrorMessage TO $'''Empty Input_FlowName parameter provided. It is required for operation type %Input_WorkItemOperation%.'''\r\n        GOTO 'Exit'\r\n    ELSE IF IsEmpty(Input_Environment) THEN\r\n        SET ErrorMessage TO $'''Empty Input_Environment parameter provided. It is required for operation type %Input_WorkItemOperation%.'''\r\n        GOTO 'Exit'\r\n    ELSE IF (IsEmpty(Input_MaxRetrieveCount) OR Input_MaxRetrieveCount = 0) = True THEN\r\n        SET ErrorMessage TO $'''Empty Input_MaxRetrieveCount parameter provided. It is required for operation type %Input_WorkItemOperation%.'''\r\n        GOTO 'Exit'\r\n    END\r\n    @@copilotGeneratedAction: 'False'\r\nDatabase.ExecuteSqlStatement.ConnectAndExecute ConnectionString: Input_ConnectionString Statement: $'''EXEC usp_GetHighestPriorityWorkItem @Environment = \\'%Input_Environment%\\', @MaxRetrieveCount = %Input_MaxRetrieveCount%;''' Timeout: 180 Result=&gt; Table_SPResult\r\n    IF Table_SPResult.IsEmpty = $'''true''' THEN\r\n        SET ErrorMessage TO $'''The database returned nothing when trying to get a work item.'''\r\n        GOTO 'Exit'\r\n    ELSE IF Table_SPResult[0]['Status'] &lt; 0 THEN\r\n        SET ErrorMessage TO $'''Status: %Table_SPResult[0]['Status']%, Message: %Table_SPResult[0]['Message']%'''\r\n        GOTO 'Exit'\r\n    ELSE IF Table_SPResult[0]['Status'] &gt; 0 THEN\r\n        SET Output_Status TO 204\r\n        SET Output_Message TO Table_SPResult[0]['Message']\r\n        GOTO 'Exit'\r\n    END\r\n    @@copilotGeneratedAction: 'False'\r\nDatabase.ExecuteSqlStatement.ConnectAndExecute ConnectionString: Input_ConnectionString Statement: $'''EXEC usp_GetWorkItem @MachineName = \\'%ComputerName%\\', @FlowName = \\'%Input_FlowName%\\', @MaxRetrieveCount = %Input_MaxRetrieveCount%;''' Timeout: 180 Result=&gt; Table_SPResult\r\n    IF Table_SPResult.IsEmpty = $'''true''' THEN\r\n        SET ErrorMessage TO $'''The database returned nothing when trying to get a work item.'''\r\n        GOTO 'Exit'\r\n    ELSE IF Table_SPResult[0]['Status'] &lt; 0 THEN\r\n        SET ErrorMessage TO $'''Status: %Table_SPResult[0]['Status']%, Message: %Table_SPResult[0]['Message']%'''\r\n        GOTO 'Exit'\r\n    ELSE IF Table_SPResult[0]['Status'] &gt; 0 THEN\r\n        SET Output_Status TO 204\r\n        SET Output_Message TO Table_SPResult[0]['Message']\r\n        GOTO 'Exit'\r\n    END\r\n    SET Output_WorkItemId TO Table_SPResult[0]['WorkItemId']\r\n    SET Output_WorkItemNumber TO Table_SPResult[0]['Number']\r\n    SET Output_WorkItemPriority TO Table_SPResult[0]['Priority']\r\n    SET Output_WorkItemRetrieveCount TO Table_SPResult[0]['RetrieveCount']\r\n    SET Output_WorkItemProcessingStartTime TO Table_SPResult[0]['ProcessingStartTime']\r\n    Variables.ConvertJsonToCustomObject Json: Table_SPResult[0]['DataContent'] CustomObject=&gt; Output_WorkItemData\r\n    SET Output_WorkItemDataSource TO Table_SPResult[0]['DataSource']\r\n    LABEL 'Exit'\r\nEND FUNCTION\r\nFUNCTION SQLServerUpsertWorkItem GLOBAL\r\n    IF IsEmpty(Input_WorkItemNumber) THEN\r\n        SET ErrorMessage TO $'''Empty Input_WorkItemNumber parameter provided. It is required for operation type %Input_WorkItemOperation%.'''\r\n        GOTO 'Exit'\r\n    ELSE IF IsEmpty(Input_ProjectName) THEN\r\n        SET ErrorMessage TO $'''Empty Input_ProjectName parameter provided. It is required for operation type %Input_WorkItemOperation%.'''\r\n        GOTO 'Exit'\r\n    ELSE IF IsEmpty(Input_FlowName) THEN\r\n        SET ErrorMessage TO $'''Empty Input_FlowName parameter provided. It is required for operation type %Input_WorkItemOperation%.'''\r\n        GOTO 'Exit'\r\n    ELSE IF IsEmpty(Input_WorkItemData) THEN\r\n        SET ErrorMessage TO $'''Empty Input_WorkItemData parameter provided. It is required for operation type %Input_WorkItemOperation%.'''\r\n        GOTO 'Exit'\r\n    ELSE IF IsEmpty(Input_WorkItemDataSource) THEN\r\n        SET ErrorMessage TO $'''Empty Input_WorkItemDataSource parameter provided. It is required for operation type %Input_WorkItemOperation%.'''\r\n        GOTO 'Exit'\r\n    ELSE IF IsEmpty(Input_WorkItemPriority) THEN\r\n        SET ErrorMessage TO $'''Empty Input_WorkItemPriority parameter provided. It is required for operation type %Input_WorkItemOperation%.'''\r\n        GOTO 'Exit'\r\n    END\r\n    Variables.ConvertCustomObjectToJson CustomObject: Input_WorkItemData Json=&gt; WorkItem_DataContent\r\n    Text.Replace Text: WorkItem_DataContent TextToFind: $'''\\'''' IsRegEx: False IgnoreCase: False ReplaceWith: $'''\\'\\'''' ActivateEscapeSequences: False Result=&gt; WorkItem_DataContent\r\n    @@copilotGeneratedAction: 'False'\r\nDatabase.ExecuteSqlStatement.ConnectAndExecute ConnectionString: Input_ConnectionString Statement: $'''EXEC usp_UpsertWorkItem @Number = \\'%Input_WorkItemNumber%\\', @ProjectNumber = \\'%Input_ProjectName%\\', @FlowName = \\'%Input_FlowName%\\', @DataContent = \\'%WorkItem_DataContent%\\', @DataSource = \\'%Input_WorkItemDataSource%\\', @Priority = \\'%Input_WorkItemPriority%\\';''' Timeout: 180 Result=&gt; Table_SPResult\r\n    IF Table_SPResult.IsEmpty = $'''true''' THEN\r\n        SET ErrorMessage TO $'''The database returned nothing when upserting work item \\\"%Input_WorkItemNumber%\\\".'''\r\n        GOTO 'Exit'\r\n    ELSE IF Table_SPResult[0]['Status'] &lt; 0 THEN\r\n        SET ErrorMessage TO $'''Status: %Table_SPResult[0]['Status']%, Message: %Table_SPResult[0]['Message']%'''\r\n        GOTO 'Exit'\r\n    END\r\n    SET Output_WorkItemId TO Table_SPResult[0]['WorkItemId']\r\n    IF $'''Output_WorkItemId''' = (-1) THEN\r\n        SET ErrorMessage TO $'''UpsertWorkItem did not return a valid Work Item Id'''\r\n    END\r\n    LABEL 'Exit'\r\nEND FUNCTION\r\nFUNCTION SQLiteGetWorkItem GLOBAL\r\n    @@copilotGeneratedAction: 'False'\r\nDatabase.ExecuteSqlStatement.ConnectAndExecute ConnectionString: Input_ConnectionString Statement: $'''SELECT\r\n    wi.Id\r\n  ,wi.Number\r\n  ,wi.RetrieveCount\r\n  ,wi.AccumulatedRunTime\r\n  ,wid.DataContent\r\n  ,wid.DataSource\r\n  ,pr.Name \\'Priority\\'\r\nFROM WorkItem wi\r\nINNER JOIN WorkItemData wid ON wi.Id = wid.WorkItemId\r\nINNER JOIN Project p ON wi.ProjectId = p.Id\r\nINNER JOIN Flow f ON wi.FlowId = f.Id\r\nINNER JOIN Priority pr ON wi.PriorityId = pr.Id\r\nWHERE\r\n    wi.Processed = 0\r\n  AND wi.RetrieveCount &lt; %Input_MaxRetrieveCount%\r\n  AND p.ProjectNumber = \\'%Input_ProjectName%\\'\r\n  AND f.Name = \\'%Input_FlowName%\\'\r\nLIMIT 1''' Timeout: 30 Result=&gt; Table_WorkItem\r\n    IF (Table_WorkItem.IsEmpty) = (True) THEN\r\n        SET Output_Status TO 204\r\n        SET Output_Message TO $'''No unprocessed work items available.'''\r\n        GOTO 'Exit'\r\n    END\r\n    SET Output_WorkItemId TO Table_WorkItem[0]['Id']\r\n    SET Output_WorkItemNumber TO Table_WorkItem[0]['Number']\r\n    SET Output_WorkItemRetrieveCount TO Table_WorkItem[0]['RetrieveCount']\r\n    SET WorkItem_AccumulatedRunTime TO Table_WorkItem[0]['AccumulatedRunTime']\r\n    Variables.ConvertJsonToCustomObject Json: Table_WorkItem[0]['DataContent'] CustomObject=&gt; Output_WorkItemData\r\n    SET Output_WorkItemDataSource TO Table_WorkItem[0]['DataSource']\r\n    SET Output_WorkItemPriority TO Table_WorkItem[0]['Priority']\r\n    Variables.IncreaseVariable Value: Output_WorkItemRetrieveCount IncrementValue: 1\r\n    @@copilotGeneratedAction: 'False'\r\nDatabase.ExecuteSqlStatement.ConnectAndExecute ConnectionString: Input_ConnectionString Statement: $'''UPDATE\r\n    WorkItem\r\nSET\r\n    RetrieveCount = %Output_WorkItemRetrieveCount%\r\nWHERE\r\n    Id = %Output_WorkItemId%''' Timeout: 30\r\n    DateTime.GetCurrentDateTime.Local DateTimeFormat: DateTime.DateTimeFormat.DateAndTime CurrentDateTime=&gt; Output_WorkItemProcessingStartTimestamp\r\n    LABEL 'Exit'\r\nEND FUNCTION\r\nFUNCTION SQLiteUpdateAccumulatedRuntime GLOBAL\r\n    DateTime.GetCurrentDateTime.Local DateTimeFormat: DateTime.DateTimeFormat.DateAndTime CurrentDateTime=&gt; ProcessingEndTimestamp\r\n    @@copilotGeneratedAction: 'False'\r\nDatabase.ExecuteSqlStatement.ConnectAndExecute ConnectionString: Input_ConnectionString Statement: $'''SELECT\r\n  wi.AccumulatedRunTime\r\nFROM WorkItem wi\r\nWHERE\r\n    wi.Id = %Input_WorkItemId%''' Timeout: 30 Result=&gt; Table_WorkItem\r\n    IF (Table_WorkItem.IsEmpty) = (True) THEN\r\n        SET ErrorMessage TO $'''Work item with Id \\\"%Input_WorkItemId%\\\" not found in the Work Item table.'''\r\n        GOTO 'Exit'\r\n    END\r\n    Text.ToNumber Text: Table_WorkItem[0]['AccumulatedRunTime'] Number=&gt; AccumulatedRunTime\r\n    Text.ConvertTextToDateTime.ToDateTimeCustomFormat Text: Input_WorkItemProcessingStartTime CustomFormat: $'''yyyy-MM-dd HH:mm:ss''' DateTime=&gt; ProcessingStartTimestamp\r\n    DateTime.Subtract SubstractDate: ProcessingStartTimestamp FromDate: ProcessingEndTimestamp TimeUnit: DateTime.DifferenceTimeUnit.Seconds TimeDifference=&gt; Seconds\r\n    Variables.IncreaseVariable Value: AccumulatedRunTime IncrementValue: Seconds\r\n    @@copilotGeneratedAction: 'False'\r\nDatabase.ExecuteSqlStatement.ConnectAndExecute ConnectionString: Input_ConnectionString Statement: $'''UPDATE\r\n    WorkItem\r\nSET\r\n    AccumulatedRunTime = %AccumulatedRunTime%\r\nWHERE\r\n    Id = %Input_WorkItemId%''' Timeout: 30\r\n    LABEL 'Exit'\r\nEND FUNCTION\r\nFUNCTION SQLiteUpsertWorkItem GLOBAL\r\n    IF IsEmpty(Input_WorkItemNumber) THEN\r\n        SET ErrorMessage TO $'''Empty Input_WorkItemNumber parameter provided. It is required for operation type %Input_WorkItemOperation%.'''\r\n        GOTO 'Exit'\r\n    ELSE IF IsEmpty(Input_ProjectName) THEN\r\n        SET ErrorMessage TO $'''Empty Input_ProjectName parameter provided. It is required for operation type %Input_WorkItemOperation%.'''\r\n        GOTO 'Exit'\r\n    ELSE IF IsEmpty(Input_WorkItemData) THEN\r\n        SET ErrorMessage TO $'''Empty Input_WorkItemData parameter provided. It is required for operation type %Input_WorkItemOperation%.'''\r\n        GOTO 'Exit'\r\n    ELSE IF IsEmpty(Input_WorkItemDataSource) THEN\r\n        SET ErrorMessage TO $'''Empty Input_WorkItemDataSource parameter provided. It is required for operation type %Input_WorkItemOperation%.'''\r\n        GOTO 'Exit'\r\n    ELSE IF IsEmpty(Input_FlowName) THEN\r\n        SET ErrorMessage TO $'''Empty Input_FlowName parameter provided. It is required for operation type %Input_WorkItemOperation%.'''\r\n        GOTO 'Exit'\r\n    ELSE IF IsEmpty(Input_WorkItemPriority) THEN\r\n        SET ErrorMessage TO $'''Empty Input_WorkItemPriority parameter provided. It is required for operation type %Input_WorkItemOperation%.'''\r\n        GOTO 'Exit'\r\n    END\r\n    Variables.ConvertCustomObjectToJson CustomObject: Input_WorkItemData Json=&gt; WorkItem_DataContent\r\n    Text.Replace Text: WorkItem_DataContent TextToFind: $'''\\'''' IsRegEx: False IgnoreCase: False ReplaceWith: $'''\\'\\'''' ActivateEscapeSequences: False Result=&gt; WorkItem_DataContent\r\n    CALL SQLiteGetUnprocessedWorkItem\r\n    IF IsNotEmpty(Output_WorkItemId) THEN\r\n        @@copilotGeneratedAction: 'False'\r\nDatabase.ExecuteSqlStatement.ConnectAndExecute ConnectionString: Input_ConnectionString Statement: $'''UPDATE\r\n    WorkItemData\r\nSET\r\n    DataContent = \\'%WorkItem_DataContent%\\',\r\n    RetrieveCount = 0,\r\n    Processed = 0\r\nWHERE\r\n    WorkItemId = %Output_WorkItemId%''' Timeout: 30\r\n    ELSE\r\n        CALL SQLiteGetProjectId\r\n        IF IsNotEmpty(ErrorMessage) THEN\r\n            GOTO 'Exit'\r\n        END\r\n        CALL SQLiteGetFlowId\r\n        IF IsNotEmpty(ErrorMessage) THEN\r\n            GOTO 'Exit'\r\n        END\r\n        CALL SQLiteGetPriorityId\r\n        IF IsNotEmpty(ErrorMessage) THEN\r\n            GOTO 'Exit'\r\n        END\r\n        @@copilotGeneratedAction: 'False'\r\nDatabase.ExecuteSqlStatement.ConnectAndExecute ConnectionString: Input_ConnectionString Statement: $'''INSERT INTO\r\n    WorkItem (Number, ProjectId, FlowId, PriorityId)\r\nVALUES\r\n(\\'%Input_WorkItemNumber%\\', %ProjectId%, %FlowId%, %PriorityId%)''' Timeout: 30\r\n        # Getting the Id of the new work item after inserting it.\r\n        CALL SQLiteGetUnprocessedWorkItem\r\n        @@copilotGeneratedAction: 'False'\r\nDatabase.ExecuteSqlStatement.ConnectAndExecute ConnectionString: Input_ConnectionString Statement: $'''INSERT INTO\r\n    WorkItemData (WorkItemId, DataContent, DataSource)\r\nVALUES\r\n(%Output_WorkItemId%, \\'%WorkItem_DataContent%\\', \\'%Input_WorkItemDataSource%\\')''' Timeout: 30\r\n    END\r\n    LABEL 'Exit'\r\nEND FUNCTION\r\nFUNCTION SQLiteGetUnprocessedWorkItem GLOBAL\r\n    @@copilotGeneratedAction: 'False'\r\nDatabase.ExecuteSqlStatement.ConnectAndExecute ConnectionString: Input_ConnectionString Statement: $'''SELECT\r\n    wi.Id\r\nFROM\r\n    WorkItem wi\r\nINNER JOIN Project p ON wi.ProjectId = p.Id\r\nINNER JOIN Flow f ON wi.FlowId = f.Id\r\nWHERE\r\n    wi.Number = \\'%Input_WorkItemNumber%\\'\r\n    AND wi.Processed = 0\r\n    AND p.ProjectNumber = \\'%Input_ProjectName%\\'\r\n    AND f.Name = \\'%Input_FlowName%\\'''' Timeout: 30 Result=&gt; Table_WorkItemId\r\n    IF (Table_WorkItemId.IsEmpty) = (True) THEN\r\n        GOTO 'Exit'\r\n    END\r\n    SET Output_WorkItemId TO Table_WorkItemId[0]['Id']\r\n    LABEL 'Exit'\r\nEND FUNCTION\r\nFUNCTION SQLiteGetProjectId GLOBAL\r\n    @@copilotGeneratedAction: 'False'\r\nDatabase.ExecuteSqlStatement.ConnectAndExecute ConnectionString: Input_ConnectionString Statement: $'''SELECT\r\n    Id\r\nFROM\r\n    Project\r\nWHERE\r\n     ProjectNumber = \\'%Input_ProjectName%\\'''' Timeout: 30 Result=&gt; Table_Project\r\n    IF (Table_Project.IsEmpty) = (True) THEN\r\n        SET ErrorMessage TO $'''Project \\\"%Input_ProjectName%\\\" not found in the Project table.'''\r\n        GOTO 'Exit'\r\n    END\r\n    SET ProjectId TO Table_Project[0]['Id']\r\n    LABEL 'Exit'\r\nEND FUNCTION\r\nFUNCTION SQLiteGetFlowId GLOBAL\r\n    @@copilotGeneratedAction: 'False'\r\nDatabase.ExecuteSqlStatement.ConnectAndExecute ConnectionString: Input_ConnectionString Statement: $'''SELECT\r\n    Id\r\nFROM\r\n    Flow\r\nWHERE\r\n     Name = \\'%Input_FlowName%\\'\r\n     AND ProjectId = %ProjectId%''' Timeout: 30 Result=&gt; Table_Flow\r\n    IF Table_Flow.IsEmpty = True THEN\r\n        SET ErrorMessage TO $'''Flow \\\"%Input_FlowName%\\\" under project \\\"%Input_ProjectName%\\\" not found in the Flow table.'''\r\n        GOTO 'Exit'\r\n    END\r\n    SET FlowId TO Table_Flow[0]['Id']\r\n    LABEL 'Exit'\r\nEND FUNCTION\r\nFUNCTION Init GLOBAL\r\n    Text.Replace Text: Input_ProjectName TextToFind: $'''\\'''' IsRegEx: False IgnoreCase: False ReplaceWith: $'''\\'\\'''' ActivateEscapeSequences: False Result=&gt; Input_ProjectName\r\n    Text.Replace Text: Input_FlowName TextToFind: $'''\\'''' IsRegEx: False IgnoreCase: False ReplaceWith: $'''\\'\\'''' ActivateEscapeSequences: False Result=&gt; Input_FlowName\r\n    Text.Replace Text: Input_WorkItemNumber TextToFind: $'''\\'''' IsRegEx: False IgnoreCase: False ReplaceWith: $'''\\'\\'''' ActivateEscapeSequences: False Result=&gt; Input_WorkItemNumber\r\n    Text.Replace Text: Input_WorkItemDataSource TextToFind: $'''\\'''' IsRegEx: False IgnoreCase: False ReplaceWith: $'''\\'\\'''' ActivateEscapeSequences: False Result=&gt; Input_WorkItemDataSource\r\n    Text.Replace Text: Input_WorkItemReason TextToFind: $'''\\'''' IsRegEx: False IgnoreCase: False ReplaceWith: $'''\\'\\'''' ActivateEscapeSequences: False Result=&gt; Input_WorkItemReason\r\n    Text.Replace Text: Input_WorkItemMessage TextToFind: $'''\\'''' IsRegEx: False IgnoreCase: False ReplaceWith: $'''\\'\\'''' ActivateEscapeSequences: False Result=&gt; Input_WorkItemMessage\r\n    SET Output_WorkItemPriority TO Input_WorkItemPriority\r\n    SET Output_WorkItemData TO {{ }}\r\n    SET Output_WorkItemData TO Input_WorkItemData\r\n    SET Output_WorkItemDataSource TO Input_WorkItemDataSource\r\n    SET Output_WorkItemId TO Input_WorkItemId\r\n    SET Output_WorkItemNumber TO Input_WorkItemNumber\r\n    SET Output_WorkItemProcessingStartTime TO Input_WorkItemProcessingStartTime\r\nEND FUNCTION\r\nFUNCTION SQLiteGetPriorityId GLOBAL\r\n    @@copilotGeneratedAction: 'False'\r\nDatabase.ExecuteSqlStatement.ConnectAndExecute ConnectionString: Input_ConnectionString Statement: $'''SELECT\r\n    Id\r\nFROM\r\n    Priority\r\nWHERE\r\n     Name = \\'%Input_WorkItemPriority%\\'''' Timeout: 30 Result=&gt; Table_Priority\r\n    IF Table_Priority.IsEmpty = True THEN\r\n        SET ErrorMessage TO $'''Priority \\\"%Input_WorkItemPriority%\\\" not found in the Priority table.'''\r\n        GOTO 'Exit'\r\n    END\r\n    SET PriorityId TO Table_Priority[0]['Id']\r\n    LABEL 'Exit'\r\nEND FUNCTION\r\n"</Definition>
      <SchemaVersion>2022.07</SchemaVersion>
      <DesktopFlowModules>[]</DesktopFlowModules>
      <PrimaryEntity>none</PrimaryEntity>
      <LocalizedNames>
        <LocalizedName languagecode="1033" description="PADFramework: WorkItemHandler" />
      </LocalizedNames>
    </Workflow>
  </Workflows>
  <FieldSecurityProfiles></FieldSecurityProfiles>
  <Templates />
  <EntityMaps />
  <EntityRelationships />
  <OrganizationSettings />
  <optionsets />
  <CustomControls />
  <EntityDataProviders />
  <connectionreferences>
    <connectionreference connectionreferencelogicalname="def_PADFramework_Dataverse">
      <connectionreferencedisplayname>PADFramework_Dataverse</connectionreferencedisplayname>
      <connectorid>/providers/Microsoft.PowerApps/apis/shared_commondataserviceforapps</connectorid>
      <iscustomizable>1</iscustomizable>
      <statecode>0</statecode>
      <statuscode>1</statuscode>
    </connectionreference>
    <connectionreference connectionreferencelogicalname="def_PADFramework_Office365Outlook">
      <connectionreferencedisplayname>PADFramework_Office365Outlook</connectionreferencedisplayname>
      <connectorid>/providers/Microsoft.PowerApps/apis/shared_office365</connectorid>
      <description>Connection reference for using the O365 Outlook connector in flows.</description>
      <iscustomizable>1</iscustomizable>
      <statecode>0</statecode>
      <statuscode>1</statuscode>
    </connectionreference>
    <connectionreference connectionreferencelogicalname="def_PADFramework_SharePoint">
      <connectionreferencedisplayname>PADFramework_SharePoint</connectionreferencedisplayname>
      <connectorid>/providers/Microsoft.PowerApps/apis/shared_sharepointonline</connectorid>
      <iscustomizable>1</iscustomizable>
      <statecode>0</statecode>
      <statuscode>1</statuscode>
    </connectionreference>
  </connectionreferences>
  <workqueues>
    <workqueue workqueueid="4b22c5ab-fce5-ee11-904c-0022487f2c0b">
      <description>Sample work queue for work items</description>
      <inputschematype>0</inputschematype>
      <iscustomizable>1</iscustomizable>
      <itemmaxrequeuecount>40</itemmaxrequeuecount>
      <itemmaxretrycount>0</itemmaxretrycount>
      <name>WorkItem</name>
      <prioritytype>0</prioritytype>
      <statecode>0</statecode>
      <statuscode>1</statuscode>
      <workqueuekey>WI</workqueuekey>
      <workqueuetype>0</workqueuetype>
    </workqueue>
  </workqueues>
  <Languages>
    <Language>1033</Language>
  </Languages>
</ImportExportXml>